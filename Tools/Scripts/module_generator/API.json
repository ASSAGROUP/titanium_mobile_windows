{
	"BlobStream": {
		"Ti.BlobStream": {
			"parent": "Ti.IOStream",
			"summary": "Wrapper around Ti.Blob that implements the Ti.IOStream interface.",
			"properties": {},
			"methods": {}
		}
	},
	"API": {
		"Ti.API": {
			"parent": "Ti.Module",
			"summary": "The top-level API module, containing methods to output messages to the system log.",
			"properties": {},
			"methods": {
				"debug": {
					"summary": "Logs messages with a debug severity-level."
				},
				"error": {
					"summary": "Logs messages with an error severity-level."
				},
				"info": {
					"summary": "Logs messages with an info severity-level."
				},
				"log": {
					"summary": "Logs messages with the specified severity-level."
				},
				"timestamp": {
					"summary": "Logs messages with a timestamp severity-level, prefixed with a timestamp float number \nrepresenting the number of seconds since January 1st, 2001."
				},
				"trace": {
					"summary": "Logs messages with a trace severity-level."
				},
				"warn": {
					"summary": "Logs messages with a warn severity-level."
				}
			}
		}
	},
	"Blob": {
		"Ti.Blob": {
			"parent": "Ti.Proxy",
			"summary": "A container for binary data.",
			"properties": {
				"file": {
					"summary": "File object represented by this blob, or null if this blob is not\nassociated with a file.",
					"readOnly": true
				},
				"height": {
					"summary": "If this blob represents an image, this is the height of the image in pixels.",
					"readOnly": true
				},
				"length": {
					"summary": "Length of this blob in bytes.",
					"readOnly": true
				},
				"mimeType": {
					"summary": "Mime type of the data in this blob.",
					"readOnly": true
				},
				"nativePath": {
					"summary": "If this blob represents a File, this is the file URL\nthat represents it.",
					"readOnly": true
				},
				"size": {
					"summary": "Size of the blob in pixels (for image blobs) or bytes (for all other blobs).",
					"readOnly": true
				},
				"text": {
					"summary": "UTF-8 string representation of the data in this blob.",
					"readOnly": true
				},
				"width": {
					"summary": "If this blob represents an image, this is the width of the image in pixels.",
					"readOnly": true
				}
			},
			"methods": {
				"append": {
					"summary": "Appends the data from another blob to this blob."
				},
				"getFile": {
					"summary": "Gets the value of the file property."
				},
				"getHeight": {
					"summary": "Gets the value of the height property."
				},
				"getLength": {
					"summary": "Gets the value of the length property."
				},
				"getMimeType": {
					"summary": "Gets the value of the mimeType property."
				},
				"getNativePath": {
					"summary": "Gets the value of the nativePath property."
				},
				"getSize": {
					"summary": "Gets the value of the size property."
				},
				"getText": {
					"summary": "Gets the value of the text property."
				},
				"getWidth": {
					"summary": "Gets the value of the width property."
				},
				"imageAsCropped": {
					"summary": "Creates a new blob by cropping the underlying image to the specified dimensions."
				},
				"imageAsResized": {
					"summary": "Creates a new blob by resizing and scaling the underlying image to the specified dimensions."
				},
				"imageAsThumbnail": {
					"summary": "Returns a thumbnail version of the underlying image, optionally with a border and rounded corners."
				},
				"imageWithAlpha": {
					"summary": "Returns a copy of the underlying image with an added alpha channel."
				},
				"imageWithRoundedCorner": {
					"summary": "Returns a copy of the underlying image with rounded corners added."
				},
				"imageWithTransparentBorder": {
					"summary": "Returns a copy of the underlying image with an added transparent border."
				}
			}
		}
	},
	"Codec": {
		"Ti.Codec": {
			"parent": "Ti.Module",
			"summary": "A module for translating between primitive types and raw byte streams.",
			"properties": {
				"BIG_ENDIAN": {
					"summary": "Big endian (network) byte order -- that is, the most significant byte first.",
					"readOnly": true
				},
				"CHARSET_ASCII": {
					"summary": "ASCII character encoding..",
					"readOnly": true
				},
				"CHARSET_ISO_LATIN_1": {
					"summary": "ISO 8859-1 (Latin-1) character encoding.",
					"readOnly": true
				},
				"CHARSET_UTF16": {
					"summary": "UTF-16 character encoding with default byte order.",
					"readOnly": true
				},
				"CHARSET_UTF16BE": {
					"summary": "UTF-16 character encoding with big endian byte order.",
					"readOnly": true
				},
				"CHARSET_UTF16LE": {
					"summary": "UTF-16 character encoding with little endian byte order.",
					"readOnly": true
				},
				"CHARSET_UTF8": {
					"summary": "UTF-8 character encoding.",
					"readOnly": true
				},
				"LITTLE_ENDIAN": {
					"summary": "Little endian byte order -- that is, the least significant byte first.",
					"readOnly": true
				},
				"TYPE_BYTE": {
					"summary": "8-bit integer encoding type.",
					"readOnly": true
				},
				"TYPE_DOUBLE": {
					"summary": "64-bit double precision floating-point type.",
					"readOnly": true
				},
				"TYPE_FLOAT": {
					"summary": "32-bit single precision floating-point type.",
					"readOnly": true
				},
				"TYPE_INT": {
					"summary": "32-bit integer encoding type.",
					"readOnly": true
				},
				"TYPE_LONG": {
					"summary": "64-bit integer encoding type.",
					"readOnly": true
				},
				"TYPE_SHORT": {
					"summary": "16-bit integer encoding type.",
					"readOnly": true
				}
			},
			"methods": {
				"decodeNumber": {
					"summary": "Decodes a number from the source buffer using the specified data type."
				},
				"decodeString": {
					"summary": "Decodes the source buffer into a String using the supplied character set."
				},
				"encodeNumber": {
					"summary": "Encodes a number and writes it to a buffer."
				},
				"encodeString": {
					"summary": "Encodes a string into a series of bytes in a buffer using the specified character set."
				},
				"getNativeByteOrder": {
					"summary": "Get the OS native byte order (either Ti.Codec.BIG_ENDIAN or\nTi.Codec.LITTLE_ENDIAN)."
				}
			}
		}
	},
	"Locale": {
		"Ti.Locale": {
			"parent": "Ti.Module",
			"summary": "The top level Locale module.",
			"properties": {
				"currentCountry": {
					"summary": "Country of the current system locale, as an ISO 2-letter code.",
					"readOnly": true
				},
				"currentLanguage": {
					"summary": "Language of the current system locale, as an ISO 2-letter code.",
					"readOnly": true
				},
				"currentLocale": {
					"summary": "Current system locale, as a combination of ISO 2-letter language and country codes.",
					"readOnly": true
				}
			},
			"methods": {
				"formatTelephoneNumber": {
					"summary": "Formats a telephone number according to the current system locale."
				},
				"getCurrencyCode": {
					"summary": "Returns the ISO 3-letter currency code for the specified locale."
				},
				"getCurrencySymbol": {
					"summary": "Returns the currency symbol for the specified currency code."
				},
				"getCurrentCountry": {
					"summary": "Gets the value of the currentCountry property."
				},
				"getCurrentLanguage": {
					"summary": "Gets the value of the currentLanguage property."
				},
				"getCurrentLocale": {
					"summary": "Gets the value of the currentLocale property."
				},
				"getLocaleCurrencySymbol": {
					"summary": "Returns the currency symbol for the specified locale."
				},
				"getString": {
					"summary": "Returns a string, localized according to the current system locale using the appropriate \n/i18n/LANG/strings.xml localization file."
				}
			}
		}
	},
	"Proxy": {
		"Ti.Proxy": {
			"parent": "Object",
			"summary": "The base for all Ti objects.",
			"properties": {
				"apiName": {
					"summary": "The name of the API that this proxy corresponds to.",
					"readOnly": true
				},
				"bubbleParent": {
					"summary": "Indicates if the proxy will bubble an event to its parent."
				}
			},
			"methods": {
				"addEventListener": {
					"summary": "Adds the specified callback as an event listener for the named event."
				},
				"applyProperties": {
					"summary": "Applies the properties to the proxy."
				},
				"fireEvent": {
					"summary": "Fires a synthesized event to any registered listeners."
				},
				"getApiName": {
					"summary": "Gets the value of the apiName property."
				},
				"getBubbleParent": {
					"summary": "Gets the value of the bubbleParent property."
				},
				"removeEventListener": {
					"summary": "Removes the specified callback as an event listener for the named event."
				},
				"setBubbleParent": {
					"summary": "Sets the value of the bubbleParent property."
				}
			}
		}
	},
	"App": {
		"Ti.App": {
			"parent": "Ti.Module",
			"summary": "The top-level App module is mainly used for accessing information about the\napplication at runtime, and for sending or listening for system events.",
			"properties": {
				"EVENT_ACCESSIBILITY_ANNOUNCEMENT": {
					"summary": "Convenience constant for system event \"accessibilityannouncement\".",
					"readOnly": true
				},
				"EVENT_ACCESSIBILITY_CHANGED": {
					"summary": "Convenience constant for system event \"accessibilitychanged\".",
					"readOnly": true
				},
				"accessibilityEnabled": {
					"summary": "Indicates whether Accessibility is enabled by the system.",
					"readOnly": true
				},
				"analytics": {
					"summary": "Indicates whether Analytics is enabled, determined by tiapp.xml.",
					"readOnly": true
				},
				"copyright": {
					"summary": "Application copyright statement, determined by tiapp.xml.",
					"readOnly": true
				},
				"deployType": {
					"summary": "Build type that reflects how the application was packaged; either test, development or \nproduction.",
					"readOnly": true
				},
				"description": {
					"summary": "Application description, determined by tiapp.xml.",
					"readOnly": true
				},
				"disableNetworkActivityIndicator": {
					"summary": "Prevents network activity indicator from being displayed."
				},
				"forceSplashAsSnapshot": {
					"summary": "Shows the application's splash screen on app resume."
				},
				"guid": {
					"summary": "Application globally-unique ID, determined by tiapp.xml.",
					"readOnly": true
				},
				"id": {
					"summary": "Application ID, from tiapp.xml.",
					"readOnly": true
				},
				"idleTimerDisabled": {
					"summary": "Determines whether the screen is locked when the device is idle."
				},
				"installId": {
					"summary": "The install ID for this application.",
					"readOnly": true
				},
				"keyboardVisible": {
					"summary": "Indicates whether or not the soft keyboard is visible.",
					"readOnly": true
				},
				"name": {
					"summary": "Application name, determined by tiapp.xml.",
					"readOnly": true
				},
				"proximityDetection": {
					"summary": "Determines whether proximity detection is enabled."
				},
				"proximityState": {
					"summary": "Indicates the state of the device's proximity sensor, according to the \nTi.App.proximity event.",
					"readOnly": true
				},
				"publisher": {
					"summary": "Application publisher, from tiapp.xml.",
					"readOnly": true
				},
				"sessionId": {
					"summary": "Unique session identifier for the current continuous run of the application.",
					"readOnly": true
				},
				"url": {
					"summary": "Application URL, from tiapp.xml.",
					"readOnly": true
				},
				"version": {
					"summary": "Application version, from tiapp.xml.",
					"readOnly": true
				}
			},
			"methods": {
				"fireSystemEvent": {
					"summary": "Fire a system-level event such as Ti.App.EVENT_ACCESSIBILITY_ANNOUNCEMENT."
				},
				"getAccessibilityEnabled": {
					"summary": "Gets the value of the accessibilityEnabled property."
				},
				"getAnalytics": {
					"summary": "Gets the value of the analytics property."
				},
				"getArguments": {
					"summary": "Returns the arguments passed to the application on startup."
				},
				"getCopyright": {
					"summary": "Gets the value of the copyright property."
				},
				"getDeployType": {
					"summary": "Gets the value of the deployType property."
				},
				"getDescription": {
					"summary": "Gets the value of the description property."
				},
				"getDisableNetworkActivityIndicator": {
					"summary": "Gets the value of the disableNetworkActivityIndicator property."
				},
				"getForceSplashAsSnapshot": {
					"summary": "Gets the value of the forceSplashAsSnapshot property."
				},
				"getGuid": {
					"summary": "Gets the value of the guid property."
				},
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getIdleTimerDisabled": {
					"summary": "Gets the value of the idleTimerDisabled property."
				},
				"getInstallId": {
					"summary": "Gets the value of the installId property."
				},
				"getKeyboardVisible": {
					"summary": "Gets the value of the keyboardVisible property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getProximityDetection": {
					"summary": "Gets the value of the proximityDetection property."
				},
				"getProximityState": {
					"summary": "Gets the value of the proximityState property."
				},
				"getPublisher": {
					"summary": "Gets the value of the publisher property."
				},
				"getSessionId": {
					"summary": "Gets the value of the sessionId property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"getVersion": {
					"summary": "Gets the value of the version property."
				},
				"setDisableNetworkActivityIndicator": {
					"summary": "Sets the value of the disableNetworkActivityIndicator property."
				},
				"setForceSplashAsSnapshot": {
					"summary": "Sets the value of the forceSplashAsSnapshot property."
				},
				"setIdleTimerDisabled": {
					"summary": "Sets the value of the idleTimerDisabled property."
				},
				"setProximityDetection": {
					"summary": "Sets the value of the proximityDetection property."
				}
			}
		},
		"Ti.App.Properties": {
			"parent": "Ti.Module",
			"summary": "The App Properties module is used for storing application-related data in property/value pairs \nthat persist beyond application sessions and device power cycles.\nApp Properties in the tiapp.xml file\nApp properties defined in the tiapp.xml file may be accessed using these APIs.  An app\nproperty is defined inside the root-level &lt;ti:app&gt; element with the &lt;property&gt; element.\nUse the name attribute to define your property name and place the value inline with the\n&lt;property&gt; element. For example, to define an app property called foo with the value 42:\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;ti:app xmlns:ti=\"http://ti.appcelerator.org\"&gt;\n    &lt;property name=\"foo\" type=\"string\"&gt;42&lt;/property&gt;\n&lt;/ti:app&gt;\n\nThen, you can retrieve the property during runtime with the following API call:\nvar foo = Ti.App.Properties.getString('foo');\n\nAs of Release 3.2.0, any application properties defined in the tiapp.xml file are stored in the\ndevice's secure storage, making them read-only.  Additionally, external access to these\nproperties is now restricted.  Other iOS applications cannot access these properties and\nnative Android modules must use the Ti module API\nTiApplication.getAppProperties\nmethod to access these properties.\nIf you need to change the values during runtime, initially create the property with these APIs\nrather than defining them in the tiapp.xml file.\nPrior to Release 3.2.0, application properties defined in the tiapp.xml file could be\noverwritten by these APIs and accessed externally by other applications and modules.",
			"properties": {},
			"methods": {
				"getBool": {
					"summary": "Returns the value of a property as a boolean data type."
				},
				"getDouble": {
					"summary": "Returns the value of a property as a double (double-precision, floating point) data type."
				},
				"getInt": {
					"summary": "Returns the value of a property as an integer data type."
				},
				"getList": {
					"summary": "Returns the value of a property as an array data type."
				},
				"getObject": {
					"summary": "Returns the value of a property as an object."
				},
				"getString": {
					"summary": "Returns the value of a property as a string data type."
				},
				"hasProperty": {
					"summary": "Indicates whether a property exists."
				},
				"listProperties": {
					"summary": "Returns an array of property names."
				},
				"removeProperty": {
					"summary": "Removes a property if it exists, or does nothing otherwise."
				},
				"setBool": {
					"summary": "Sets the value of a property as a boolean data type. The property will be created if it \ndoes not exist."
				},
				"setDouble": {
					"summary": "Sets the value of a property as a double (double-precision, floating point) data type. The \nproperty will be created if it does not exist."
				},
				"setInt": {
					"summary": "Sets the value of a property as an integer data type. The property will be created if it \ndoes not exist."
				},
				"setList": {
					"summary": "Sets the value of a property as an array data type. The property will be created if it \ndoes not exist."
				},
				"setObject": {
					"summary": "Sets the value of a property as an object data type. The property will be created if it \ndoes not exist."
				},
				"setString": {
					"summary": "Sets the value of a property as a string data type. The property will be created if it \ndoes not exist."
				}
			}
		},
		"Ti.App.Tizen": {
			"parent": "Ti.Module",
			"summary": "A module used to access Tizen application resources.",
			"properties": {
				"categories": {
					"summary": "The categories that the current app belongs to.",
					"readOnly": true
				},
				"iconPath": {
					"summary": "Returns the path where the icon for this application is stored in the file storage of the Tizen device.",
					"readOnly": true
				},
				"id": {
					"summary": "Returns the Tizen-specific identifier of the current (running) application for application management.",
					"readOnly": true
				},
				"installDate": {
					"summary": "The current application's install/update time.",
					"readOnly": true
				},
				"name": {
					"summary": "Returns the Tizen-specific name of the current (running) application.",
					"readOnly": true
				},
				"show": {
					"summary": "Determines whether the application information of the current application should be shown (such as in the menus) or not.",
					"readOnly": true
				},
				"size": {
					"summary": "The current application's size (installed space).",
					"readOnly": true
				}
			},
			"methods": {
				"exit": {
					"summary": "Exits the current application."
				},
				"getCategories": {
					"summary": "Gets the value of the categories property."
				},
				"getIconPath": {
					"summary": "Gets the value of the iconPath property."
				},
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getInstallDate": {
					"summary": "Gets the value of the installDate property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getShow": {
					"summary": "Gets the value of the show property."
				},
				"getSize": {
					"summary": "Gets the value of the size property."
				},
				"hide": {
					"summary": "Hides the current application."
				}
			}
		}
	},
	"UI": {
		"Ti.UI.TextArea": {
			"parent": "Ti.UI.View",
			"summary": "A multiline text field that supports editing and scrolling.",
			"properties": {
				"appearance": {
					"summary": "Determines the appearance of the keyboard displayed when this text area is focused."
				},
				"attributedString": {
					"summary": "TextArea attributed string."
				},
				"autoLink": {
					"summary": "Automatically convert text to clickable links."
				},
				"autocapitalization": {
					"summary": "Determines how text is capitalized during typing."
				},
				"autocorrect": {
					"summary": "Determines whether to automatically correct text entered into this text area."
				},
				"clearOnEdit": {
					"summary": "Determines whether the value of this text area should be cleared when it is focused."
				},
				"color": {
					"summary": "Color of the text in this text area, as a color name or hex triplet."
				},
				"editable": {
					"summary": "Determines whether this field can be edited."
				},
				"ellipsize": {
					"summary": "Determines whether an ellipsis (...) should be used to indicate truncated text."
				},
				"enableReturnKey": {
					"summary": "Determines whether the return key is enabled automatically when there is text in this text \narea."
				},
				"enabled": {
					"summary": "Determines whether this field is enabled."
				},
				"font": {
					"summary": "Font to use for text."
				},
				"handleLinks": {
					"summary": "Specifies if the text area should allow user interaction with the given URL in the given range of text."
				},
				"hintText": {
					"summary": "Hint text to display when the field is empty."
				},
				"keyboardToolbar": {
					"summary": "Array of toolbar button objects or a toolbar to be used when the \nkeyboard is displayed."
				},
				"keyboardToolbarColor": {
					"summary": "Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet."
				},
				"keyboardToolbarHeight": {
					"summary": "Height of the keyboard toolbar if keyboardToolbar is an array."
				},
				"keyboardType": {
					"summary": "Keyboard type to display when this text area is focused."
				},
				"maxLength": {
					"summary": "Maximum length of text field input."
				},
				"returnKeyType": {
					"summary": "Specifies the text to display on the keyboard Return key when this text area is focused."
				},
				"scrollable": {
					"summary": "Determines whether this text area can be scrolled."
				},
				"scrollsToTop": {
					"summary": "Controls whether the scroll-to-top gesture is effective."
				},
				"selection": {
					"summary": "Returns the currently selected text of the text area.",
					"readOnly": true
				},
				"suppressReturn": {
					"summary": "Determines if the return key should be suppressed during text entry."
				},
				"textAlign": {
					"summary": "Text alignment within this text area."
				},
				"value": {
					"summary": "Value of this text area, which may be set programmatically and modified by the user."
				},
				"verticalAlign": {
					"summary": "Vertical alignment within this text area."
				}
			},
			"methods": {
				"blur": {
					"summary": "Forces this text area to lose focus."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"focus": {
					"summary": "Forces this text area to gain focus."
				},
				"getAppearance": {
					"summary": "Gets the value of the appearance property."
				},
				"getAttributedString": {
					"summary": "Gets the value of the attributedString property."
				},
				"getAutoLink": {
					"summary": "Gets the value of the autoLink property."
				},
				"getAutocapitalization": {
					"summary": "Gets the value of the autocapitalization property."
				},
				"getAutocorrect": {
					"summary": "Gets the value of the autocorrect property."
				},
				"getClearOnEdit": {
					"summary": "Gets the value of the clearOnEdit property."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getEditable": {
					"summary": "Gets the value of the editable property."
				},
				"getEllipsize": {
					"summary": "Gets the value of the ellipsize property."
				},
				"getEnableReturnKey": {
					"summary": "Gets the value of the enableReturnKey property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getHandleLinks": {
					"summary": "Gets the value of the handleLinks property."
				},
				"getHintText": {
					"summary": "Gets the value of the hintText property."
				},
				"getKeyboardToolbar": {
					"summary": "Gets the value of the keyboardToolbar property."
				},
				"getKeyboardToolbarColor": {
					"summary": "Gets the value of the keyboardToolbarColor property."
				},
				"getKeyboardToolbarHeight": {
					"summary": "Gets the value of the keyboardToolbarHeight property."
				},
				"getKeyboardType": {
					"summary": "Gets the value of the keyboardType property."
				},
				"getMaxLength": {
					"summary": "Gets the value of the maxLength property."
				},
				"getReturnKeyType": {
					"summary": "Gets the value of the returnKeyType property."
				},
				"getScrollable": {
					"summary": "Gets the value of the scrollable property."
				},
				"getScrollsToTop": {
					"summary": "Gets the value of the scrollsToTop property."
				},
				"getSelection": {
					"summary": "Gets the value of the selection property."
				},
				"getSuppressReturn": {
					"summary": "Gets the value of the suppressReturn property."
				},
				"getTextAlign": {
					"summary": "Gets the value of the textAlign property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"getVerticalAlign": {
					"summary": "Gets the value of the verticalAlign property."
				},
				"hasText": {
					"summary": "Returns true if this text area contains text."
				},
				"setAppearance": {
					"summary": "Sets the value of the appearance property."
				},
				"setAttributedString": {
					"summary": "Sets the value of the attributedString property."
				},
				"setAutoLink": {
					"summary": "Sets the value of the autoLink property."
				},
				"setAutocapitalization": {
					"summary": "Sets the value of the autocapitalization property."
				},
				"setAutocorrect": {
					"summary": "Sets the value of the autocorrect property."
				},
				"setClearOnEdit": {
					"summary": "Sets the value of the clearOnEdit property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setEditable": {
					"summary": "Sets the value of the editable property."
				},
				"setEllipsize": {
					"summary": "Sets the value of the ellipsize property."
				},
				"setEnableReturnKey": {
					"summary": "Sets the value of the enableReturnKey property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setHandleLinks": {
					"summary": "Sets the value of the handleLinks property."
				},
				"setHintText": {
					"summary": "Sets the value of the hintText property."
				},
				"setKeyboardToolbar": {
					"summary": "Sets the value of the keyboardToolbar property."
				},
				"setKeyboardToolbarColor": {
					"summary": "Sets the value of the keyboardToolbarColor property."
				},
				"setKeyboardToolbarHeight": {
					"summary": "Sets the value of the keyboardToolbarHeight property."
				},
				"setKeyboardType": {
					"summary": "Sets the value of the keyboardType property."
				},
				"setMaxLength": {
					"summary": "Sets the value of the maxLength property."
				},
				"setReturnKeyType": {
					"summary": "Sets the value of the returnKeyType property."
				},
				"setScrollable": {
					"summary": "Sets the value of the scrollable property."
				},
				"setScrollsToTop": {
					"summary": "Sets the value of the scrollsToTop property."
				},
				"setSelection": {
					"summary": "Selects the text in range (start, end)."
				},
				"setSuppressReturn": {
					"summary": "Sets the value of the suppressReturn property."
				},
				"setTextAlign": {
					"summary": "Sets the value of the textAlign property."
				},
				"setValue": {
					"summary": "Sets the value of the value property."
				},
				"setVerticalAlign": {
					"summary": "Sets the value of the verticalAlign property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.ActivityIndicatorStyle": {
			"parent": "Ti.Module",
			"summary": "A set of constants for the styles available for Ti.UI.ActivityIndicator objects.",
			"properties": {
				"BIG": {
					"summary": "Large white spinning indicator.",
					"readOnly": true
				},
				"BIG_DARK": {
					"summary": "Large gray spinning indicator.",
					"readOnly": true
				},
				"DARK": {
					"summary": "Small gray spinning indicator.",
					"readOnly": true
				},
				"PLAIN": {
					"summary": "Small white spinning indicator (default).",
					"readOnly": true
				}
			},
			"methods": {}
		},
		"Ti.UI.Switch": {
			"parent": "Ti.UI.View",
			"summary": "An on/off switch control.",
			"properties": {
				"color": {
					"summary": "Color to use for switch text, as a color name or hex triplet."
				},
				"enabled": {
					"summary": "Determines whether the switch is enabled."
				},
				"font": {
					"summary": "Font to use for the switch text."
				},
				"onTintColor": {
					"summary": "The color used to tint the appearance of the switch when it is turned on."
				},
				"style": {
					"summary": "Style of the switch. Enables either the toggle button (default) or checkbox."
				},
				"textAlign": {
					"summary": "Horizontal text alignment of the switch title."
				},
				"thumbTintColor": {
					"summary": "The color used to tint the appearance of the thumb."
				},
				"title": {
					"summary": "Text to display next to the switch, when the checkbox style is in use."
				},
				"titleOff": {
					"summary": "Text to display on the switch in its \"off\" state, when the toggle button style is in use."
				},
				"titleOn": {
					"summary": "Text to display on the switch in its \"on\" state, when the toggle button style is in use."
				},
				"value": {
					"summary": "Indicates whether the switch has been turned on or off by the user. May also be set \nprogrammatically."
				},
				"verticalAlign": {
					"summary": "Vertical alignment for the text field."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getOnTintColor": {
					"summary": "Gets the value of the onTintColor property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"getTextAlign": {
					"summary": "Gets the value of the textAlign property."
				},
				"getThumbTintColor": {
					"summary": "Gets the value of the thumbTintColor property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"getTitleOff": {
					"summary": "Gets the value of the titleOff property."
				},
				"getTitleOn": {
					"summary": "Gets the value of the titleOn property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"getVerticalAlign": {
					"summary": "Gets the value of the verticalAlign property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setOnTintColor": {
					"summary": "Sets the value of the onTintColor property."
				},
				"setStyle": {
					"summary": "Sets the value of the style property."
				},
				"setTextAlign": {
					"summary": "Sets the value of the textAlign property."
				},
				"setThumbTintColor": {
					"summary": "Sets the value of the thumbTintColor property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"setTitleOff": {
					"summary": "Sets the value of the titleOff property."
				},
				"setTitleOn": {
					"summary": "Sets the value of the titleOn property."
				},
				"setValue": {
					"summary": "Sets the value of the value property."
				},
				"setVerticalAlign": {
					"summary": "Sets the value of the verticalAlign property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.DashboardItem": {
			"parent": "Ti.Proxy",
			"summary": "A dashboard item is a view that is displayed as an icon in a Ti.UI.DashboardView.",
			"properties": {
				"badge": {
					"summary": "Integer value displayed in a badge."
				},
				"canDelete": {
					"summary": "Determines whether this item can be deleted when it edit mode."
				},
				"image": {
					"summary": "Image or path to image to display in the item by default."
				},
				"selectedImage": {
					"summary": "Image or path to image to display in the item as it is selected."
				}
			},
			"methods": {
				"getBadge": {
					"summary": "Gets the value of the badge property."
				},
				"getCanDelete": {
					"summary": "Gets the value of the canDelete property."
				},
				"getImage": {
					"summary": "Gets the value of the image property."
				},
				"getSelectedImage": {
					"summary": "Gets the value of the selectedImage property."
				},
				"setBadge": {
					"summary": "Sets the value of the badge property."
				},
				"setCanDelete": {
					"summary": "Sets the value of the canDelete property."
				},
				"setImage": {
					"summary": "Sets the value of the image property."
				},
				"setSelectedImage": {
					"summary": "Sets the value of the selectedImage property."
				}
			}
		},
		"Ti.UI.Tab": {
			"parent": "Ti.UI.View",
			"summary": "A tab instance for a TabGroup.",
			"properties": {
				"active": {
					"summary": "true if this tab is active, false if it is not. "
				},
				"activeIcon": {
					"summary": "Icon URL for this tab when active."
				},
				"activeIconIsMask": {
					"summary": "Defines if the active icon property of the tab must be used as a mask. This property is applicable on iOS 7 and greater."
				},
				"badge": {
					"summary": "Badge value for this tab. null indicates no badge."
				},
				"icon": {
					"summary": "Icon URL for this tab."
				},
				"iconIsmask": {
					"summary": "Defines if the icon property of the tab must be used as a mask. This property is applicable on iOS 7 and greater."
				},
				"title": {
					"summary": "Title for this tab."
				},
				"titleid": {
					"summary": "Key identifying a string from the locale file to use for the tab title. Only one of title or titleid should be specified."
				},
				"window": {
					"summary": "Root-level tab window.  All tabs must have at least one root-level tab window."
				}
			},
			"methods": {
				"close": {
					"summary": "Closes the top-level window for this tab."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getActive": {
					"summary": "Gets the value of the active property."
				},
				"getActiveIcon": {
					"summary": "Gets the value of the activeIcon property."
				},
				"getActiveIconIsMask": {
					"summary": "Gets the value of the activeIconIsMask property."
				},
				"getBadge": {
					"summary": "Gets the value of the badge property."
				},
				"getIcon": {
					"summary": "Gets the value of the icon property."
				},
				"getIconIsmask": {
					"summary": "Gets the value of the iconIsmask property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"getTitleid": {
					"summary": "Gets the value of the titleid property."
				},
				"getWindow": {
					"summary": "Gets the value of the window property."
				},
				"open": {
					"summary": "Opens a new window."
				},
				"setActive": {
					"summary": "Sets the value of the active property."
				},
				"setActiveIcon": {
					"summary": "Sets the value of the activeIcon property."
				},
				"setActiveIconIsMask": {
					"summary": "Sets the value of the activeIconIsMask property."
				},
				"setBadge": {
					"summary": "Sets the value of the badge property."
				},
				"setIcon": {
					"summary": "Sets the value of the icon property."
				},
				"setIconIsmask": {
					"summary": "Sets the value of the iconIsmask property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"setTitleid": {
					"summary": "Sets the value of the titleid property."
				},
				"setWindow": {
					"summary": "Sets the root window that appears in the tab."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.TableViewRow": {
			"parent": "Ti.UI.View",
			"summary": "A table view row is an individual item in a table, organized into table view sections.",
			"properties": {
				"className": {
					"summary": "Class name for the row."
				},
				"color": {
					"summary": "Default text color of the row when not selected, as a color name or hex triplet."
				},
				"editable": {
					"summary": "Determines the rows' editable behavior, which allows them to be deleted by the user when the \ntable is in editing or moving mode."
				},
				"font": {
					"summary": "Font to use for the row title."
				},
				"hasCheck": {
					"summary": "Determines whether a system-provided checkmark is displayed on the right-hand side of \nthe row."
				},
				"hasChild": {
					"summary": "Determines whether a system-provided arrow is displayed on the right-hand side of the row."
				},
				"hasDetail": {
					"summary": "Determines whether a system-provided detail disclosure button is displayed on the right-hand \nside of the row."
				},
				"indentionLevel": {
					"summary": "Indention level for the row."
				},
				"leftImage": {
					"summary": "Image to render in the left image area of the row, specified as a local path or URL."
				},
				"moveable": {
					"summary": "Determines the rows' moveable behavior, which allows them to be re-ordered by the user when \nthe table is in editing or moving mode."
				},
				"rightImage": {
					"summary": "Image to render in the right image area of the row, specified as a local path or URL."
				},
				"selectedBackgroundColor": {
					"summary": "Background color to render when the row is selected, as a color name or hex triplet."
				},
				"selectedBackgroundImage": {
					"summary": "Background image to render when the row is selected."
				},
				"selectedColor": {
					"summary": "Color of the row text when the row is selected, as a color name or hex triplet."
				},
				"selectionStyle": {
					"summary": "Selection style constant to control the selection color."
				},
				"title": {
					"summary": "Text to display on the row."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getClassName": {
					"summary": "Gets the value of the className property."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getEditable": {
					"summary": "Gets the value of the editable property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getHasCheck": {
					"summary": "Gets the value of the hasCheck property."
				},
				"getHasChild": {
					"summary": "Gets the value of the hasChild property."
				},
				"getHasDetail": {
					"summary": "Gets the value of the hasDetail property."
				},
				"getIndentionLevel": {
					"summary": "Gets the value of the indentionLevel property."
				},
				"getLeftImage": {
					"summary": "Gets the value of the leftImage property."
				},
				"getMoveable": {
					"summary": "Gets the value of the moveable property."
				},
				"getRightImage": {
					"summary": "Gets the value of the rightImage property."
				},
				"getSelectedBackgroundColor": {
					"summary": "Gets the value of the selectedBackgroundColor property."
				},
				"getSelectedBackgroundImage": {
					"summary": "Gets the value of the selectedBackgroundImage property."
				},
				"getSelectedColor": {
					"summary": "Gets the value of the selectedColor property."
				},
				"getSelectionStyle": {
					"summary": "Gets the value of the selectionStyle property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"setClassName": {
					"summary": "Sets the value of the className property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setEditable": {
					"summary": "Sets the value of the editable property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setHasCheck": {
					"summary": "Sets the value of the hasCheck property."
				},
				"setHasChild": {
					"summary": "Sets the value of the hasChild property."
				},
				"setHasDetail": {
					"summary": "Sets the value of the hasDetail property."
				},
				"setIndentionLevel": {
					"summary": "Sets the value of the indentionLevel property."
				},
				"setLeftImage": {
					"summary": "Sets the value of the leftImage property."
				},
				"setMoveable": {
					"summary": "Sets the value of the moveable property."
				},
				"setRightImage": {
					"summary": "Sets the value of the rightImage property."
				},
				"setSelectedBackgroundColor": {
					"summary": "Sets the value of the selectedBackgroundColor property."
				},
				"setSelectedBackgroundImage": {
					"summary": "Sets the value of the selectedBackgroundImage property."
				},
				"setSelectedColor": {
					"summary": "Sets the value of the selectedColor property."
				},
				"setSelectionStyle": {
					"summary": "Sets the value of the selectionStyle property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.PickerRow": {
			"parent": "Ti.UI.View",
			"summary": "A picker row, representing a selectable item in a Ti.UI.Picker. ",
			"properties": {
				"color": {
					"summary": "Color of the item text, as a color name or hex triplet."
				},
				"font": {
					"summary": "Font to use for the item text."
				},
				"fontSize": {
					"summary": "Font size for displaying item text. Ignored when using a custom view."
				},
				"title": {
					"summary": "Item text."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getFontSize": {
					"summary": "Gets the value of the fontSize property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setFontSize": {
					"summary": "Sets the value of the fontSize property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.ButtonBar": {
			"parent": "Ti.UI.View",
			"summary": "An iOS button bar component.",
			"properties": {
				"index": {
					"summary": "Index of the currently selected button."
				},
				"labels": {
					"summary": "Array of labels for the button bar."
				},
				"style": {
					"summary": "Style of the button bar."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getIndex": {
					"summary": "Gets the value of the index property."
				},
				"getLabels": {
					"summary": "Gets the value of the labels property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"setIndex": {
					"summary": "Sets the value of the index property."
				},
				"setLabels": {
					"summary": "Sets the value of the labels property."
				},
				"setStyle": {
					"summary": "Sets the value of the style property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.Slider": {
			"parent": "Ti.UI.View",
			"summary": "A slider component with a draggable thumb.",
			"properties": {
				"disabledLeftTrackImage": {
					"summary": "Image URL of the slider left track when in the disabled state."
				},
				"disabledRightTrackImage": {
					"summary": "Image URL of the slider right track when in the disabled state."
				},
				"disabledThumbImage": {
					"summary": "Image URL of the slider thumb when in the disabled state."
				},
				"enabled": {
					"summary": "Boolean to indicate the enabled state of the slider."
				},
				"highlightedLeftTrackImage": {
					"summary": "Image URL of the slider left track when in the highlighted state."
				},
				"highlightedRightTrackImage": {
					"summary": "Image URL of the slider right track when in the highlighted state."
				},
				"highlightedThumbImage": {
					"summary": "Image URL of the slider thumb when in the highlighted state."
				},
				"leftTrackImage": {
					"summary": "Image URL of the slider left track."
				},
				"leftTrackLeftCap": {
					"summary": "Size of the left end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties."
				},
				"leftTrackTopCap": {
					"summary": "Size of the top end cap for the leftTrackImage, disabledLeftTrackImage, highlightedLeftTrackImage and selectedLeftTrackImage properties."
				},
				"max": {
					"summary": "Maximum value of the slider."
				},
				"maxRange": {
					"summary": "Upper limit on the slider value that can be selected."
				},
				"min": {
					"summary": "Minimum value of the slider."
				},
				"minRange": {
					"summary": "Lower limit on the slider value that can be selected."
				},
				"rightTrackImage": {
					"summary": "Image URL of the slider right track."
				},
				"rightTrackLeftCap": {
					"summary": "Size of the left end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties."
				},
				"rightTrackTopCap": {
					"summary": "Size of the top end cap for the rightTrackImage, disabledRightTrackImage, highlightedRightTrackImage and selectedRightTrackImage properties."
				},
				"selectedLeftTrackImage": {
					"summary": "Image URL of the slider left track when in the selected state."
				},
				"selectedRightTrackImage": {
					"summary": "Image URL of the slider right track when in the selected state."
				},
				"selectedThumbImage": {
					"summary": "Image URL of the slider thumb when in the selected state."
				},
				"thumbImage": {
					"summary": "Image for the slider thumb."
				},
				"value": {
					"summary": "Current value of the slider."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getDisabledLeftTrackImage": {
					"summary": "Gets the value of the disabledLeftTrackImage property."
				},
				"getDisabledRightTrackImage": {
					"summary": "Gets the value of the disabledRightTrackImage property."
				},
				"getDisabledThumbImage": {
					"summary": "Gets the value of the disabledThumbImage property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getHighlightedLeftTrackImage": {
					"summary": "Gets the value of the highlightedLeftTrackImage property."
				},
				"getHighlightedRightTrackImage": {
					"summary": "Gets the value of the highlightedRightTrackImage property."
				},
				"getHighlightedThumbImage": {
					"summary": "Gets the value of the highlightedThumbImage property."
				},
				"getLeftTrackImage": {
					"summary": "Gets the value of the leftTrackImage property."
				},
				"getLeftTrackLeftCap": {
					"summary": "Gets the value of the leftTrackLeftCap property."
				},
				"getLeftTrackTopCap": {
					"summary": "Gets the value of the leftTrackTopCap property."
				},
				"getMax": {
					"summary": "Gets the value of the max property."
				},
				"getMaxRange": {
					"summary": "Gets the value of the maxRange property."
				},
				"getMin": {
					"summary": "Gets the value of the min property."
				},
				"getMinRange": {
					"summary": "Gets the value of the minRange property."
				},
				"getRightTrackImage": {
					"summary": "Gets the value of the rightTrackImage property."
				},
				"getRightTrackLeftCap": {
					"summary": "Gets the value of the rightTrackLeftCap property."
				},
				"getRightTrackTopCap": {
					"summary": "Gets the value of the rightTrackTopCap property."
				},
				"getSelectedLeftTrackImage": {
					"summary": "Gets the value of the selectedLeftTrackImage property."
				},
				"getSelectedRightTrackImage": {
					"summary": "Gets the value of the selectedRightTrackImage property."
				},
				"getSelectedThumbImage": {
					"summary": "Gets the value of the selectedThumbImage property."
				},
				"getThumbImage": {
					"summary": "Gets the value of the thumbImage property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"setDisabledLeftTrackImage": {
					"summary": "Sets the value of the disabledLeftTrackImage property."
				},
				"setDisabledRightTrackImage": {
					"summary": "Sets the value of the disabledRightTrackImage property."
				},
				"setDisabledThumbImage": {
					"summary": "Sets the value of the disabledThumbImage property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setHighlightedLeftTrackImage": {
					"summary": "Sets the value of the highlightedLeftTrackImage property."
				},
				"setHighlightedRightTrackImage": {
					"summary": "Sets the value of the highlightedRightTrackImage property."
				},
				"setHighlightedThumbImage": {
					"summary": "Sets the value of the highlightedThumbImage property."
				},
				"setLeftTrackImage": {
					"summary": "Sets the value of the leftTrackImage property."
				},
				"setLeftTrackLeftCap": {
					"summary": "Sets the value of the leftTrackLeftCap property."
				},
				"setLeftTrackTopCap": {
					"summary": "Sets the value of the leftTrackTopCap property."
				},
				"setMax": {
					"summary": "Sets the value of the max property."
				},
				"setMaxRange": {
					"summary": "Sets the value of the maxRange property."
				},
				"setMin": {
					"summary": "Sets the value of the min property."
				},
				"setMinRange": {
					"summary": "Sets the value of the minRange property."
				},
				"setRightTrackImage": {
					"summary": "Sets the value of the rightTrackImage property."
				},
				"setRightTrackLeftCap": {
					"summary": "Sets the value of the rightTrackLeftCap property."
				},
				"setRightTrackTopCap": {
					"summary": "Sets the value of the rightTrackTopCap property."
				},
				"setSelectedLeftTrackImage": {
					"summary": "Sets the value of the selectedLeftTrackImage property."
				},
				"setSelectedRightTrackImage": {
					"summary": "Sets the value of the selectedRightTrackImage property."
				},
				"setSelectedThumbImage": {
					"summary": "Sets the value of the selectedThumbImage property."
				},
				"setThumbImage": {
					"summary": "Sets the value of the thumbImage property."
				},
				"setValue": {
					"summary": "Sets the value property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.DashboardView": {
			"parent": "Ti.UI.View",
			"summary": "A dashboard view is an iOS Springboard-like view of Ti.UI.DashboardItem items that may \nbe deleted and reordered by the user using its built-in edit mode.",
			"properties": {
				"columnCount": {
					"summary": "The number of columns of items in the view."
				},
				"data": {
					"summary": "Items to display in this view."
				},
				"editable": {
					"summary": "Determines whether edit mode is activated by a longpress of an item."
				},
				"rowCount": {
					"summary": "The number of rows of items in the view."
				},
				"wobble": {
					"summary": "Determines whether the wobble visual editing cue is enabled in edit mode."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getColumnCount": {
					"summary": "Gets the value of the columnCount property."
				},
				"getData": {
					"summary": "Gets the value of the data property."
				},
				"getEditable": {
					"summary": "Gets the value of the editable property."
				},
				"getRowCount": {
					"summary": "Gets the value of the rowCount property."
				},
				"getWobble": {
					"summary": "Gets the value of the wobble property."
				},
				"setData": {
					"summary": "Sets the value of the data property."
				},
				"setEditable": {
					"summary": "Sets the value of the editable property."
				},
				"setWobble": {
					"summary": "Sets the value of the wobble property."
				},
				"startEditing": {
					"summary": "Enable edit mode."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"stopEditing": {
					"summary": "Disable edit mode."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.ListItem": {
			"parent": "Ti.Proxy",
			"summary": "A list item is an individual item in a list section.",
			"properties": {
				"accessoryType": {
					"summary": "Sets an accessory on the right side of an item."
				},
				"backgroundColor": {
					"summary": "Background color of the view, as a color name or hex triplet."
				},
				"backgroundGradient": {
					"summary": "Background gradient to render when the item is not selected."
				},
				"backgroundImage": {
					"summary": "Background image to render when the item is not selected."
				},
				"canEdit": {
					"summary": "Specifies if the item can be deleted by a user initiated action."
				},
				"canMove": {
					"summary": "Specifies if the item can be reordered within the list view by a user initiated action."
				},
				"color": {
					"summary": "Default text color of the item when not selected, as a color name or hex triplet."
				},
				"font": {
					"summary": "Font to use for the item title."
				},
				"height": {
					"summary": "Row height in platform-specific units."
				},
				"image": {
					"summary": "Image to render in the image area of the item, specified as a local path or URL."
				},
				"itemId": {
					"summary": "A user defined string that gets passed to events."
				},
				"searchableText": {
					"summary": "The text to match against when the ListView is performing a search."
				},
				"selectedBackgroundColor": {
					"summary": "Background color of the view, as a color name or hex triplet when item is selected."
				},
				"selectedBackgroundGradient": {
					"summary": "Background gradient to render when the item is selected."
				},
				"selectedBackgroundImage": {
					"summary": "Background image to render when the item is selected."
				},
				"selectionStyle": {
					"summary": "Selection style constant to control the selection color."
				},
				"subtitle": {
					"summary": "Subtitle to set in the text area of the item."
				},
				"title": {
					"summary": "Title to set in the text area of the item."
				}
			},
			"methods": {}
		},
		"Ti.UI.AlertDialog": {
			"parent": "Ti.Proxy",
			"summary": "An alert dialog is a modal view that includes an optional title, a message and buttons, \npositioned in the middle of the display.",
			"properties": {
				"androidView": {
					"summary": "View to load inside the message area, to create a custom layout."
				},
				"buttonNames": {
					"summary": "Name of each button to create."
				},
				"cancel": {
					"summary": "Index to define the cancel button."
				},
				"message": {
					"summary": "Dialog message."
				},
				"messageid": {
					"summary": "Key identifying a string in the locale file to use for the message text."
				},
				"ok": {
					"summary": "Text for the OK button."
				},
				"okid": {
					"summary": "Key identifying a string in the locale file to use for the ok text."
				},
				"persistent": {
					"summary": "Boolean value indicating if the alert dialog should only be cancelled by user gesture or by hide method."
				},
				"style": {
					"summary": "The style for the alert dialog."
				},
				"title": {
					"summary": "Title of the dialog."
				},
				"titleid": {
					"summary": "Key identifying a string in the locale file to use for the title text."
				}
			},
			"methods": {
				"getAndroidView": {
					"summary": "Gets the value of the androidView property."
				},
				"getButtonNames": {
					"summary": "Gets the value of the buttonNames property."
				},
				"getCancel": {
					"summary": "Gets the value of the cancel property."
				},
				"getMessage": {
					"summary": "Gets the value of the message property."
				},
				"getOk": {
					"summary": "Gets the value of the ok property."
				},
				"getPersistent": {
					"summary": "Gets the value of the persistent property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"hide": {
					"summary": "Hides this dialog."
				},
				"setAndroidView": {
					"summary": "Sets the value of the androidView property."
				},
				"setCancel": {
					"summary": "Sets the value of the cancel property."
				},
				"setMessage": {
					"summary": "Sets the value of the message property."
				},
				"setOk": {
					"summary": "Sets the value of the ok property."
				},
				"setPersistent": {
					"summary": "Sets the value of the persistent property."
				},
				"setStyle": {
					"summary": "Sets the value of the style property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"show": {
					"summary": "Shows this dialog."
				}
			}
		},
		"Ti.UI.2DMatrix": {
			"parent": "Ti.Proxy",
			"summary": "The 2D Matrix is an object for holding values for an affine transformation matrix.",
			"properties": {
				"a": {
					"summary": "The entry at position [1,1] in the matrix."
				},
				"b": {
					"summary": "The entry at position [1,2] in the matrix."
				},
				"c": {
					"summary": "The entry at position [2,1] in the matrix."
				},
				"d": {
					"summary": "The entry at position [2,2] in the matrix."
				},
				"tx": {
					"summary": "The entry at position [3,1] in the matrix."
				},
				"ty": {
					"summary": "The entry at position [3,2] in the matrix."
				}
			},
			"methods": {
				"getA": {
					"summary": "Gets the value of the a property."
				},
				"getB": {
					"summary": "Gets the value of the b property."
				},
				"getC": {
					"summary": "Gets the value of the c property."
				},
				"getD": {
					"summary": "Gets the value of the d property."
				},
				"getTx": {
					"summary": "Gets the value of the tx property."
				},
				"getTy": {
					"summary": "Gets the value of the ty property."
				},
				"invert": {
					"summary": "Returns a matrix constructed by inverting this matrix."
				},
				"multiply": {
					"summary": "Returns a matrix constructed by combining two existing matrices."
				},
				"rotate": {
					"summary": "Returns a matrix constructed by rotating this matrix."
				},
				"scale": {
					"summary": "Returns a 2DMatrix object that specifies a scaling animation from one scale to another."
				},
				"setA": {
					"summary": "Sets the value of the a property."
				},
				"setB": {
					"summary": "Sets the value of the b property."
				},
				"setC": {
					"summary": "Sets the value of the c property."
				},
				"setD": {
					"summary": "Sets the value of the d property."
				},
				"setTx": {
					"summary": "Sets the value of the tx property."
				},
				"setTy": {
					"summary": "Sets the value of the ty property."
				},
				"translate": {
					"summary": "Returns a matrix constructed by applying a translation transform to this matrix."
				}
			}
		},
		"Ti.UI.Window": {
			"parent": "Ti.UI.View",
			"summary": "The Window is an empty drawing surface or container.",
			"properties": {
				"activity": {
					"summary": "For lightweight windows, this property returns undefined.\nFor heavyweight windows, this property contains a reference to the\nAndroid Activity object associated with this window.",
					"readOnly": true
				},
				"autoAdjustScrollViewInsets": {
					"summary": "Specifies whether or not the view controller should automatically adjust its scroll view insets. Valid on iOS 7 and greater."
				},
				"backButtonTitle": {
					"summary": "Title for the back button. This is only valid when the window is a child of a tab."
				},
				"backButtonTitleImage": {
					"summary": "The image to show as the back button. This is only valid when the window is a child of a tab."
				},
				"barColor": {
					"summary": "Background color for the nav bar, as a color name or hex triplet."
				},
				"barImage": {
					"summary": "Background image for the nav bar, specified as a URL to a local image."
				},
				"enabled": {
					"summary": "Determines if the view is enabled or disabled."
				},
				"exitOnClose": {
					"summary": "Boolean value indicating if the application should exit when the Android\nBack button is pressed while the window is being shown."
				},
				"extendEdges": {
					"summary": "An array of supported values specified using the EXTEND_EDGE constants in Ti.UI. Valid on iOS 7 and greater."
				},
				"flagSecure": {
					"summary": "Treat the content of the window as secure, preventing it from appearing in screenshots or from being viewed on non-secure displays."
				},
				"fullscreen": {
					"summary": "Boolean value indicating if the window is fullscreen."
				},
				"hideShadow": {
					"summary": "Set this to true to hide the shadow image of the navigation bar."
				},
				"includeOpaqueBars": {
					"summary": "Specifies if the edges should extend beyond opaque bars (navigation bar, tab bar, toolbar). Valid on iOS 7 and greater."
				},
				"leftNavButton": {
					"summary": "View to show in the left nav bar area."
				},
				"leftNavButtons": {
					"summary": "An Array of views to show in the left nav bar area."
				},
				"modal": {
					"summary": "Boolean to indicate if the window should be opened modal in front of other windows."
				},
				"navBarHidden": {
					"summary": "Hides the nav bar (true) or shows the nav bar (false)."
				},
				"navTintColor": {
					"summary": "The tintColor to apply to the navigation bar. This property is applicable on iOS 7 and greater."
				},
				"orientation": {
					"summary": "Current orientation of the window.",
					"readOnly": true
				},
				"orientationModes": {
					"summary": "Array of supported orientation modes, specified using the orientation\nconstants defined in Ti.UI."
				},
				"rightNavButton": {
					"summary": "View to show in the right nav bar area."
				},
				"rightNavButtons": {
					"summary": "An Array of views to show in the right nav bar area."
				},
				"shadowImage": {
					"summary": "Shadow image for the navigation bar, specified as a URL to a local image.."
				},
				"statusBarStyle": {
					"summary": "The status bar style associated with this window."
				},
				"tabBarHidden": {
					"summary": "Boolean value indicating if the tab bar should be hidden. "
				},
				"theme": {
					"summary": "Name of the theme to apply to the window."
				},
				"title": {
					"summary": "Title of the window."
				},
				"titleAttributes": {
					"summary": "Title text attributes of the window."
				},
				"titleControl": {
					"summary": "View to show in the title area of the nav bar."
				},
				"titleImage": {
					"summary": "Image to show in the title area of the nav bar, specified as a local file path or URL."
				},
				"titlePrompt": {
					"summary": "Title prompt for the window."
				},
				"titleid": {
					"summary": "Key identifying a string from the locale file to use for the window title."
				},
				"titlepromptid": {
					"summary": "Key identifying a string from the locale file to use for the window title prompt."
				},
				"toolbar": {
					"summary": "Array of button objects to show in the window's toolbar. This is only valid when\nthe window has a navigation controller.",
					"readOnly": true
				},
				"transitionAnimation": {
					"summary": "Use a transition animation when opening or closing windows in a\nTi.UI.iOS.NavigationWindow or Ti.UI.Tab."
				},
				"translucent": {
					"summary": "Boolean value indicating if the nav bar is translucent."
				},
				"url": {
					"summary": "Loads a JavaScript file from a local URL."
				},
				"windowFlags": {
					"summary": "Additional flags to set on the Activity Window."
				},
				"windowPixelFormat": {
					"summary": "Set the pixel format for the Activity's Window."
				},
				"windowSoftInputMode": {
					"summary": "Determines whether a heavyweight window's soft input area (ie software keyboard) is visible\nas it receives focus and how the window behaves in order to accomodate it while keeping its\ncontents in view."
				}
			},
			"methods": {
				"close": {
					"summary": "Closes the window."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getActivity": {
					"summary": "Gets the value of the activity property."
				},
				"getAutoAdjustScrollViewInsets": {
					"summary": "Gets the value of the autoAdjustScrollViewInsets property."
				},
				"getBackButtonTitle": {
					"summary": "Gets the value of the backButtonTitle property."
				},
				"getBackButtonTitleImage": {
					"summary": "Gets the value of the backButtonTitleImage property."
				},
				"getBarColor": {
					"summary": "Gets the value of the barColor property."
				},
				"getBarImage": {
					"summary": "Gets the value of the barImage property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getExitOnClose": {
					"summary": "Gets the value of the exitOnClose property."
				},
				"getExtendEdges": {
					"summary": "Gets the value of the extendEdges property."
				},
				"getFlagSecure": {
					"summary": "Gets the value of the flagSecure property."
				},
				"getFullscreen": {
					"summary": "Gets the value of the fullscreen property."
				},
				"getHideShadow": {
					"summary": "Gets the value of the hideShadow property."
				},
				"getIncludeOpaqueBars": {
					"summary": "Gets the value of the includeOpaqueBars property."
				},
				"getLeftNavButton": {
					"summary": "Gets the value of the leftNavButton property."
				},
				"getLeftNavButtons": {
					"summary": "Gets the value of the leftNavButtons property."
				},
				"getModal": {
					"summary": "Gets the value of the modal property."
				},
				"getNavBarHidden": {
					"summary": "Gets the value of the navBarHidden property."
				},
				"getNavTintColor": {
					"summary": "Gets the value of the navTintColor property."
				},
				"getOrientation": {
					"summary": "Gets the value of the orientation property."
				},
				"getOrientationModes": {
					"summary": "Gets the value of the orientationModes property."
				},
				"getRightNavButton": {
					"summary": "Gets the value of the rightNavButton property."
				},
				"getRightNavButtons": {
					"summary": "Gets the value of the rightNavButtons property."
				},
				"getShadowImage": {
					"summary": "Gets the value of the shadowImage property."
				},
				"getStatusBarStyle": {
					"summary": "Gets the value of the statusBarStyle property."
				},
				"getTabBarHidden": {
					"summary": "Gets the value of the tabBarHidden property."
				},
				"getTheme": {
					"summary": "Gets the value of the theme property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"getTitleAttributes": {
					"summary": "Gets the value of the titleAttributes property."
				},
				"getTitleControl": {
					"summary": "Gets the value of the titleControl property."
				},
				"getTitleImage": {
					"summary": "Gets the value of the titleImage property."
				},
				"getTitlePrompt": {
					"summary": "Gets the value of the titlePrompt property."
				},
				"getTitleid": {
					"summary": "Gets the value of the titleid property."
				},
				"getTitlepromptid": {
					"summary": "Gets the value of the titlepromptid property."
				},
				"getToolbar": {
					"summary": "Gets the value of the toolbar property."
				},
				"getTransitionAnimation": {
					"summary": "Gets the value of the transitionAnimation property."
				},
				"getTranslucent": {
					"summary": "Gets the value of the translucent property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"getWindowFlags": {
					"summary": "Gets the value of the windowFlags property."
				},
				"getWindowPixelFormat": {
					"summary": "Gets the value of the windowPixelFormat property."
				},
				"getWindowSoftInputMode": {
					"summary": "Gets the value of the windowSoftInputMode property."
				},
				"hideNavBar": {
					"summary": "Hides the navigation bar."
				},
				"hideTabBar": {
					"summary": "Hides the tab bar. Must be called before opening the window."
				},
				"open": {
					"summary": "Opens the window."
				},
				"setAutoAdjustScrollViewInsets": {
					"summary": "Sets the value of the autoAdjustScrollViewInsets property."
				},
				"setBackButtonTitle": {
					"summary": "Sets the value of the backButtonTitle property."
				},
				"setBackButtonTitleImage": {
					"summary": "Sets the value of the backButtonTitleImage property."
				},
				"setBarColor": {
					"summary": "Sets the value of the barColor property."
				},
				"setBarImage": {
					"summary": "Sets the value of the barImage property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setExtendEdges": {
					"summary": "Sets the value of the extendEdges property."
				},
				"setFullscreen": {
					"summary": "Sets the value of the fullscreen property."
				},
				"setHideShadow": {
					"summary": "Sets the value of the hideShadow property."
				},
				"setIncludeOpaqueBars": {
					"summary": "Sets the value of the includeOpaqueBars property."
				},
				"setLeftNavButton": {
					"summary": "Sets the value of the leftNavButton property."
				},
				"setLeftNavButtons": {
					"summary": "Sets the value of the leftNavButtons property."
				},
				"setModal": {
					"summary": "Sets the value of the modal property."
				},
				"setNavBarHidden": {
					"summary": "Sets the value of the navBarHidden property."
				},
				"setNavTintColor": {
					"summary": "Sets the value of the navTintColor property."
				},
				"setOrientationModes": {
					"summary": "Sets the value of the orientationModes property."
				},
				"setRightNavButton": {
					"summary": "Sets the value of the rightNavButton property."
				},
				"setRightNavButtons": {
					"summary": "Sets the value of the rightNavButtons property."
				},
				"setShadowImage": {
					"summary": "Sets the value of the shadowImage property."
				},
				"setStatusBarStyle": {
					"summary": "Sets the value of the statusBarStyle property."
				},
				"setTabBarHidden": {
					"summary": "Sets the value of the tabBarHidden property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"setTitleAttributes": {
					"summary": "Sets the value of the titleAttributes property."
				},
				"setTitleControl": {
					"summary": "Sets the value of the titleControl property."
				},
				"setTitleImage": {
					"summary": "Sets the value of the titleImage property."
				},
				"setTitlePrompt": {
					"summary": "Sets the value of the titlePrompt property."
				},
				"setTitleid": {
					"summary": "Sets the value of the titleid property."
				},
				"setTitlepromptid": {
					"summary": "Sets the value of the titlepromptid property."
				},
				"setToolbar": {
					"summary": "Sets the array of items to show in the window's toolbar."
				},
				"setTransitionAnimation": {
					"summary": "Sets the value of the transitionAnimation property."
				},
				"setTranslucent": {
					"summary": "Sets the value of the translucent property."
				},
				"setWindowPixelFormat": {
					"summary": "Sets the value of the windowPixelFormat property."
				},
				"showNavBar": {
					"summary": "Makes the navigation bar visible."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.TextField": {
			"parent": "Ti.UI.View",
			"summary": "A single line text field.",
			"properties": {
				"appearance": {
					"summary": "Determines the appearance of the keyboard displayed when this field is focused."
				},
				"attributedHintText": {
					"summary": "Hint text attributed string."
				},
				"attributedString": {
					"summary": "TextField attributed string."
				},
				"autoLink": {
					"summary": "Automatically convert text to clickable links."
				},
				"autocapitalization": {
					"summary": "Determines how text is capitalized during typing."
				},
				"autocorrect": {
					"summary": "Determines whether to automatically correct text entered into this text field."
				},
				"borderStyle": {
					"summary": "Border style for the field."
				},
				"clearButtonMode": {
					"summary": "Determines when the clear button is displayed."
				},
				"clearOnEdit": {
					"summary": "Determines whether the value of this text field should be cleared when it is focused."
				},
				"color": {
					"summary": "Color of the text in this text field, as a color name or hex triplet."
				},
				"editable": {
					"summary": "Determines whether this field can be edited."
				},
				"ellipsize": {
					"summary": "Determines whether an ellipsis (...) should be used to indicate truncated text."
				},
				"enableReturnKey": {
					"summary": "Determines whether the return key is enabled automatically when there is text in this text \nfield."
				},
				"enabled": {
					"summary": "Determines whether the field is enabled."
				},
				"font": {
					"summary": "Font to use for text."
				},
				"hintText": {
					"summary": "Hint text to display when the field is empty."
				},
				"keyboardToolbar": {
					"summary": "Array of toolbar button objects or a toolbar to be used when the \nkeyboard is displayed."
				},
				"keyboardToolbarColor": {
					"summary": "Color of the keyboard toolbar if keyboardToolbar is an array, as a color name or hex triplet."
				},
				"keyboardToolbarHeight": {
					"summary": "Height of the keyboard toolbar if keyboardToolbar is an array."
				},
				"keyboardType": {
					"summary": "Keyboard type to display when this text field is focused."
				},
				"leftButton": {
					"summary": "Left button view to display in the TextField."
				},
				"leftButtonMode": {
					"summary": "Determines when to display the left button view."
				},
				"leftButtonPadding": {
					"summary": "Padding between the left button and the edge of the field."
				},
				"maxLength": {
					"summary": "Maximum length of text field input."
				},
				"minimumFontSize": {
					"summary": "Minimum size of the font when the font is sized based on the contents.  Enables font \nscaling to fit."
				},
				"paddingLeft": {
					"summary": "Left padding of this text field."
				},
				"paddingRight": {
					"summary": "Right padding of this text field."
				},
				"passwordMask": {
					"summary": "Obscure the input text from the user."
				},
				"returnKeyType": {
					"summary": "Specifies the text to display on the keyboard Return key when this field is focused."
				},
				"rightButton": {
					"summary": "Right button view."
				},
				"rightButtonMode": {
					"summary": "Determines when to display the right button view."
				},
				"rightButtonPadding": {
					"summary": "Padding between the right button and the edge of the field."
				},
				"selection": {
					"summary": "Returns the currently selected text of the text field.",
					"readOnly": true
				},
				"suppressReturn": {
					"summary": "Determines whether the return key should be suppressed during entry."
				},
				"textAlign": {
					"summary": "Text alignment within this text field."
				},
				"value": {
					"summary": "Value of this text field, which may be set programmatically and modified by the user."
				},
				"verticalAlign": {
					"summary": "Vertical alignment within this text field."
				}
			},
			"methods": {
				"blur": {
					"summary": "Forces the field to lose focus."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"focus": {
					"summary": "Forces the field to gain focus."
				},
				"getAppearance": {
					"summary": "Gets the value of the appearance property."
				},
				"getAttributedHintText": {
					"summary": "Gets the value of the attributedHintText property."
				},
				"getAttributedString": {
					"summary": "Gets the value of the attributedString property."
				},
				"getAutoLink": {
					"summary": "Gets the value of the autoLink property."
				},
				"getAutocapitalization": {
					"summary": "Gets the value of the autocapitalization property."
				},
				"getAutocorrect": {
					"summary": "Gets the value of the autocorrect property."
				},
				"getBorderStyle": {
					"summary": "Gets the value of the borderStyle property."
				},
				"getClearButtonMode": {
					"summary": "Gets the value of the clearButtonMode property."
				},
				"getClearOnEdit": {
					"summary": "Gets the value of the clearOnEdit property."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getEditable": {
					"summary": "Gets the value of the editable property."
				},
				"getEllipsize": {
					"summary": "Gets the value of the ellipsize property."
				},
				"getEnableReturnKey": {
					"summary": "Gets the value of the enableReturnKey property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getHintText": {
					"summary": "Gets the value of the hintText property."
				},
				"getKeyboardToolbar": {
					"summary": "Gets the value of the keyboardToolbar property."
				},
				"getKeyboardToolbarColor": {
					"summary": "Gets the value of the keyboardToolbarColor property."
				},
				"getKeyboardToolbarHeight": {
					"summary": "Gets the value of the keyboardToolbarHeight property."
				},
				"getKeyboardType": {
					"summary": "Gets the value of the keyboardType property."
				},
				"getLeftButton": {
					"summary": "Gets the value of the leftButton property."
				},
				"getLeftButtonMode": {
					"summary": "Gets the value of the leftButtonMode property."
				},
				"getLeftButtonPadding": {
					"summary": "Gets the value of the leftButtonPadding property."
				},
				"getMaxLength": {
					"summary": "Gets the value of the maxLength property."
				},
				"getMinimumFontSize": {
					"summary": "Gets the value of the minimumFontSize property."
				},
				"getPaddingLeft": {
					"summary": "Gets the value of the paddingLeft property."
				},
				"getPaddingRight": {
					"summary": "Gets the value of the paddingRight property."
				},
				"getPasswordMask": {
					"summary": "Gets the value of the passwordMask property."
				},
				"getReturnKeyType": {
					"summary": "Gets the value of the returnKeyType property."
				},
				"getRightButton": {
					"summary": "Gets the value of the rightButton property."
				},
				"getRightButtonMode": {
					"summary": "Gets the value of the rightButtonMode property."
				},
				"getRightButtonPadding": {
					"summary": "Gets the value of the rightButtonPadding property."
				},
				"getSelection": {
					"summary": "Gets the value of the selection property."
				},
				"getSuppressReturn": {
					"summary": "Gets the value of the suppressReturn property."
				},
				"getTextAlign": {
					"summary": "Gets the value of the textAlign property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"getVerticalAlign": {
					"summary": "Gets the value of the verticalAlign property."
				},
				"hasText": {
					"summary": "Returns true if this text field contains text."
				},
				"setAppearance": {
					"summary": "Sets the value of the appearance property."
				},
				"setAttributedHintText": {
					"summary": "Sets the value of the attributedHintText property."
				},
				"setAttributedString": {
					"summary": "Sets the value of the attributedString property."
				},
				"setAutoLink": {
					"summary": "Sets the value of the autoLink property."
				},
				"setAutocapitalization": {
					"summary": "Sets the value of the autocapitalization property."
				},
				"setAutocorrect": {
					"summary": "Sets the value of the autocorrect property."
				},
				"setBorderStyle": {
					"summary": "Sets the value of the borderStyle property."
				},
				"setClearButtonMode": {
					"summary": "Sets the value of the clearButtonMode property."
				},
				"setClearOnEdit": {
					"summary": "Sets the value of the clearOnEdit property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setEditable": {
					"summary": "Sets the value of the editable property."
				},
				"setEllipsize": {
					"summary": "Sets the value of the ellipsize property."
				},
				"setEnableReturnKey": {
					"summary": "Sets the value of the enableReturnKey property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setHintText": {
					"summary": "Sets the value of the hintText property."
				},
				"setKeyboardToolbar": {
					"summary": "Sets the value of the keyboardToolbar property."
				},
				"setKeyboardToolbarColor": {
					"summary": "Sets the value of the keyboardToolbarColor property."
				},
				"setKeyboardToolbarHeight": {
					"summary": "Sets the value of the keyboardToolbarHeight property."
				},
				"setKeyboardType": {
					"summary": "Sets the value of the keyboardType property."
				},
				"setLeftButton": {
					"summary": "Sets the value of the leftButton property."
				},
				"setLeftButtonMode": {
					"summary": "Sets the value of the leftButtonMode property."
				},
				"setLeftButtonPadding": {
					"summary": "Sets the value of the leftButtonPadding property."
				},
				"setMaxLength": {
					"summary": "Sets the value of the maxLength property."
				},
				"setMinimumFontSize": {
					"summary": "Sets the value of the minimumFontSize property."
				},
				"setPaddingLeft": {
					"summary": "Sets the value of the paddingLeft property."
				},
				"setPaddingRight": {
					"summary": "Sets the value of the paddingRight property."
				},
				"setPasswordMask": {
					"summary": "Sets the value of the passwordMask property."
				},
				"setReturnKeyType": {
					"summary": "Sets the value of the returnKeyType property."
				},
				"setRightButton": {
					"summary": "Sets the value of the rightButton property."
				},
				"setRightButtonMode": {
					"summary": "Sets the value of the rightButtonMode property."
				},
				"setRightButtonPadding": {
					"summary": "Sets the value of the rightButtonPadding property."
				},
				"setSelection": {
					"summary": "Selects the text in range (start, end)."
				},
				"setSuppressReturn": {
					"summary": "Sets the value of the suppressReturn property."
				},
				"setTextAlign": {
					"summary": "Sets the value of the textAlign property."
				},
				"setValue": {
					"summary": "Sets the value of the value property."
				},
				"setVerticalAlign": {
					"summary": "Sets the value of the verticalAlign property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.3DMatrix": {
			"parent": "Ti.Proxy",
			"summary": "The 3D Matrix is an object for holding values for a 3D affine transform.",
			"properties": {
				"m11": {
					"summary": "The entry at position [1,1] in the matrix."
				},
				"m12": {
					"summary": "The entry at position [1,2] in the matrix."
				},
				"m13": {
					"summary": "The entry at position [1,3] in the matrix."
				},
				"m14": {
					"summary": "The entry at position [1,4] in the matrix."
				},
				"m21": {
					"summary": "The entry at position [2,1] in the matrix."
				},
				"m22": {
					"summary": "The entry at position [2,2] in the matrix."
				},
				"m23": {
					"summary": "The entry at position [2,3] in the matrix."
				},
				"m24": {
					"summary": "The entry at position [2,4] in the matrix."
				},
				"m31": {
					"summary": "The entry at position [3,1] in the matrix."
				},
				"m32": {
					"summary": "The entry at position [3,2] in the matrix."
				},
				"m33": {
					"summary": "The entry at position [3,3] in the matrix."
				},
				"m34": {
					"summary": "The entry at position [3,4] in the matrix."
				},
				"m41": {
					"summary": "The entry at position [4,1] in the matrix."
				},
				"m42": {
					"summary": "The entry at position [4,2] in the matrix."
				},
				"m43": {
					"summary": "The entry at position [4,3] in the matrix."
				},
				"m44": {
					"summary": "The entry at position [4,4] in the matrix."
				}
			},
			"methods": {
				"getM11": {
					"summary": "Gets the value of the m11 property."
				},
				"getM12": {
					"summary": "Gets the value of the m12 property."
				},
				"getM13": {
					"summary": "Gets the value of the m13 property."
				},
				"getM14": {
					"summary": "Gets the value of the m14 property."
				},
				"getM21": {
					"summary": "Gets the value of the m21 property."
				},
				"getM22": {
					"summary": "Gets the value of the m22 property."
				},
				"getM23": {
					"summary": "Gets the value of the m23 property."
				},
				"getM24": {
					"summary": "Gets the value of the m24 property."
				},
				"getM31": {
					"summary": "Gets the value of the m31 property."
				},
				"getM32": {
					"summary": "Gets the value of the m32 property."
				},
				"getM33": {
					"summary": "Gets the value of the m33 property."
				},
				"getM34": {
					"summary": "Gets the value of the m34 property."
				},
				"getM41": {
					"summary": "Gets the value of the m41 property."
				},
				"getM42": {
					"summary": "Gets the value of the m42 property."
				},
				"getM43": {
					"summary": "Gets the value of the m43 property."
				},
				"getM44": {
					"summary": "Gets the value of the m44 property."
				},
				"invert": {
					"summary": "Returns a matrix constructed by inverting this matrix."
				},
				"multiply": {
					"summary": "Returns a matrix constructed by combining two existing matrix."
				},
				"rotate": {
					"summary": "Returns a matrix constructed by rotating this matrix."
				},
				"scale": {
					"summary": "Returns a matrix constructed by scaling this matrix."
				},
				"setM11": {
					"summary": "Sets the value of the m11 property."
				},
				"setM12": {
					"summary": "Sets the value of the m12 property."
				},
				"setM13": {
					"summary": "Sets the value of the m13 property."
				},
				"setM14": {
					"summary": "Sets the value of the m14 property."
				},
				"setM21": {
					"summary": "Sets the value of the m21 property."
				},
				"setM22": {
					"summary": "Sets the value of the m22 property."
				},
				"setM23": {
					"summary": "Sets the value of the m23 property."
				},
				"setM24": {
					"summary": "Sets the value of the m24 property."
				},
				"setM31": {
					"summary": "Sets the value of the m31 property."
				},
				"setM32": {
					"summary": "Sets the value of the m32 property."
				},
				"setM33": {
					"summary": "Sets the value of the m33 property."
				},
				"setM34": {
					"summary": "Sets the value of the m34 property."
				},
				"setM41": {
					"summary": "Sets the value of the m41 property."
				},
				"setM42": {
					"summary": "Sets the value of the m42 property."
				},
				"setM43": {
					"summary": "Sets the value of the m43 property."
				},
				"setM44": {
					"summary": "Sets the value of the m44 property."
				},
				"translate": {
					"summary": "Returns a matrix constructed by translating an existing matrix."
				}
			}
		},
		"Ti.UI.WebView": {
			"parent": "Ti.UI.View",
			"summary": "The web view allows you to open an HTML5 based view which can load either local or remote content. ",
			"properties": {
				"cacheMode": {
					"summary": "Determines how a cache is used in this web view."
				},
				"data": {
					"summary": "Web content to load."
				},
				"disableBounce": {
					"summary": "Determines whether the view will bounce when scrolling to the edge of the scrollable region."
				},
				"enableZoomControls": {
					"summary": "If true, zoom controls are enabled."
				},
				"handlePlatformUrl": {
					"summary": "Lets the webview handle platform supported urls"
				},
				"hideLoadIndicator": {
					"summary": "Hides activity indicator when loading remote URL."
				},
				"html": {
					"summary": "HTML content of this web view."
				},
				"ignoreSslError": {
					"summary": "Controls whether to ignore invalid SSL certificates or not."
				},
				"lightTouchEnabled": {
					"summary": "Enables using light touches to make a selection and activate mouseovers."
				},
				"loading": {
					"summary": "Indicates if the webview is loading content."
				},
				"onCreateWindow": {
					"summary": "Callback function called when there is a request for the application to create a new window\nto host new content."
				},
				"overScrollMode": {
					"summary": "Determines the behavior when the user overscrolls the view."
				},
				"pluginState": {
					"summary": "Determines how to treat content that requires plugins in this web view."
				},
				"scalesPageToFit": {
					"summary": "If true, scale contents to fit the web view."
				},
				"scrollsToTop": {
					"summary": "Controls whether the scroll-to-top gesture is effective."
				},
				"showScrollbars": {
					"summary": "If true, scrollbars are displayed if content is larger than the web view."
				},
				"url": {
					"summary": "URL to the web document."
				},
				"userAgent": {
					"summary": "The User-Agent header used by the web view when requesting content."
				},
				"willHandleTouches": {
					"summary": "Explicitly specifies if this web view handles touches."
				}
			},
			"methods": {
				"canGoBack": {
					"summary": "Returns true if the web view can go back in its history list."
				},
				"canGoForward": {
					"summary": "Returns true if the web view can go forward in its history list."
				},
				"evalJS": {
					"summary": "Evaluates a JavaScript expression inside the context of the web view and\noptionally, returns a result."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getCacheMode": {
					"summary": "Gets the value of the cacheMode property."
				},
				"getData": {
					"summary": "Gets the value of the data property."
				},
				"getDisableBounce": {
					"summary": "Gets the value of the disableBounce property."
				},
				"getEnableZoomControls": {
					"summary": "Gets the value of the enableZoomControls property."
				},
				"getHandlePlatformUrl": {
					"summary": "Gets the value of the handlePlatformUrl property."
				},
				"getHideLoadIndicator": {
					"summary": "Gets the value of the hideLoadIndicator property."
				},
				"getHtml": {
					"summary": "Gets the value of the html property."
				},
				"getIgnoreSslError": {
					"summary": "Gets the value of the ignoreSslError property."
				},
				"getLightTouchEnabled": {
					"summary": "Gets the value of the lightTouchEnabled property."
				},
				"getLoading": {
					"summary": "Gets the value of the loading property."
				},
				"getOnCreateWindow": {
					"summary": "Gets the value of the onCreateWindow property."
				},
				"getOverScrollMode": {
					"summary": "Gets the value of the overScrollMode property."
				},
				"getPluginState": {
					"summary": "Gets the value of the pluginState property."
				},
				"getScalesPageToFit": {
					"summary": "Gets the value of the scalesPageToFit property."
				},
				"getScrollsToTop": {
					"summary": "Gets the value of the scrollsToTop property."
				},
				"getShowScrollbars": {
					"summary": "Gets the value of the showScrollbars property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"getUserAgent": {
					"summary": "Gets the value of the userAgent property."
				},
				"getWillHandleTouches": {
					"summary": "Gets the value of the willHandleTouches property."
				},
				"goBack": {
					"summary": "Goes back one entry in the web view's history list, to the previous page."
				},
				"goForward": {
					"summary": "Goes forward one entry in this web view's history list, if possible."
				},
				"pause": {
					"summary": "Pauses native webview plugins."
				},
				"release": {
					"summary": "Releases memory when the web view is no longer needed."
				},
				"reload": {
					"summary": "Reloads the current webpage."
				},
				"repaint": {
					"summary": "Forces the web view to repaint its contents."
				},
				"resume": {
					"summary": "Resume native webview plugins."
				},
				"setBasicAuthentication": {
					"summary": "Sets the basic authentication for this web view to use on subsequent URl requests."
				},
				"setCacheMode": {
					"summary": "Sets the value of the cacheMode property."
				},
				"setData": {
					"summary": "Sets the value of the data property."
				},
				"setDisableBounce": {
					"summary": "Sets the value of the disableBounce property."
				},
				"setEnableZoomControls": {
					"summary": "Sets the value of the enableZoomControls property."
				},
				"setHandlePlatformUrl": {
					"summary": "Sets the value of the handlePlatformUrl property."
				},
				"setHideLoadIndicator": {
					"summary": "Sets the value of the hideLoadIndicator property."
				},
				"setHtml": {
					"summary": "Sets the value of html property."
				},
				"setIgnoreSslError": {
					"summary": "Sets the value of the ignoreSslError property."
				},
				"setLightTouchEnabled": {
					"summary": "Sets the value of the lightTouchEnabled property."
				},
				"setLoading": {
					"summary": "Sets the value of the loading property."
				},
				"setOnCreateWindow": {
					"summary": "Sets the value of the onCreateWindow property."
				},
				"setOverScrollMode": {
					"summary": "Sets the value of the overScrollMode property."
				},
				"setPluginState": {
					"summary": "Sets the value of the pluginState property."
				},
				"setScalesPageToFit": {
					"summary": "Sets the value of the scalesPageToFit property."
				},
				"setScrollsToTop": {
					"summary": "Sets the value of the scrollsToTop property."
				},
				"setShowScrollbars": {
					"summary": "Sets the value of the showScrollbars property."
				},
				"setUrl": {
					"summary": "Sets the value of the url property."
				},
				"setUserAgent": {
					"summary": "Sets the value of the userAgent property."
				},
				"setWillHandleTouches": {
					"summary": "Sets the value of the willHandleTouches property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"stopLoading": {
					"summary": "Stops loading a currently loading page."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI": {
			"parent": "Ti.Module",
			"summary": "The main Ti.UI module.",
			"properties": {
				"ANIMATION_CURVE_EASE_IN": {
					"summary": "Use with Animation.curve to specify an animation that starts\nslowly and speeds up.",
					"readOnly": true
				},
				"ANIMATION_CURVE_EASE_IN_OUT": {
					"summary": "Use with Animation.curve to specify an animation that starts\nslowly, and speeds up, then slows down at the end of the animation.",
					"readOnly": true
				},
				"ANIMATION_CURVE_EASE_OUT": {
					"summary": "Use with Animation.curve to specify an animation that starts\nquickly, then slows down at the end of the animation.",
					"readOnly": true
				},
				"ANIMATION_CURVE_LINEAR": {
					"summary": "Use with Animation.curve to specify an animation that proceeds\nat a constant rate.",
					"readOnly": true
				},
				"AUTODETECT_ADDRESS": {
					"summary": "Converts strings formatted as addresses into clickable links.",
					"readOnly": true
				},
				"AUTODETECT_ALL": {
					"summary": "Converts all detectable types of data into clickable links.",
					"readOnly": true
				},
				"AUTODETECT_CALENDAR": {
					"summary": "Converts strings formatted as calendar events into clickable links.",
					"readOnly": true
				},
				"AUTODETECT_LINK": {
					"summary": "Converts strings formatted as URLs into clickable links.",
					"readOnly": true
				},
				"AUTODETECT_NONE": {
					"summary": "Disables converting strings into clickable links.",
					"readOnly": true
				},
				"AUTODETECT_PHONE": {
					"summary": "Converts strings formatted as phone numbers into clickable links.",
					"readOnly": true
				},
				"AUTOLINK_ALL": {
					"summary": "Converts all detectable types of data into clickable links.",
					"readOnly": true
				},
				"AUTOLINK_CALENDAR": {
					"summary": "Converts strings formatted as calendar events into clickable links.",
					"readOnly": true
				},
				"AUTOLINK_EMAIL_ADDRESSES": {
					"summary": "Converts strings formatted as email addresses into clickable links.",
					"readOnly": true
				},
				"AUTOLINK_MAP_ADDRESSES": {
					"summary": "Converts strings formatted as addresses into clickable links.",
					"readOnly": true
				},
				"AUTOLINK_NONE": {
					"summary": "Disables converting strings into clickable links.",
					"readOnly": true
				},
				"AUTOLINK_PHONE_NUMBERS": {
					"summary": "Converts strings formatted as phone numbers into clickable links.",
					"readOnly": true
				},
				"AUTOLINK_URLS": {
					"summary": "Converts strings formatted as URLs into clickable links.",
					"readOnly": true
				},
				"BLEND_MODE_CLEAR": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_COLOR": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_COLOR_BURN": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_COLOR_DODGE": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_COPY": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_DARKEN": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_DESTINATION_ATOP": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_DESTINATION_IN": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_DESTINATION_OUT": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_DESTINATION_OVER": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_DIFFERENCE": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_EXCLUSION": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_HARD_LIGHT": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_HUE": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_LIGHTEN": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_LUMINOSITY": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_MULTIPLY": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_NORMAL": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_OVERLAY": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_PLUS_DARKER": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_PLUS_LIGHTER": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_SATURATION": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_SCREEN": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_SOFT_LIGHT": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_SOURCE_ATOP": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_SOURCE_IN": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_SOURCE_OUT": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"BLEND_MODE_XOR": {
					"summary": "Use with MaskedImage.mode to specify a blend mode.",
					"readOnly": true
				},
				"EXTEND_EDGE_ALL": {
					"summary": "Specifies that all the edges of the window can extend.",
					"readOnly": true
				},
				"EXTEND_EDGE_BOTTOM": {
					"summary": "Specifies that the bottom edge of the window can extend.",
					"readOnly": true
				},
				"EXTEND_EDGE_LEFT": {
					"summary": "Specifies that the left edge of the window can extend.",
					"readOnly": true
				},
				"EXTEND_EDGE_NONE": {
					"summary": "Specifies that none of the edges of the window can extend.",
					"readOnly": true
				},
				"EXTEND_EDGE_RIGHT": {
					"summary": "Specifies that the right edge of the window can extend.",
					"readOnly": true
				},
				"EXTEND_EDGE_TOP": {
					"summary": "Specifies that the top edge of the window can extend.",
					"readOnly": true
				},
				"FACE_DOWN": {
					"summary": "Constant value for face-down orientation.",
					"readOnly": true
				},
				"FACE_UP": {
					"summary": "Constant value for face-up orientation.",
					"readOnly": true
				},
				"FILL": {
					"summary": "FILL behavior for UI layout.",
					"readOnly": true
				},
				"INHERIT": {
					"summary": "INHERIT behavior for UI layout.",
					"readOnly": true
				},
				"INPUT_BORDERSTYLE_BEZEL": {
					"summary": "Use a bezel-style border on the input field.",
					"readOnly": true
				},
				"INPUT_BORDERSTYLE_LINE": {
					"summary": "Use a simple line border on the input field.",
					"readOnly": true
				},
				"INPUT_BORDERSTYLE_NONE": {
					"summary": "Use no border on the input field.",
					"readOnly": true
				},
				"INPUT_BORDERSTYLE_ROUNDED": {
					"summary": "Use a rounded-rectangle border on the input field.",
					"readOnly": true
				},
				"INPUT_BUTTONMODE_ALWAYS": {
					"summary": "Always show buttons on the input field.",
					"readOnly": true
				},
				"INPUT_BUTTONMODE_NEVER": {
					"summary": "Never show buttons on the input field.",
					"readOnly": true
				},
				"INPUT_BUTTONMODE_ONBLUR": {
					"summary": "Show buttons on the input field when it loses focus.",
					"readOnly": true
				},
				"INPUT_BUTTONMODE_ONFOCUS": {
					"summary": "Show buttons on the input field when it gains focus.",
					"readOnly": true
				},
				"KEYBOARD_APPEARANCE_ALERT": {
					"summary": "Use a keyboard appearance suitable for entering text on an alert.",
					"readOnly": true
				},
				"KEYBOARD_APPEARANCE_DEFAULT": {
					"summary": "Use the platform-specific default keyboard appearance.",
					"readOnly": true
				},
				"KEYBOARD_ASCII": {
					"summary": "Use an ASCII keyboard, with the standard keyboard layout.",
					"readOnly": true
				},
				"KEYBOARD_DECIMAL_PAD": {
					"summary": "Use a keyboard with decimal numbers only, with the pad keyboard layout.",
					"readOnly": true
				},
				"KEYBOARD_DEFAULT": {
					"summary": "Use the default keyboard, depending on the platform.",
					"readOnly": true
				},
				"KEYBOARD_EMAIL": {
					"summary": "Use a keyboard suitable for composing email, with the standard keyboard layout.",
					"readOnly": true
				},
				"KEYBOARD_NAMEPHONE_PAD": {
					"summary": "Use a keyboard suitable for entering names and phone numbers, with the pad keyboard layout.",
					"readOnly": true
				},
				"KEYBOARD_NUMBERS_PUNCTUATION": {
					"summary": "Use a keyboard with numbers and punctuation only, with the standard keyboard layout.",
					"readOnly": true
				},
				"KEYBOARD_NUMBER_PAD": {
					"summary": "Use a keyboard with a number pad only, with the pad keyboard layout.",
					"readOnly": true
				},
				"KEYBOARD_PHONE_PAD": {
					"summary": "Use a keyboard with a phone-style number pad, with the pad keyboard layout.",
					"readOnly": true
				},
				"KEYBOARD_URL": {
					"summary": "Use an keyboard optimized for entering URLs, with the standard keyboard layout.",
					"readOnly": true
				},
				"LANDSCAPE_LEFT": {
					"summary": "Standard landscape orientation (home button on left).",
					"readOnly": true
				},
				"LANDSCAPE_RIGHT": {
					"summary": "Reverse landscape orientation (home button on right).",
					"readOnly": true
				},
				"LIST_ACCESSORY_TYPE_CHECKMARK": {
					"summary": "Displays a checkmark on the right side of an item in a list view.",
					"readOnly": true
				},
				"LIST_ACCESSORY_TYPE_DETAIL": {
					"summary": "Displays a detail disclosure button on the right side of an item in a list view.",
					"readOnly": true
				},
				"LIST_ACCESSORY_TYPE_DISCLOSURE": {
					"summary": "Displays a disclosure indicator on the right side of an item in a list view.",
					"readOnly": true
				},
				"LIST_ACCESSORY_TYPE_NONE": {
					"summary": "Do not display anything on the right side of an item in a list view.",
					"readOnly": true
				},
				"LIST_ITEM_TEMPLATE_CONTACTS": {
					"summary": "A built-in style for an item with a title label on the left side of the cell with\nright-aligned, blue text, which is next to a subtitle label with left-aligned, black text.",
					"readOnly": true
				},
				"LIST_ITEM_TEMPLATE_DEFAULT": {
					"summary": "A built-in style for an item with an image view and black, left-aligned title label.",
					"readOnly": true
				},
				"LIST_ITEM_TEMPLATE_SETTINGS": {
					"summary": "A built-in style for a item with an image view; a black, left-aligned title label; and a\nsmaller blue, right-aligned subtitle label.",
					"readOnly": true
				},
				"LIST_ITEM_TEMPLATE_SUBTITLE": {
					"summary": "A built-in style for an item with an image view; a black, left-aligned title label across the\ntop of the cell and a subtitle label below it in smaller gray text.",
					"readOnly": true
				},
				"NOTIFICATION_DURATION_LONG": {
					"summary": "Specifies a long duration for an Android Toast notification (Ti.UI.Notification).",
					"readOnly": true
				},
				"NOTIFICATION_DURATION_SHORT": {
					"summary": "Specifies a short duration for an Android Toast notification (Ti.UI.Notification).",
					"readOnly": true
				},
				"PICKER_TYPE_COUNT_DOWN_TIMER": {
					"summary": "Use a picker with a countdown timer appearance, showing hours and minutes.",
					"readOnly": true
				},
				"PICKER_TYPE_DATE": {
					"summary": "Use a date picker.",
					"readOnly": true
				},
				"PICKER_TYPE_DATE_AND_TIME": {
					"summary": "Use a date and time picker.",
					"readOnly": true
				},
				"PICKER_TYPE_PLAIN": {
					"summary": "Use a plain picker (for values other than date or time).",
					"readOnly": true
				},
				"PICKER_TYPE_TIME": {
					"summary": "Use a time picker.",
					"readOnly": true
				},
				"PORTRAIT": {
					"summary": "Orientation constant for portrait mode orientation.",
					"readOnly": true
				},
				"RETURNKEY_DEFAULT": {
					"summary": "Use the default return key on the virtual keyboard.",
					"readOnly": true
				},
				"RETURNKEY_DONE": {
					"summary": "Set the return key text to \"Done\".",
					"readOnly": true
				},
				"RETURNKEY_EMERGENCY_CALL": {
					"summary": "Set the return key text to \"Emergency Call\".",
					"readOnly": true
				},
				"RETURNKEY_GO": {
					"summary": "Set the return key text to \"Go\".",
					"readOnly": true
				},
				"RETURNKEY_GOOGLE": {
					"summary": "Set the return key text to \"Google\".",
					"readOnly": true
				},
				"RETURNKEY_JOIN": {
					"summary": "Set the return key text to \"Join\".",
					"readOnly": true
				},
				"RETURNKEY_NEXT": {
					"summary": "Set the return key text to \"Next\".",
					"readOnly": true
				},
				"RETURNKEY_ROUTE": {
					"summary": "Set the return key text to \"Route\".",
					"readOnly": true
				},
				"RETURNKEY_SEARCH": {
					"summary": "Set the return key text to \"Search\".",
					"readOnly": true
				},
				"RETURNKEY_SEND": {
					"summary": "Set the return key text to \"Send\".",
					"readOnly": true
				},
				"RETURNKEY_YAHOO": {
					"summary": "Set the return key text to \"Yahoo\".",
					"readOnly": true
				},
				"SIZE": {
					"summary": "SIZE behavior for UI layout.",
					"readOnly": true
				},
				"TEXT_ALIGNMENT_CENTER": {
					"summary": "Center align text.",
					"readOnly": true
				},
				"TEXT_ALIGNMENT_LEFT": {
					"summary": "Left align text.",
					"readOnly": true
				},
				"TEXT_ALIGNMENT_RIGHT": {
					"summary": "Right align text.",
					"readOnly": true
				},
				"TEXT_AUTOCAPITALIZATION_ALL": {
					"summary": "Auto-capitalize all text in the input field.",
					"readOnly": true
				},
				"TEXT_AUTOCAPITALIZATION_NONE": {
					"summary": "Do not auto-capitalize.",
					"readOnly": true
				},
				"TEXT_AUTOCAPITALIZATION_SENTENCES": {
					"summary": "Use sentence-style auto-capitalization in the input field.",
					"readOnly": true
				},
				"TEXT_AUTOCAPITALIZATION_WORDS": {
					"summary": "Auto-capitalize the first letter of each word in the input field.",
					"readOnly": true
				},
				"TEXT_STYLE_BODY": {
					"summary": "Specifies the text style for the Font Object.",
					"readOnly": true
				},
				"TEXT_STYLE_CAPTION1": {
					"summary": "Specifies the text style for the Font Object.",
					"readOnly": true
				},
				"TEXT_STYLE_CAPTION2": {
					"summary": "Specifies the text style for the Font Object.",
					"readOnly": true
				},
				"TEXT_STYLE_FOOTNOTE": {
					"summary": "Specifies the text style for the Font Object.",
					"readOnly": true
				},
				"TEXT_STYLE_HEADLINE": {
					"summary": "Specifies the text style for the Font Object.",
					"readOnly": true
				},
				"TEXT_STYLE_SUBHEADLINE": {
					"summary": "Specifies the text style for the Font Object.",
					"readOnly": true
				},
				"TEXT_VERTICAL_ALIGNMENT_BOTTOM": {
					"summary": "Align text to the bottom of the view.",
					"readOnly": true
				},
				"TEXT_VERTICAL_ALIGNMENT_CENTER": {
					"summary": "Vertically align text to the center of the view.",
					"readOnly": true
				},
				"TEXT_VERTICAL_ALIGNMENT_TOP": {
					"summary": "Align text to the top of the view.",
					"readOnly": true
				},
				"UNIT_CM": {
					"summary": "Unit constant representing units in centimeters.",
					"readOnly": true
				},
				"UNIT_DIP": {
					"summary": "Unit constant representing units in density-independent pixels.",
					"readOnly": true
				},
				"UNIT_IN": {
					"summary": "Unit constant representing units in inches.",
					"readOnly": true
				},
				"UNIT_MM": {
					"summary": "Unit constant representing units in millimeters.",
					"readOnly": true
				},
				"UNIT_PX": {
					"summary": "Unit constant representing units in pixels.",
					"readOnly": true
				},
				"UNKNOWN": {
					"summary": "Orientation constant representing an unknown orientation.",
					"readOnly": true
				},
				"UPSIDE_PORTRAIT": {
					"summary": "Orientation constant for inverted portait orientation.",
					"readOnly": true
				},
				"URL_ERROR_AUTHENTICATION": {
					"summary": "Authentication error code reported via Ti.UI.WebView.error.",
					"readOnly": true
				},
				"URL_ERROR_BAD_URL": {
					"summary": "Bad url error code reported via Ti.UI.WebView.error.",
					"readOnly": true
				},
				"URL_ERROR_CONNECT": {
					"summary": "Error code reported via Ti.UI.WebView.error for a failure to connect to host.",
					"readOnly": true
				},
				"URL_ERROR_FILE": {
					"summary": "Error code reported via Ti.UI.WebView.error for a failure to access a file resource on a host, except \"file not found\", which has its own constant.",
					"readOnly": true
				},
				"URL_ERROR_FILE_NOT_FOUND": {
					"summary": "Error code reported via Ti.UI.WebView.error when a requested file does not exist on the host.",
					"readOnly": true
				},
				"URL_ERROR_HOST_LOOKUP": {
					"summary": "Error code reported via Ti.UI.WebView.error when a host name cannot be resolved, such as via a DNS lookup error.",
					"readOnly": true
				},
				"URL_ERROR_REDIRECT_LOOP": {
					"summary": "Error code reported via Ti.UI.WebView.error when a redirect loop is detected.",
					"readOnly": true
				},
				"URL_ERROR_SSL_FAILED": {
					"summary": "Error code reported via Ti.UI.WebView.error for an SSL failure.",
					"readOnly": true
				},
				"URL_ERROR_TIMEOUT": {
					"summary": "Error code reported via Ti.UI.WebView.error when a timeout occurs.",
					"readOnly": true
				},
				"URL_ERROR_UNKNOWN": {
					"summary": "Error code reported via Ti.UI.WebView.error when an unknown error occurs.",
					"readOnly": true
				},
				"URL_ERROR_UNSUPPORTED_SCHEME": {
					"summary": "Error code reported via Ti.UI.WebView.error when a url contains an unsupported scheme.",
					"readOnly": true
				},
				"backgroundColor": {
					"summary": "Sets the background color of the master view (when there are no windows or other top-level \ncontrols displayed)."
				},
				"backgroundImage": {
					"summary": "Local path or URL to an image file for setting a background for the master view (when there \nare no windows or other top-level controls displayed)."
				},
				"currentTab": {
					"summary": "The currently active tab, if a tab group is open."
				},
				"currentWindow": {
					"summary": "The active window associated with the executing JavaScript context.",
					"readOnly": true
				},
				"orientation": {
					"summary": "Updates the orientation of the current window to the specified orientation value."
				}
			},
			"methods": {
				"convertUnits": {
					"summary": "Converts one type of unit to another using the metrics of the main display."
				},
				"create2DMatrix": {
					"summary": "Creates and returns an instance of Ti.UI.2DMatrix."
				},
				"create3DMatrix": {
					"summary": "Creates and returns an instance of Ti.UI.3DMatrix."
				},
				"createActivityIndicator": {
					"summary": "Creates and returns an instance of Ti.UI.ActivityIndicator."
				},
				"createAlertDialog": {
					"summary": "Creates and returns an instance of Ti.UI.AlertDialog."
				},
				"createAnimation": {
					"summary": "Creates and returns an instance of Ti.UI.Animation."
				},
				"createButton": {
					"summary": "Creates and returns an instance of Ti.UI.Button."
				},
				"createButtonBar": {
					"summary": "Creates and returns an instance of Ti.UI.ButtonBar."
				},
				"createCoverFlowView": {
					"summary": "Creates and returns an instance of Ti.UI.CoverFlowView."
				},
				"createDashboardItem": {
					"summary": "Creates and returns an instance of Ti.UI.DashboardItem."
				},
				"createDashboardView": {
					"summary": "Creates and returns an instance of Ti.UI.DashboardView."
				},
				"createEmailDialog": {
					"summary": "Creates and returns an instance of Ti.UI.EmailDialog."
				},
				"createImageView": {
					"summary": "Creates and returns an instance of Ti.UI.ImageView."
				},
				"createLabel": {
					"summary": "Creates and returns an instance of Ti.UI.Label."
				},
				"createListSection": {
					"summary": "Creates and returns an instance of Ti.UI.ListSection."
				},
				"createListView": {
					"summary": "Creates and returns an instance of Ti.UI.ListView."
				},
				"createMaskedImage": {
					"summary": "Creates and returns an instance of Ti.UI.MaskedImage."
				},
				"createNotification": {
					"summary": "Creates and returns an instance of Ti.UI.Notification."
				},
				"createOptionDialog": {
					"summary": "Creates and returns an instance of Ti.UI.OptionDialog."
				},
				"createPicker": {
					"summary": "Creates and returns an instance of Ti.UI.Picker."
				},
				"createPickerColumn": {
					"summary": "Creates and returns an instance of Ti.UI.PickerColumn."
				},
				"createPickerRow": {
					"summary": "Creates and returns an instance of Ti.UI.PickerRow."
				},
				"createProgressBar": {
					"summary": "Creates and returns an instance of Ti.UI.ProgressBar."
				},
				"createRefreshControl": {
					"summary": "Creates and returns an instance of Ti.UI.RefreshControl."
				},
				"createSMSDialog": {
					"summary": "Creates and returns an instance of Ti.UI.SMSDialog."
				},
				"createScrollView": {
					"summary": "Creates and returns an instance of Ti.UI.ScrollView."
				},
				"createScrollableView": {
					"summary": "Creates and returns an instance of Ti.UI.ScrollableView."
				},
				"createSearchBar": {
					"summary": "Creates and returns an instance of Ti.UI.SearchBar."
				},
				"createSlider": {
					"summary": "Creates and returns an instance of Ti.UI.Slider."
				},
				"createSwitch": {
					"summary": "Creates and returns an instance of Ti.UI.Switch."
				},
				"createTab": {
					"summary": "Creates and returns an instance of Ti.UI.Tab."
				},
				"createTabGroup": {
					"summary": "Creates and returns an instance of Ti.UI.TabGroup."
				},
				"createTabbedBar": {
					"summary": "Creates and returns an instance of Ti.UI.TabbedBar."
				},
				"createTableView": {
					"summary": "Creates and returns an instance of Ti.UI.TableView."
				},
				"createTableViewRow": {
					"summary": "Creates and returns an instance of Ti.UI.TableViewRow."
				},
				"createTableViewSection": {
					"summary": "Creates and returns an instance of Ti.UI.TableViewSection."
				},
				"createTextArea": {
					"summary": "Creates and returns an instance of Ti.UI.TextArea."
				},
				"createTextField": {
					"summary": "Creates and returns an instance of Ti.UI.TextField."
				},
				"createToolbar": {
					"summary": "Creates and returns an instance of Ti.UI.Toolbar."
				},
				"createView": {
					"summary": "Creates and returns an instance of Ti.UI.View."
				},
				"createWebView": {
					"summary": "Creates and returns an instance of Ti.UI.WebView."
				},
				"createWindow": {
					"summary": "Creates and returns an instance of Ti.UI.Window."
				},
				"getBackgroundColor": {
					"summary": "Gets the value of the backgroundColor property."
				},
				"getBackgroundImage": {
					"summary": "Gets the value of the backgroundImage property."
				},
				"getCurrentTab": {
					"summary": "Gets the value of the currentTab property."
				},
				"getCurrentWindow": {
					"summary": "Gets the value of the currentWindow property."
				},
				"getOrientation": {
					"summary": "Gets the value of the orientation property."
				},
				"setBackgroundColor": {
					"summary": "Sets the value of the backgroundColor property."
				},
				"setBackgroundImage": {
					"summary": "Sets the value of the backgroundImage property."
				},
				"setCurrentTab": {
					"summary": "Sets the value of the currentTab property."
				},
				"setOrientation": {
					"summary": "Sets the value of the orientation property."
				}
			}
		},
		"Ti.UI.Clipboard": {
			"parent": "Ti.Module",
			"summary": "A module used for accessing clipboard data.",
			"properties": {},
			"methods": {
				"clearData": {
					"summary": "Deletes data of the specified MIME type stored in the clipboard. If MIME type omitted, all \ndata is deleted."
				},
				"clearText": {
					"summary": "Deletes all text data stored in the clipboard."
				},
				"getData": {
					"summary": "Gets data of the specified MIME type stored in the clipboard."
				},
				"getText": {
					"summary": "Gets text data stored in the clipboard."
				},
				"hasData": {
					"summary": "Indicates whether any data of the specified MIME type is stored in the clipboard."
				},
				"hasText": {
					"summary": "Indicates whether any text data is stored in the clipboard."
				},
				"setData": {
					"summary": "Stores data of the specified MIME type in the clipboard."
				},
				"setText": {
					"summary": "Stores text data in the clipboard."
				}
			}
		},
		"Ti.UI.ScrollableView": {
			"parent": "Ti.UI.View",
			"summary": "A view that encapsulates a horizontally-scrolling set of child views, known as pages, navigable \nusing its built-in horizontal swipe gestures.",
			"properties": {
				"cacheSize": {
					"summary": "Number of pages to cache (pre-render)."
				},
				"clipViews": {
					"summary": "Determines whether the previous and next pages are clipped, so that they are not visible \nadjacent to the current page."
				},
				"currentPage": {
					"summary": "Index of the active page."
				},
				"disableBounce": {
					"summary": "Determines whether page bouncing effect is disabled."
				},
				"hitRect": {
					"summary": "Sets the region where this view responds to gestures."
				},
				"overScrollMode": {
					"summary": "Determines the behavior when the user overscolls the view."
				},
				"overlayEnabled": {
					"summary": "Determines whether the paging control is added as an overlay to the view."
				},
				"pagingControlAlpha": {
					"summary": "Alpha value of the paging control."
				},
				"pagingControlColor": {
					"summary": "Color of the paging control, as a color name or hex triplet."
				},
				"pagingControlHeight": {
					"summary": "Height of the paging control, in pixels."
				},
				"pagingControlOnTop": {
					"summary": "Determines whether the paging control is displayed at the top or bottom of the view."
				},
				"pagingControlTimeout": {
					"summary": "Number of milliseconds to wait before hiding the paging control."
				},
				"scrollingEnabled": {
					"summary": "Determines whether scrolling is enabled for the view."
				},
				"showPagingControl": {
					"summary": "Determines whether the paging control is visible."
				},
				"views": {
					"summary": "Sets the pages within this Scrollable View."
				}
			},
			"methods": {
				"addView": {
					"summary": "Adds a new page to this Scrollable View."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getCacheSize": {
					"summary": "Gets the value of the cacheSize property."
				},
				"getClipViews": {
					"summary": "Gets the value of the clipViews property."
				},
				"getCurrentPage": {
					"summary": "Gets the value of the currentPage property."
				},
				"getDisableBounce": {
					"summary": "Gets the value of the disableBounce property."
				},
				"getHitRect": {
					"summary": "Gets the value of the hitRect property."
				},
				"getOverScrollMode": {
					"summary": "Gets the value of the overScrollMode property."
				},
				"getOverlayEnabled": {
					"summary": "Gets the value of the overlayEnabled property."
				},
				"getPagingControlAlpha": {
					"summary": "Gets the value of the pagingControlAlpha property."
				},
				"getPagingControlColor": {
					"summary": "Gets the value of the pagingControlColor property."
				},
				"getPagingControlHeight": {
					"summary": "Gets the value of the pagingControlHeight property."
				},
				"getPagingControlOnTop": {
					"summary": "Gets the value of the pagingControlOnTop property."
				},
				"getPagingControlTimeout": {
					"summary": "Gets the value of the pagingControlTimeout property."
				},
				"getScrollingEnabled": {
					"summary": "Gets the value of the scrollingEnabled property."
				},
				"getShowPagingControl": {
					"summary": "Gets the value of the showPagingControl property."
				},
				"getViews": {
					"summary": "Gets the value of the views property."
				},
				"moveNext": {
					"summary": "Sets the current page to the next consecutive page in Ti.UI.ScrollableView.views."
				},
				"movePrevious": {
					"summary": "Sets the current page to the previous consecutive page in Ti.UI.ScrollableView.views."
				},
				"removeView": {
					"summary": "Removes an existing page from this Scrollable View."
				},
				"scrollToView": {
					"summary": "Scrolls to the specified page in Ti.UI.ScrollableView.views."
				},
				"setCacheSize": {
					"summary": "Sets the value of the cacheSize property."
				},
				"setCurrentPage": {
					"summary": "Sets the value of the currentPage property."
				},
				"setDisableBounce": {
					"summary": "Sets the value of the disableBounce property."
				},
				"setHitRect": {
					"summary": "Sets the value of the hitRect property."
				},
				"setOverScrollMode": {
					"summary": "Sets the value of the overScrollMode property."
				},
				"setOverlayEnabled": {
					"summary": "Sets the value of the overlayEnabled property."
				},
				"setPagingControlAlpha": {
					"summary": "Sets the value of the pagingControlAlpha property."
				},
				"setPagingControlColor": {
					"summary": "Sets the value of the pagingControlColor property."
				},
				"setPagingControlHeight": {
					"summary": "Sets the value of the pagingControlHeight property."
				},
				"setPagingControlOnTop": {
					"summary": "Sets the value of the pagingControlOnTop property."
				},
				"setScrollingEnabled": {
					"summary": "Sets the value of the scrollingEnabled property."
				},
				"setShowPagingControl": {
					"summary": "Sets the value of the showPagingControl property."
				},
				"setViews": {
					"summary": "Sets the value of the views property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.ListSection": {
			"parent": "Ti.Proxy",
			"summary": "A list section is a container within a list view used to organize list items.",
			"properties": {
				"footerTitle": {
					"summary": "Title of this section footer."
				},
				"footerView": {
					"summary": "View to use for this section footer."
				},
				"headerTitle": {
					"summary": "Title of this section header."
				},
				"headerView": {
					"summary": "View to use for this section header."
				},
				"items": {
					"summary": "Items of this list section."
				}
			},
			"methods": {
				"appendItems": {
					"summary": "Appends the data entries to the end of the list section."
				},
				"deleteItemsAt": {
					"summary": "Removes count entries from the list section at the specified index."
				},
				"getFooterTitle": {
					"summary": "Gets the value of the footerTitle property."
				},
				"getFooterView": {
					"summary": "Gets the value of the footerView property."
				},
				"getHeaderTitle": {
					"summary": "Gets the value of the headerTitle property."
				},
				"getHeaderView": {
					"summary": "Gets the value of the headerView property."
				},
				"getItemAt": {
					"summary": "Returns the item entry from the list view at the specified index."
				},
				"getItems": {
					"summary": "Gets the value of the items property."
				},
				"insertItemsAt": {
					"summary": "Inserts data entries to the list section at the specified index."
				},
				"replaceItemsAt": {
					"summary": "Removes count entries from the list section at the specified index,\nthen inserts data entries to the list section at the same index."
				},
				"setFooterTitle": {
					"summary": "Sets the value of the footerTitle property."
				},
				"setFooterView": {
					"summary": "Sets the value of the footerView property."
				},
				"setHeaderTitle": {
					"summary": "Sets the value of the headerTitle property."
				},
				"setHeaderView": {
					"summary": "Sets the value of the headerView property."
				},
				"setItems": {
					"summary": "Sets the data entries in the list section."
				},
				"updateItemAt": {
					"summary": "Updates an item at the specified index."
				}
			}
		},
		"Ti.UI.ScrollView": {
			"parent": "Ti.UI.View",
			"summary": "A view that contains a horizontally and/or vertically-scrollable region of content.  ",
			"properties": {
				"canCancelEvents": {
					"summary": "Determines whether this scroll view can cancel subview touches in order to scroll instead."
				},
				"contentHeight": {
					"summary": "Height of the scrollable region."
				},
				"contentOffset": {
					"summary": "X and Y coordinates to which to reposition the top-left point of the scrollable region."
				},
				"contentWidth": {
					"summary": "Width of the scrollable region."
				},
				"decelerationRate": {
					"summary": "The deceleration rate of the ScrollView."
				},
				"disableBounce": {
					"summary": "Determines whether scroll bounce of the scrollable region is enabled."
				},
				"horizontalBounce": {
					"summary": "Determines whether horizontal scroll bounce of the scrollable region is enabled."
				},
				"maxZoomScale": {
					"summary": "Maximum scaling factor of the scrollable region and its content."
				},
				"minZoomScale": {
					"summary": "Minimum scaling factor of the scrollable region and its content."
				},
				"overScrollMode": {
					"summary": "Determines the behavior when the user overscolls the view."
				},
				"scrollIndicatorStyle": {
					"summary": "Style of the scrollbar."
				},
				"scrollType": {
					"summary": "Limits the direction of the scrollable region, overriding the deduced setting. Set to \nhorizontal or vertical."
				},
				"scrollingEnabled": {
					"summary": "Determines whether scrolling is enabled for the view."
				},
				"scrollsToTop": {
					"summary": "Controls whether the scroll-to-top gesture is effective."
				},
				"showHorizontalScrollIndicator": {
					"summary": "Determines whether the horizontal scroll indicator is visible."
				},
				"showVerticalScrollIndicator": {
					"summary": "Determines whether the vertical scroll indicator is visible."
				},
				"verticalBounce": {
					"summary": "Determines whether vertical scroll bounce of the scrollable region is enabled."
				},
				"zoomScale": {
					"summary": "Scaling factor of the scroll view's content."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getCanCancelEvents": {
					"summary": "Gets the value of the canCancelEvents property."
				},
				"getContentHeight": {
					"summary": "Gets the value of the contentHeight property."
				},
				"getContentOffset": {
					"summary": "Gets the value of the contentOffset property."
				},
				"getContentWidth": {
					"summary": "Gets the value of the contentWidth property."
				},
				"getDecelerationRate": {
					"summary": "Gets the value of the decelerationRate property."
				},
				"getDisableBounce": {
					"summary": "Gets the value of the disableBounce property."
				},
				"getHorizontalBounce": {
					"summary": "Gets the value of the horizontalBounce property."
				},
				"getMaxZoomScale": {
					"summary": "Gets the value of the maxZoomScale property."
				},
				"getMinZoomScale": {
					"summary": "Gets the value of the minZoomScale property."
				},
				"getOverScrollMode": {
					"summary": "Gets the value of the overScrollMode property."
				},
				"getScrollIndicatorStyle": {
					"summary": "Gets the value of the scrollIndicatorStyle property."
				},
				"getScrollType": {
					"summary": "Gets the value of the scrollType property."
				},
				"getScrollingEnabled": {
					"summary": "Gets the value of the scrollingEnabled property."
				},
				"getScrollsToTop": {
					"summary": "Gets the value of the scrollsToTop property."
				},
				"getShowHorizontalScrollIndicator": {
					"summary": "Gets the value of the showHorizontalScrollIndicator property."
				},
				"getShowVerticalScrollIndicator": {
					"summary": "Gets the value of the showVerticalScrollIndicator property."
				},
				"getVerticalBounce": {
					"summary": "Gets the value of the verticalBounce property."
				},
				"getZoomScale": {
					"summary": "Gets the value of the zoomScale property."
				},
				"scrollTo": {
					"summary": "Moves the specified coordinate of the scrollable region into the viewable area."
				},
				"scrollToBottom": {
					"summary": "Moves the end of the scrollable region into the viewable area."
				},
				"setCanCancelEvents": {
					"summary": "Sets the value of the canCancelEvents property."
				},
				"setContentHeight": {
					"summary": "Sets the value of the contentHeight property."
				},
				"setContentOffset": {
					"summary": "Sets the value of the contentOffset property."
				},
				"setContentWidth": {
					"summary": "Sets the value of the contentWidth property."
				},
				"setDecelerationRate": {
					"summary": "Sets the value of the decelerationRate property."
				},
				"setDisableBounce": {
					"summary": "Sets the value of the disableBounce property."
				},
				"setHorizontalBounce": {
					"summary": "Sets the value of the horizontalBounce property."
				},
				"setMaxZoomScale": {
					"summary": "Sets the value of the maxZoomScale property."
				},
				"setMinZoomScale": {
					"summary": "Sets the value of the minZoomScale property."
				},
				"setOverScrollMode": {
					"summary": "Sets the value of the overScrollMode property."
				},
				"setScrollIndicatorStyle": {
					"summary": "Sets the value of the scrollIndicatorStyle property."
				},
				"setScrollingEnabled": {
					"summary": "Sets the value of the scrollingEnabled property."
				},
				"setScrollsToTop": {
					"summary": "Sets the value of the scrollsToTop property."
				},
				"setShowHorizontalScrollIndicator": {
					"summary": "Sets the value of the showHorizontalScrollIndicator property."
				},
				"setShowVerticalScrollIndicator": {
					"summary": "Sets the value of the showVerticalScrollIndicator property."
				},
				"setVerticalBounce": {
					"summary": "Sets the value of the verticalBounce property."
				},
				"setZoomScale": {
					"summary": "Sets the value of the zoomScale property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.ListView": {
			"parent": "Ti.UI.View",
			"summary": "A list view is used to present information, organized in to sections and items,\nin a vertically-scrolling view.",
			"properties": {
				"allowsSelection": {
					"summary": "Determines whether this item can be selected."
				},
				"canScroll": {
					"summary": "Determines if the list view can scroll in response to user actions."
				},
				"caseInsensitiveSearch": {
					"summary": "Determines if the search performed is case insensitive."
				},
				"defaultItemTemplate": {
					"summary": "Sets the default template for list data items that do not specify the template property."
				},
				"editing": {
					"summary": "Determines if the list view is currently in editing mode."
				},
				"footerDividersEnabled": {
					"summary": "When set to false, the ListView will not draw the divider before the footer view."
				},
				"footerTitle": {
					"summary": "List view footer title."
				},
				"footerView": {
					"summary": "List view footer as a view that will be rendered instead of a label."
				},
				"headerDividersEnabled": {
					"summary": "When set to false, the ListView will not draw the divider after the header view."
				},
				"headerTitle": {
					"summary": "List view header title."
				},
				"headerView": {
					"summary": "List view header as a view that will be rendered instead of a label."
				},
				"keepSectionsInSearch": {
					"summary": "Determines if the section information is displayed in the search results when using the searchText property."
				},
				"pruneSectionsOnEdit": {
					"summary": "Determines if empty sections are retained when the user completes editing the list view."
				},
				"pullView": {
					"summary": "View positioned above the first row that is only revealed when the user drags the list view contents down."
				},
				"refreshControl": {
					"summary": "View positioned above the first row that is only revealed when the user drags the list view contents down."
				},
				"scrollIndicatorStyle": {
					"summary": "Style of the scrollbar."
				},
				"searchText": {
					"summary": "The string to use as the search parameter."
				},
				"searchView": {
					"summary": "Search field to use for the list view."
				},
				"sectionCount": {
					"summary": "Number of sections in this list view.",
					"readOnly": true
				},
				"sectionIndexTitles": {
					"summary": "Array of objects (with title and index properties) to control the list view index."
				},
				"sections": {
					"summary": "Sections of this list."
				},
				"separatorColor": {
					"summary": "Separator line color between rows, as a color name or hex triplet."
				},
				"separatorInsets": {
					"summary": "The insets for list view separators (applies to all cells). This property is applicable on iOS 7 and greater."
				},
				"separatorStyle": {
					"summary": "Separator style constant."
				},
				"showVerticalScrollIndicator": {
					"summary": "Determines whether this list view displays a vertical scroll indicator."
				},
				"style": {
					"summary": "Style of the list view."
				},
				"templates": {
					"summary": "Contain key-value pairs mapping a style name (key) to an ItemTemplate (value)."
				},
				"willScrollOnStatusTap": {
					"summary": "Controls the scroll-to-top gesture."
				}
			},
			"methods": {
				"appendSection": {
					"summary": "Appends a single section or an array of sections to the end of the list."
				},
				"deleteSectionAt": {
					"summary": "Deletes an existing section."
				},
				"deselectItem": {
					"summary": "Deselects a specific item."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getAllowsSelection": {
					"summary": "Gets the value of the allowsSelection property."
				},
				"getCanScroll": {
					"summary": "Gets the value of the canScroll property."
				},
				"getCaseInsensitiveSearch": {
					"summary": "Gets the value of the caseInsensitiveSearch property."
				},
				"getDefaultItemTemplate": {
					"summary": "Gets the value of the defaultItemTemplate property."
				},
				"getEditing": {
					"summary": "Gets the value of the editing property."
				},
				"getFooterDividersEnabled": {
					"summary": "Gets the value of the footerDividersEnabled property."
				},
				"getFooterTitle": {
					"summary": "Gets the value of the footerTitle property."
				},
				"getFooterView": {
					"summary": "Gets the value of the footerView property."
				},
				"getHeaderDividersEnabled": {
					"summary": "Gets the value of the headerDividersEnabled property."
				},
				"getHeaderTitle": {
					"summary": "Gets the value of the headerTitle property."
				},
				"getHeaderView": {
					"summary": "Gets the value of the headerView property."
				},
				"getKeepSectionsInSearch": {
					"summary": "Gets the value of the keepSectionsInSearch property."
				},
				"getPruneSectionsOnEdit": {
					"summary": "Gets the value of the pruneSectionsOnEdit property."
				},
				"getPullView": {
					"summary": "Gets the value of the pullView property."
				},
				"getRefreshControl": {
					"summary": "Gets the value of the refreshControl property."
				},
				"getScrollIndicatorStyle": {
					"summary": "Gets the value of the scrollIndicatorStyle property."
				},
				"getSearchText": {
					"summary": "Gets the value of the searchText property."
				},
				"getSearchView": {
					"summary": "Gets the value of the searchView property."
				},
				"getSectionCount": {
					"summary": "Gets the value of the sectionCount property."
				},
				"getSectionIndexTitles": {
					"summary": "Gets the value of the sectionIndexTitles property."
				},
				"getSections": {
					"summary": "Gets the value of the sections property."
				},
				"getSeparatorColor": {
					"summary": "Gets the value of the separatorColor property."
				},
				"getSeparatorInsets": {
					"summary": "Gets the value of the separatorInsets property."
				},
				"getSeparatorStyle": {
					"summary": "Gets the value of the separatorStyle property."
				},
				"getShowVerticalScrollIndicator": {
					"summary": "Gets the value of the showVerticalScrollIndicator property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"getTemplates": {
					"summary": "Gets the value of the templates property."
				},
				"getWillScrollOnStatusTap": {
					"summary": "Gets the value of the willScrollOnStatusTap property."
				},
				"insertSectionAt": {
					"summary": "Inserts a section or an array of sections at a specific index."
				},
				"replaceSectionAt": {
					"summary": "Replaces an existing section."
				},
				"scrollToItem": {
					"summary": "Scrolls to a specific item."
				},
				"selectItem": {
					"summary": "Selects an item in the list using the specified item and section indices."
				},
				"setAllowsSelection": {
					"summary": "Sets the value of the allowsSelection property."
				},
				"setCanScroll": {
					"summary": "Sets the value of the canScroll property."
				},
				"setCaseInsensitiveSearch": {
					"summary": "Sets the value of the caseInsensitiveSearch property."
				},
				"setContentInsets": {
					"summary": "Sets this list view's content insets."
				},
				"setDefaultItemTemplate": {
					"summary": "Sets the value of the defaultItemTemplate property."
				},
				"setEditing": {
					"summary": "Sets the value of the editing property."
				},
				"setFooterTitle": {
					"summary": "Sets the value of the footerTitle property."
				},
				"setFooterView": {
					"summary": "Sets the value of the footerView property."
				},
				"setHeaderTitle": {
					"summary": "Sets the value of the headerTitle property."
				},
				"setHeaderView": {
					"summary": "Sets the value of the headerView property."
				},
				"setKeepSectionsInSearch": {
					"summary": "Sets the value of the keepSectionsInSearch property."
				},
				"setMarker": {
					"summary": "Sets a reference item in the list view."
				},
				"setPruneSectionsOnEdit": {
					"summary": "Sets the value of the pruneSectionsOnEdit property."
				},
				"setPullView": {
					"summary": "Sets the value of the pullView property."
				},
				"setRefreshControl": {
					"summary": "Sets the value of the refreshControl property."
				},
				"setScrollIndicatorStyle": {
					"summary": "Sets the value of the scrollIndicatorStyle property."
				},
				"setSearchText": {
					"summary": "Sets the value of the searchText property."
				},
				"setSearchView": {
					"summary": "Sets the value of the searchView property."
				},
				"setSectionIndexTitles": {
					"summary": "Sets the value of the sectionIndexTitles property."
				},
				"setSections": {
					"summary": "Sets the value of the sections property."
				},
				"setSeparatorColor": {
					"summary": "Sets the value of the separatorColor property."
				},
				"setSeparatorInsets": {
					"summary": "Sets the value of the separatorInsets property."
				},
				"setSeparatorStyle": {
					"summary": "Sets the value of the separatorStyle property."
				},
				"setShowVerticalScrollIndicator": {
					"summary": "Sets the value of the showVerticalScrollIndicator property."
				},
				"setWillScrollOnStatusTap": {
					"summary": "Sets the value of the willScrollOnStatusTap property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.TabGroup": {
			"parent": "Ti.UI.View",
			"summary": "A tabbed group of windows.",
			"properties": {
				"activeTab": {
					"summary": "Active tab."
				},
				"activeTabBackgroundColor": {
					"summary": "Default background color for the active tab, as a color name or hex triplet."
				},
				"activeTabBackgroundDisabledColor": {
					"summary": "Default background disabled color for the active tab, as a color name or hex triplet."
				},
				"activeTabBackgroundDisabledImage": {
					"summary": "Default background disabled image for the active tab."
				},
				"activeTabBackgroundFocusedColor": {
					"summary": "Default background focused color for the active tab, as a color name or hex triplet."
				},
				"activeTabBackgroundFocusedImage": {
					"summary": "Default background focused image for the active tab."
				},
				"activeTabBackgroundImage": {
					"summary": "Default background image for the active tab."
				},
				"activeTabBackgroundSelectedColor": {
					"summary": "Default background selected color for the active tab, as a color name or hex triplet."
				},
				"activeTabBackgroundSelectedImage": {
					"summary": "Default background selected image for the active tab."
				},
				"activeTabIconTint": {
					"summary": "Color applied to active tabs icons, as a color name or hex triplet, where the tab's activeIcon was not defined."
				},
				"activity": {
					"summary": "Reference to the Android Activity object associated with this tab group.",
					"readOnly": true
				},
				"allowUserCustomization": {
					"summary": "Allow the user to reorder tabs in the tab group using the Edit button on the More \ntab."
				},
				"barColor": {
					"summary": "Default navigation bar color (typically for the More tab), as a color name or hex triplet."
				},
				"editButtonTitle": {
					"summary": "Title for the edit button on the More tab."
				},
				"exitOnClose": {
					"summary": "Boolean value indicating if the application should exit when closing the tab group, whether via Android\nback button or the close method."
				},
				"navBarHidden": {
					"summary": "Hide the nav bar (true) or show the nav bar (false) for this tab group."
				},
				"navTintColor": {
					"summary": "The tintColor to apply to the navigation bar (typically for the More tab). This property is applicable on iOS 7 and greater."
				},
				"shadowImage": {
					"summary": "Image of the shadow placed between the tab bar and the content area."
				},
				"swipeable": {
					"summary": "Boolean value indicating if tab navigation can be done by swipes, in addition to tab clicks."
				},
				"tabDividerColor": {
					"summary": "Color of the divider between tabs, as a color name or hex triplet."
				},
				"tabDividerWidth": {
					"summary": "Width of the divider between tabs."
				},
				"tabHeight": {
					"summary": "Height of the tabs."
				},
				"tabs": {
					"summary": "Tabs managed by the tab group."
				},
				"tabsAtBottom": {
					"summary": "Determines whether the tabs should be positioned at the top rather than the bottom of the \nscreen."
				},
				"tabsBackgroundColor": {
					"summary": "Default background color for inactive tabs, as a color name or hex triplet."
				},
				"tabsBackgroundDisabledColor": {
					"summary": "Default background disabled color for tabs, as a color name or hex triplet."
				},
				"tabsBackgroundDisabledImage": {
					"summary": "Default background disabled image for tabs."
				},
				"tabsBackgroundFocusedColor": {
					"summary": "Default background focused color for tabs, as a color name or hex triplet."
				},
				"tabsBackgroundFocusedImage": {
					"summary": "Default background focused image for tabs."
				},
				"tabsBackgroundImage": {
					"summary": "Default background image for tabs."
				},
				"tabsBackgroundSelectedColor": {
					"summary": "Default background selected color for tabs, as a color name or hex triplet."
				},
				"tabsBackgroundSelectedImage": {
					"summary": "Default background selected image for tabs."
				},
				"tabsTintColor": {
					"summary": "The tintColor to apply to the tabs. This property is applicable on iOS 7 and greater."
				},
				"title": {
					"summary": "Title for this tabGroup."
				},
				"titleAttributes": {
					"summary": "Title text attributes of the window to be applied on the More tab."
				},
				"translucent": {
					"summary": "Boolean value indicating if the nav bar (typically for the More tab), is translucent."
				},
				"windowSoftInputMode": {
					"summary": "Determines how the tab group is treated when a soft input method (such as a virtual keyboard) \nis displayed."
				}
			},
			"methods": {
				"addTab": {
					"summary": "Adds a tab to the tab group."
				},
				"close": {
					"summary": "Closes the tab group and removes it from the UI."
				},
				"disableTabNavigation": {
					"summary": "Disable (or re-enable) tab navigation. If tab navigation is disabled, the tabs are hidden and\nthe last selected tab window is shown."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getActiveTab": {
					"summary": "Gets the currently-active tab."
				},
				"getActiveTabBackgroundColor": {
					"summary": "Gets the value of the activeTabBackgroundColor property."
				},
				"getActiveTabBackgroundDisabledColor": {
					"summary": "Gets the value of the activeTabBackgroundDisabledColor property."
				},
				"getActiveTabBackgroundDisabledImage": {
					"summary": "Gets the value of the activeTabBackgroundDisabledImage property."
				},
				"getActiveTabBackgroundFocusedColor": {
					"summary": "Gets the value of the activeTabBackgroundFocusedColor property."
				},
				"getActiveTabBackgroundFocusedImage": {
					"summary": "Gets the value of the activeTabBackgroundFocusedImage property."
				},
				"getActiveTabBackgroundImage": {
					"summary": "Gets the value of the activeTabBackgroundImage property."
				},
				"getActiveTabBackgroundSelectedColor": {
					"summary": "Gets the value of the activeTabBackgroundSelectedColor property."
				},
				"getActiveTabBackgroundSelectedImage": {
					"summary": "Gets the value of the activeTabBackgroundSelectedImage property."
				},
				"getActiveTabIconTint": {
					"summary": "Gets the value of the activeTabIconTint property."
				},
				"getActivity": {
					"summary": "Gets the value of the activity property."
				},
				"getAllowUserCustomization": {
					"summary": "Gets the value of the allowUserCustomization property."
				},
				"getBarColor": {
					"summary": "Gets the value of the barColor property."
				},
				"getEditButtonTitle": {
					"summary": "Gets the value of the editButtonTitle property."
				},
				"getExitOnClose": {
					"summary": "Gets the value of the exitOnClose property."
				},
				"getNavBarHidden": {
					"summary": "Gets the value of the navBarHidden property."
				},
				"getNavTintColor": {
					"summary": "Gets the value of the navTintColor property."
				},
				"getShadowImage": {
					"summary": "Gets the value of the shadowImage property."
				},
				"getSwipeable": {
					"summary": "Gets the value of the swipeable property."
				},
				"getTabDividerColor": {
					"summary": "Gets the value of the tabDividerColor property."
				},
				"getTabDividerWidth": {
					"summary": "Gets the value of the tabDividerWidth property."
				},
				"getTabHeight": {
					"summary": "Gets the value of the tabHeight property."
				},
				"getTabs": {
					"summary": "Gets all tabs that are managed by the tab group."
				},
				"getTabsAtBottom": {
					"summary": "Gets the value of the tabsAtBottom property."
				},
				"getTabsBackgroundColor": {
					"summary": "Gets the value of the tabsBackgroundColor property."
				},
				"getTabsBackgroundDisabledColor": {
					"summary": "Gets the value of the tabsBackgroundDisabledColor property."
				},
				"getTabsBackgroundDisabledImage": {
					"summary": "Gets the value of the tabsBackgroundDisabledImage property."
				},
				"getTabsBackgroundFocusedColor": {
					"summary": "Gets the value of the tabsBackgroundFocusedColor property."
				},
				"getTabsBackgroundFocusedImage": {
					"summary": "Gets the value of the tabsBackgroundFocusedImage property."
				},
				"getTabsBackgroundImage": {
					"summary": "Gets the value of the tabsBackgroundImage property."
				},
				"getTabsBackgroundSelectedColor": {
					"summary": "Gets the value of the tabsBackgroundSelectedColor property."
				},
				"getTabsBackgroundSelectedImage": {
					"summary": "Gets the value of the tabsBackgroundSelectedImage property."
				},
				"getTabsTintColor": {
					"summary": "Gets the value of the tabsTintColor property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"getTitleAttributes": {
					"summary": "Gets the value of the titleAttributes property."
				},
				"getTranslucent": {
					"summary": "Gets the value of the translucent property."
				},
				"getWindowSoftInputMode": {
					"summary": "Gets the value of the windowSoftInputMode property."
				},
				"open": {
					"summary": "Opens the tab group and makes it visible."
				},
				"removeTab": {
					"summary": "Removes a tab from the tab group."
				},
				"setActiveTab": {
					"summary": "Selects the currently active tab in a tab group."
				},
				"setActiveTabBackgroundColor": {
					"summary": "Sets the value of the activeTabBackgroundColor property."
				},
				"setActiveTabBackgroundDisabledColor": {
					"summary": "Sets the value of the activeTabBackgroundDisabledColor property."
				},
				"setActiveTabBackgroundDisabledImage": {
					"summary": "Sets the value of the activeTabBackgroundDisabledImage property."
				},
				"setActiveTabBackgroundFocusedColor": {
					"summary": "Sets the value of the activeTabBackgroundFocusedColor property."
				},
				"setActiveTabBackgroundFocusedImage": {
					"summary": "Sets the value of the activeTabBackgroundFocusedImage property."
				},
				"setActiveTabBackgroundImage": {
					"summary": "Sets the value of the activeTabBackgroundImage property."
				},
				"setActiveTabBackgroundSelectedColor": {
					"summary": "Sets the value of the activeTabBackgroundSelectedColor property."
				},
				"setActiveTabBackgroundSelectedImage": {
					"summary": "Sets the value of the activeTabBackgroundSelectedImage property."
				},
				"setActiveTabIconTint": {
					"summary": "Sets the value of the activeTabIconTint property."
				},
				"setAllowUserCustomization": {
					"summary": "Sets the value of the allowUserCustomization property."
				},
				"setBarColor": {
					"summary": "Sets the value of the barColor property."
				},
				"setEditButtonTitle": {
					"summary": "Sets the value of the editButtonTitle property."
				},
				"setNavBarHidden": {
					"summary": "Sets the value of the navBarHidden property."
				},
				"setNavTintColor": {
					"summary": "Sets the value of the navTintColor property."
				},
				"setShadowImage": {
					"summary": "Sets the value of the shadowImage property."
				},
				"setSwipeable": {
					"summary": "Sets the value of the swipeable property."
				},
				"setTabDividerColor": {
					"summary": "Sets the value of the tabDividerColor property."
				},
				"setTabDividerWidth": {
					"summary": "Sets the value of the tabDividerWidth property."
				},
				"setTabHeight": {
					"summary": "Sets the value of the tabHeight property."
				},
				"setTabs": {
					"summary": "Sets the value of the tabs property."
				},
				"setTabsAtBottom": {
					"summary": "Sets the value of the tabsAtBottom property."
				},
				"setTabsBackgroundColor": {
					"summary": "Sets the value of the tabsBackgroundColor property."
				},
				"setTabsBackgroundDisabledColor": {
					"summary": "Sets the value of the tabsBackgroundDisabledColor property."
				},
				"setTabsBackgroundDisabledImage": {
					"summary": "Sets the value of the tabsBackgroundDisabledImage property."
				},
				"setTabsBackgroundFocusedColor": {
					"summary": "Sets the value of the tabsBackgroundFocusedColor property."
				},
				"setTabsBackgroundFocusedImage": {
					"summary": "Sets the value of the tabsBackgroundFocusedImage property."
				},
				"setTabsBackgroundImage": {
					"summary": "Sets the value of the tabsBackgroundImage property."
				},
				"setTabsBackgroundSelectedColor": {
					"summary": "Sets the value of the tabsBackgroundSelectedColor property."
				},
				"setTabsBackgroundSelectedImage": {
					"summary": "Sets the value of the tabsBackgroundSelectedImage property."
				},
				"setTabsTintColor": {
					"summary": "Sets the value of the tabsTintColor property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"setTitleAttributes": {
					"summary": "Sets the value of the titleAttributes property."
				},
				"setTranslucent": {
					"summary": "Sets the value of the translucent property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.TableView": {
			"parent": "Ti.UI.View",
			"summary": "A table view is used to present information, organized in sections and rows, in a \nvertically-scrolling view.",
			"properties": {
				"allowsSelection": {
					"summary": "Determines whether this table's rows can be selected."
				},
				"allowsSelectionDuringEditing": {
					"summary": "Determines whether this table's rows can be selected while editing the table."
				},
				"data": {
					"summary": "Rows of the table view."
				},
				"editable": {
					"summary": "Determines the rows' default editable behavior, which allows them to be deleted by the user \nwhen the table is in editing or moving mode."
				},
				"editing": {
					"summary": "Determines whether row editing mode is active."
				},
				"filterAnchored": {
					"summary": "Determines whether the search is limited to the start of the string"
				},
				"filterAttribute": {
					"summary": "Filter attribute to be used when searching."
				},
				"filterCaseInsensitive": {
					"summary": "Determines whether the search is case insensitive."
				},
				"footerDividersEnabled": {
					"summary": "When set to false, the ListView will not draw the divider before the footer view."
				},
				"footerTitle": {
					"summary": "Table view footer title."
				},
				"footerView": {
					"summary": "Table view footer as a view that will be rendered instead of a label."
				},
				"headerDividersEnabled": {
					"summary": "When set to false, the ListView will not draw the divider after the header view."
				},
				"headerPullView": {
					"summary": "View positioned above the first row that is only revealed when the user drags the table \ncontents down."
				},
				"headerTitle": {
					"summary": "Table view header title."
				},
				"headerView": {
					"summary": "Table view header as a view that will be rendered instead of a label."
				},
				"hideSearchOnSelection": {
					"summary": "Determines whether the search field should hide on completion."
				},
				"index": {
					"summary": "Array of objects (with title and index properties) to control the table view index."
				},
				"maxRowHeight": {
					"summary": "Maximum row height for table view rows."
				},
				"minRowHeight": {
					"summary": "Minimum row height for table view rows."
				},
				"moveable": {
					"summary": "Determines the rows' default moveable behavior, which allows them to be re-ordered by the \nuser when the table is in editing or moving mode."
				},
				"moving": {
					"summary": "Determines whether row moving mode is active."
				},
				"overScrollMode": {
					"summary": "Determines the behavior when the user overscrolls the view."
				},
				"refreshControl": {
					"summary": "View positioned above the first row that is only revealed when the user drags the list view contents down."
				},
				"rowHeight": {
					"summary": "Default row height for table view rows."
				},
				"scrollIndicatorStyle": {
					"summary": "Style of the scrollbar."
				},
				"scrollable": {
					"summary": "If true, the tableview can be scrolled."
				},
				"scrollsToTop": {
					"summary": "Controls whether the scroll-to-top gesture is effective."
				},
				"search": {
					"summary": "Search field to use for the table view."
				},
				"searchAsChild": {
					"summary": "Determines whether the SearchBar or SearchView appears as part of the TableView."
				},
				"searchHidden": {
					"summary": "Determines whether the search field is visible."
				},
				"sectionCount": {
					"summary": "Number of sections in this table view.",
					"readOnly": true
				},
				"sections": {
					"summary": "Sections of this table."
				},
				"separatorColor": {
					"summary": "Separator line color between rows, as a color name or hex triplet."
				},
				"separatorInsets": {
					"summary": "The insets for table view separators (applies to all cells). This property is applicable on iOS 7 and greater."
				},
				"separatorStyle": {
					"summary": "Separator style constant."
				},
				"showVerticalScrollIndicator": {
					"summary": "Determines whether this table view displays a vertical scroll indicator."
				},
				"style": {
					"summary": "Style of the table view, specified using one of the constants from \nTi.UI.iPhone.TableViewStyle."
				}
			},
			"methods": {
				"appendRow": {
					"summary": "Appends a single row or an array of rows to the end of the table."
				},
				"appendSection": {
					"summary": "Appends a single section or an array of sections to the end of the table."
				},
				"deleteRow": {
					"summary": "Deletes an existing row."
				},
				"deleteSection": {
					"summary": "Deletes an existing section."
				},
				"deselectRow": {
					"summary": "Programmatically deselects a row."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getAllowsSelection": {
					"summary": "Gets the value of the allowsSelection property."
				},
				"getAllowsSelectionDuringEditing": {
					"summary": "Gets the value of the allowsSelectionDuringEditing property."
				},
				"getData": {
					"summary": "Gets the value of the data property."
				},
				"getEditable": {
					"summary": "Gets the value of the editable property."
				},
				"getEditing": {
					"summary": "Gets the value of the editing property."
				},
				"getFilterAnchored": {
					"summary": "Gets the value of the filterAnchored property."
				},
				"getFilterAttribute": {
					"summary": "Gets the value of the filterAttribute property."
				},
				"getFilterCaseInsensitive": {
					"summary": "Gets the value of the filterCaseInsensitive property."
				},
				"getFooterDividersEnabled": {
					"summary": "Gets the value of the footerDividersEnabled property."
				},
				"getFooterTitle": {
					"summary": "Gets the value of the footerTitle property."
				},
				"getFooterView": {
					"summary": "Gets the value of the footerView property."
				},
				"getHeaderDividersEnabled": {
					"summary": "Gets the value of the headerDividersEnabled property."
				},
				"getHeaderPullView": {
					"summary": "Gets the value of the headerPullView property."
				},
				"getHeaderTitle": {
					"summary": "Gets the value of the headerTitle property."
				},
				"getHeaderView": {
					"summary": "Gets the value of the headerView property."
				},
				"getHideSearchOnSelection": {
					"summary": "Gets the value of the hideSearchOnSelection property."
				},
				"getIndex": {
					"summary": "Gets the value of the index property."
				},
				"getMaxRowHeight": {
					"summary": "Gets the value of the maxRowHeight property."
				},
				"getMinRowHeight": {
					"summary": "Gets the value of the minRowHeight property."
				},
				"getMoveable": {
					"summary": "Gets the value of the moveable property."
				},
				"getMoving": {
					"summary": "Gets the value of the moving property."
				},
				"getOverScrollMode": {
					"summary": "Gets the value of the overScrollMode property."
				},
				"getRefreshControl": {
					"summary": "Gets the value of the refreshControl property."
				},
				"getRowHeight": {
					"summary": "Gets the value of the rowHeight property."
				},
				"getScrollIndicatorStyle": {
					"summary": "Gets the value of the scrollIndicatorStyle property."
				},
				"getScrollable": {
					"summary": "Gets the value of the scrollable property."
				},
				"getScrollsToTop": {
					"summary": "Gets the value of the scrollsToTop property."
				},
				"getSearch": {
					"summary": "Gets the value of the search property."
				},
				"getSearchAsChild": {
					"summary": "Gets the value of the searchAsChild property."
				},
				"getSearchHidden": {
					"summary": "Gets the value of the searchHidden property."
				},
				"getSectionCount": {
					"summary": "Gets the value of the sectionCount property."
				},
				"getSections": {
					"summary": "Gets the value of the sections property."
				},
				"getSeparatorColor": {
					"summary": "Gets the value of the separatorColor property."
				},
				"getSeparatorInsets": {
					"summary": "Gets the value of the separatorInsets property."
				},
				"getSeparatorStyle": {
					"summary": "Gets the value of the separatorStyle property."
				},
				"getShowVerticalScrollIndicator": {
					"summary": "Gets the value of the showVerticalScrollIndicator property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"insertRowAfter": {
					"summary": "Inserts a row after another row."
				},
				"insertRowBefore": {
					"summary": "Inserts a row before another row."
				},
				"insertSectionAfter": {
					"summary": "Inserts a section after another section."
				},
				"insertSectionBefore": {
					"summary": "Inserts a section before another section."
				},
				"scrollToIndex": {
					"summary": "Scrolls the table view to ensure that the specified row is on screen."
				},
				"scrollToTop": {
					"summary": "Scrolls the table to a specific top position where 0 is the topmost y position in the \ntable view."
				},
				"selectRow": {
					"summary": "Programmatically selects a row. In Android, it sets the currently selected item. If in touch mode,\nthe item will not be selected but it will still be positioned appropriately. If the specified \nselection position is less than 0, then the item at position 0 will be selected."
				},
				"setAllowsSelection": {
					"summary": "Sets the value of the allowsSelection property."
				},
				"setAllowsSelectionDuringEditing": {
					"summary": "Sets the value of the allowsSelectionDuringEditing property."
				},
				"setContentInsets": {
					"summary": "Sets this tableview's content insets."
				},
				"setData": {
					"summary": "Sets the data in the table."
				},
				"setEditable": {
					"summary": "Sets the value of the editable property."
				},
				"setEditing": {
					"summary": "Sets the value of the editing property."
				},
				"setFilterAnchored": {
					"summary": "Sets the value of the filterAnchored property."
				},
				"setFilterAttribute": {
					"summary": "Sets the value of the filterAttribute property."
				},
				"setFilterCaseInsensitive": {
					"summary": "Sets the value of the filterCaseInsensitive property."
				},
				"setFooterTitle": {
					"summary": "Sets the value of the footerTitle property."
				},
				"setFooterView": {
					"summary": "Sets the value of the footerView property."
				},
				"setHeaderPullView": {
					"summary": "Sets the value of the [Ti.UI.TableView.headerPullView] property."
				},
				"setHeaderTitle": {
					"summary": "Sets the value of the headerTitle property."
				},
				"setHeaderView": {
					"summary": "Sets the value of the headerView property."
				},
				"setHideSearchOnSelection": {
					"summary": "Sets the value of the hideSearchOnSelection property."
				},
				"setIndex": {
					"summary": "Sets the value of the index property."
				},
				"setMaxRowHeight": {
					"summary": "Sets the value of the maxRowHeight property."
				},
				"setMinRowHeight": {
					"summary": "Sets the value of the minRowHeight property."
				},
				"setMoveable": {
					"summary": "Sets the value of the moveable property."
				},
				"setMoving": {
					"summary": "Sets the value of the moving property."
				},
				"setOverScrollMode": {
					"summary": "Sets the value of the overScrollMode property."
				},
				"setRefreshControl": {
					"summary": "Sets the value of the refreshControl property."
				},
				"setRowHeight": {
					"summary": "Sets the value of the rowHeight property."
				},
				"setScrollIndicatorStyle": {
					"summary": "Sets the value of the scrollIndicatorStyle property."
				},
				"setScrollable": {
					"summary": "Sets the value of the scrollable property."
				},
				"setScrollsToTop": {
					"summary": "Sets the value of the scrollsToTop property."
				},
				"setSearch": {
					"summary": "Sets the value of the search property."
				},
				"setSearchAsChild": {
					"summary": "Sets the value of the searchAsChild property."
				},
				"setSearchHidden": {
					"summary": "Sets the value of the searchHidden property."
				},
				"setSections": {
					"summary": "Sets the value of the sections property."
				},
				"setSeparatorColor": {
					"summary": "Sets the value of the separatorColor property."
				},
				"setSeparatorInsets": {
					"summary": "Sets the value of the separatorInsets property."
				},
				"setSeparatorStyle": {
					"summary": "Sets the value of the separatorStyle property."
				},
				"setShowVerticalScrollIndicator": {
					"summary": "Sets the value of the showVerticalScrollIndicator property."
				},
				"setStyle": {
					"summary": "Sets the value of the style property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				},
				"updateRow": {
					"summary": "Updates an existing row, optionally with animation."
				},
				"updateSection": {
					"summary": "Updates an existing section, optionally with animation."
				}
			}
		},
		"Ti.UI.Button": {
			"parent": "Ti.UI.View",
			"summary": "A button widget that has four states: normal, disabled, focused and selected.",
			"properties": {
				"color": {
					"summary": "Default button text color, as a color name or hex triplet."
				},
				"disabledColor": {
					"summary": "Text color of the button in its disabled state, as a color name or hex triplet."
				},
				"enabled": {
					"summary": "Set to true to enable the button, false to disable the button."
				},
				"font": {
					"summary": "Font to use for the button text."
				},
				"image": {
					"summary": "Image to display on the button, specified as a local path, URL or a Blob."
				},
				"selectedColor": {
					"summary": "Button text color used to indicate the selected state, as a color name or hex triplet."
				},
				"shadowColor": {
					"summary": "Shadow color of the title, as a color name or hex triplet."
				},
				"shadowOffset": {
					"summary": "Shadow offset of the title, as a dictionary with the properties x and y."
				},
				"shadowRadius": {
					"summary": "Shadow radius of the title."
				},
				"style": {
					"summary": "Style constant for the button, as defined in Ti.UI.iPhone.SystemButtonStyle."
				},
				"systemButton": {
					"summary": "Specifies an iOS system button appearance, as defined in Ti.UI.iPhone.SystemButton."
				},
				"textAlign": {
					"summary": "Text alignment, specified using one of the Ti.UI text alignment constants."
				},
				"title": {
					"summary": "Button title."
				},
				"titleid": {
					"summary": "Key identifying a string from the locale file to use for the button title."
				},
				"verticalAlign": {
					"summary": "Vertical alignment for the text field, specified using one of the \nvertical alignment constants from Ti.UI."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getDisabledColor": {
					"summary": "Gets the value of the disabledColor property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getImage": {
					"summary": "Gets the value of the image property."
				},
				"getSelectedColor": {
					"summary": "Gets the value of the selectedColor property."
				},
				"getShadowColor": {
					"summary": "Gets the value of the shadowColor property."
				},
				"getShadowOffset": {
					"summary": "Gets the value of the shadowOffset property."
				},
				"getShadowRadius": {
					"summary": "Gets the value of the shadowRadius property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"getSystemButton": {
					"summary": "Gets the value of the systemButton property."
				},
				"getTextAlign": {
					"summary": "Gets the value of the textAlign property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"getTitleid": {
					"summary": "Gets the value of the titleid property."
				},
				"getVerticalAlign": {
					"summary": "Gets the value of the verticalAlign property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setDisabledColor": {
					"summary": "Sets the value of the disabledColor property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setImage": {
					"summary": "Sets the value of the image property."
				},
				"setSelectedColor": {
					"summary": "Sets the value of the selectedColor property."
				},
				"setShadowColor": {
					"summary": "Sets the value of the shadowColor property."
				},
				"setShadowOffset": {
					"summary": "Sets the value of the shadowOffset property."
				},
				"setShadowRadius": {
					"summary": "Sets the value of the shadowRadius property."
				},
				"setStyle": {
					"summary": "Sets the value of the style property."
				},
				"setSystemButton": {
					"summary": "Sets the value of the systemButton property."
				},
				"setTextAlign": {
					"summary": "Sets the value of the textAlign property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"setTitleid": {
					"summary": "Sets the value of the titleid property."
				},
				"setVerticalAlign": {
					"summary": "Sets the value of the verticalAlign property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.OptionDialog": {
			"parent": "Ti.Proxy",
			"summary": "An option dialog is a modal view that includes a message and one or more option items positioned \nin the middle of the display on Android and at the bottom edge on iOS. On Android, buttons may \nbe added below the options.",
			"properties": {
				"androidView": {
					"summary": "View to load inside the message area, to create a custom layout."
				},
				"buttonNames": {
					"summary": "List of button names."
				},
				"cancel": {
					"summary": "Index to define the cancel option."
				},
				"destructive": {
					"summary": "Index to define the destructive option, indicated by a visual cue when rendered."
				},
				"opaquebackground": {
					"summary": "Boolean value indicating if the option dialog should have an opaque background."
				},
				"options": {
					"summary": "List of option names to display in the dialog."
				},
				"persistent": {
					"summary": "Boolean value indicating if the option dialog should only be cancelled by user gesture or by hide method."
				},
				"selectedIndex": {
					"summary": "Defines the default selected option."
				},
				"title": {
					"summary": "Title of the dialog."
				},
				"titleid": {
					"summary": "Key identifying a string in the locale file to use for the title text."
				}
			},
			"methods": {
				"getAndroidView": {
					"summary": "Gets the value of the androidView property."
				},
				"getButtonNames": {
					"summary": "Gets the value of the buttonNames property."
				},
				"getCancel": {
					"summary": "Gets the value of the cancel property."
				},
				"getDestructive": {
					"summary": "Gets the value of the destructive property."
				},
				"getOpaquebackground": {
					"summary": "Gets the value of the opaquebackground property."
				},
				"getOptions": {
					"summary": "Gets the value of the options property."
				},
				"getPersistent": {
					"summary": "Gets the value of the persistent property."
				},
				"getSelectedIndex": {
					"summary": "Gets the value of the selectedIndex property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"getTitleid": {
					"summary": "Gets the value of the titleid property."
				},
				"hide": {
					"summary": "Hides this dialog."
				},
				"setAndroidView": {
					"summary": "Sets the value of the androidView property."
				},
				"setCancel": {
					"summary": "Sets the value of the cancel property."
				},
				"setOpaquebackground": {
					"summary": "Sets the value of the opaquebackground property."
				},
				"setPersistent": {
					"summary": "Sets the value of the persistent property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				},
				"setTitleid": {
					"summary": "Sets the value of the titleid property."
				},
				"show": {
					"summary": "Shows this dialog."
				}
			}
		},
		"Ti.UI.RefreshControl": {
			"parent": "Ti.Proxy",
			"summary": "The RefreshControl is a representation of the native UIRefreshControl.",
			"properties": {
				"tintColor": {
					"summary": "The tint color for the refresh control, as a color name or hex triplet."
				},
				"title": {
					"summary": "The title of the control."
				}
			},
			"methods": {
				"beginRefreshing": {
					"summary": "Tells the control that a refresh operation was started programmatically."
				},
				"endRefreshing": {
					"summary": "Tells the control that a refresh operation has ended."
				},
				"getTintColor": {
					"summary": "Gets the value of the tintColor property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"setTintColor": {
					"summary": "Sets the value of the tintColor property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				}
			}
		},
		"Ti.UI.EmailDialog": {
			"parent": "Ti.Proxy",
			"summary": "An email dialog is a modal window that allows users to compose and send an email.",
			"properties": {
				"CANCELLED": {
					"summary": "Constant for the CANCELLED status result. On Android, this property exists but is not used.",
					"readOnly": true
				},
				"FAILED": {
					"summary": "Constant for the FAILED status result.",
					"readOnly": true
				},
				"SAVED": {
					"summary": "Constant for the SAVED status result. On Android, this property exists but is not used.",
					"readOnly": true
				},
				"SENT": {
					"summary": "Constant for the SENT status result.",
					"readOnly": true
				},
				"barColor": {
					"summary": "Bar color of the email dialog window, as a color name or hex triplet."
				},
				"bccRecipients": {
					"summary": "Recipients of the email included via the BCC (Blind Carbon Copy) field."
				},
				"ccRecipients": {
					"summary": "Recipients of the email included via the CC (Carbon Copy) field."
				},
				"html": {
					"summary": "Determines whether the email message, specifically the contents of \nmessageBody, should be sent as HTML content type \nrather than plain text."
				},
				"messageBody": {
					"summary": "Email message body."
				},
				"subject": {
					"summary": "Subject line for the email."
				},
				"toRecipients": {
					"summary": "Recipients of the email included via the main TO field."
				}
			},
			"methods": {
				"addAttachment": {
					"summary": "Adds an attachment."
				},
				"getBarColor": {
					"summary": "Gets the value of the barColor property."
				},
				"getBccRecipients": {
					"summary": "Gets the value of the bccRecipients property."
				},
				"getCcRecipients": {
					"summary": "Gets the value of the ccRecipients property."
				},
				"getHtml": {
					"summary": "Gets the value of the html property."
				},
				"getMessageBody": {
					"summary": "Gets the value of the messageBody property."
				},
				"getSubject": {
					"summary": "Gets the value of the subject property."
				},
				"getToRecipients": {
					"summary": "Gets the value of the toRecipients property."
				},
				"isSupported": {
					"summary": "Indicates whether sending email is supported by the system."
				},
				"open": {
					"summary": "Opens this email dialog."
				},
				"setBarColor": {
					"summary": "Sets the value of the barColor property."
				},
				"setBccRecipients": {
					"summary": "Sets the value of the bccRecipients property."
				},
				"setCcRecipients": {
					"summary": "Sets the value of the ccRecipients property."
				},
				"setHtml": {
					"summary": "Sets the value of the html property."
				},
				"setMessageBody": {
					"summary": "Sets the value of the messageBody property."
				},
				"setSubject": {
					"summary": "Sets the value of the subject property."
				},
				"setToRecipients": {
					"summary": "Sets the value of the toRecipients property."
				}
			}
		},
		"Ti.UI.ImageView": {
			"parent": "Ti.UI.View",
			"summary": "A view to display a single image or series of animated images. ",
			"properties": {
				"animating": {
					"summary": "Indicates whether animation is running.",
					"readOnly": true
				},
				"autorotate": {
					"summary": "Indicates whether the image should be rotated based on exif orientation data. \nBy default, this is false on android and true on iOS. \nThe auto rotate behavior is not supported on Mobile Web and Tizen."
				},
				"decodeRetries": {
					"summary": "Number of times to retry decoding the bitmap at a URL."
				},
				"defaultImage": {
					"summary": "Local path to the default image to display while loading a remote image."
				},
				"duration": {
					"summary": "Amount of time in milliseconds to animate one cycle."
				},
				"enableZoomControls": {
					"summary": "Show zoom controls when the user touches the image view."
				},
				"enabled": {
					"summary": "Determines if the view is enabled or disabled."
				},
				"hires": {
					"summary": "Set to true to prevent scaling of 2x-resolution remote images for Retina \ndisplays."
				},
				"image": {
					"summary": "Image to display."
				},
				"images": {
					"summary": "Array of images to animate, defined using local filesystem paths, File objects, \nremote URLs (Android only), or Blob objects containing image data. Blob and File \nobjects are not supported on Mobile Web."
				},
				"paused": {
					"summary": "Indicates whether the animation is paused.",
					"readOnly": true
				},
				"preventDefaultImage": {
					"summary": "Prevent the default image from being displayed while loading a remote image. This property \nis ignored when the defaultImage property is set."
				},
				"repeatCount": {
					"summary": "Number of times to repeat the image animation."
				},
				"reverse": {
					"summary": "Run the animation in reverse."
				},
				"url": {
					"summary": "URL to the image to display."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getAnimating": {
					"summary": "Gets the value of the animating property."
				},
				"getAutorotate": {
					"summary": "Gets the value of the autorotate property."
				},
				"getDecodeRetries": {
					"summary": "Gets the value of the decodeRetries property."
				},
				"getDefaultImage": {
					"summary": "Gets the value of the defaultImage property."
				},
				"getDuration": {
					"summary": "Gets the value of the duration property."
				},
				"getEnableZoomControls": {
					"summary": "Gets the value of the enableZoomControls property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getHires": {
					"summary": "Gets the value of the hires property."
				},
				"getImage": {
					"summary": "Gets the value of the image property."
				},
				"getImages": {
					"summary": "Gets the value of the images property."
				},
				"getPaused": {
					"summary": "Gets the value of the paused property."
				},
				"getPreventDefaultImage": {
					"summary": "Gets the value of the preventDefaultImage property."
				},
				"getRepeatCount": {
					"summary": "Gets the value of the repeatCount property."
				},
				"getReverse": {
					"summary": "Gets the value of the reverse property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"pause": {
					"summary": "Pauses a running animation. Use resume method to continue."
				},
				"resume": {
					"summary": "Resumes an animation from a pause state."
				},
				"setDecodeRetries": {
					"summary": "Sets the value of the decodeRetries property."
				},
				"setDefaultImage": {
					"summary": "Sets the value of the defaultImage property."
				},
				"setDuration": {
					"summary": "Sets the value of the duration property."
				},
				"setEnableZoomControls": {
					"summary": "Sets the value of the enableZoomControls property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setHires": {
					"summary": "Sets the value of the hires property."
				},
				"setImage": {
					"summary": "Sets the value of the image property."
				},
				"setImages": {
					"summary": "Sets the value of the images property."
				},
				"setPreventDefaultImage": {
					"summary": "Sets the value of the preventDefaultImage property."
				},
				"setRepeatCount": {
					"summary": "Sets the value of the repeatCount property."
				},
				"setReverse": {
					"summary": "Sets the value of the reverse property."
				},
				"setUrl": {
					"summary": "Sets the value of the url property."
				},
				"start": {
					"summary": "Starts the image animation. On Android and Mobile Web, also resets index to the first image."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"stop": {
					"summary": "Stops a running animation. On iOS and Mobile Web, also resets index to the first image."
				},
				"toBlob": {
					"summary": "Returns the image as a Blob object."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.MaskedImage": {
			"parent": "Ti.UI.View",
			"summary": "A control that displays an image composited with a background image or color.",
			"properties": {
				"image": {
					"summary": "Image drawn as the Foreground image."
				},
				"mask": {
					"summary": "Image drawn as the background image."
				},
				"mode": {
					"summary": "Blend mode to use to combine layers."
				},
				"tint": {
					"summary": "Color to combine with the image, as a color name or hex triplet."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getImage": {
					"summary": "Gets the value of the image property."
				},
				"getMask": {
					"summary": "Gets the value of the mask property."
				},
				"getMode": {
					"summary": "Gets the value of the mode property."
				},
				"getTint": {
					"summary": "Gets the value of the tint property."
				},
				"setImage": {
					"summary": "Sets the value of the image property."
				},
				"setMask": {
					"summary": "Sets the value of the mask property."
				},
				"setMode": {
					"summary": "Sets the value of the mode property."
				},
				"setTint": {
					"summary": "Sets the value of the tint property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.ProgressBar": {
			"parent": "Ti.UI.View",
			"summary": "A progress bar.",
			"properties": {
				"color": {
					"summary": "Color of the progress bar text, as a color name or hex triplet."
				},
				"enabled": {
					"summary": "Determines if the view is enabled or disabled."
				},
				"font": {
					"summary": "Font for the progress bar text."
				},
				"max": {
					"summary": "Maximum value of the progress bar."
				},
				"message": {
					"summary": "Progress bar text."
				},
				"min": {
					"summary": "Minimum value of the progress bar."
				},
				"style": {
					"summary": "Style of the progress bar."
				},
				"value": {
					"summary": "Current value of the progress bar."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getMax": {
					"summary": "Gets the value of the max property."
				},
				"getMessage": {
					"summary": "Gets the value of the message property."
				},
				"getMin": {
					"summary": "Gets the value of the min property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setMax": {
					"summary": "Sets the value of the max property."
				},
				"setMessage": {
					"summary": "Sets the value of the message property."
				},
				"setMin": {
					"summary": "Sets the value of the min property."
				},
				"setStyle": {
					"summary": "Sets the value of the style property."
				},
				"setValue": {
					"summary": "Sets the value of the value property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.MobileWeb.TableViewSeparatorStyle": {
			"parent": "Ti.Proxy",
			"summary": "A set of constants for the style that can be used for the separatorStyle property of \nTi.UI.TableView.",
			"properties": {
				"NONE": {
					"summary": "The separator cell has no distinct style.",
					"readOnly": true
				},
				"SINGLE_LINE": {
					"summary": "The separator cell has a single line running across its width (default.)",
					"readOnly": true
				}
			},
			"methods": {}
		},
		"Ti.UI.MobileWeb.NavigationGroup": {
			"parent": "Ti.UI.View",
			"summary": "A Navigation Group implements a specialized view that manages the navigation of hierarchical \ncontent.",
			"properties": {
				"navBarAtTop": {
					"summary": "Specifies whether the navigation should be at the top of the screen or the bottom of the screen."
				},
				"window": {
					"summary": "Root window to add to this navigation group."
				}
			},
			"methods": {
				"close": {
					"summary": "Closes a window and removes it from the navigation group."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getNavBarAtTop": {
					"summary": "Gets the value of the navBarAtTop property."
				},
				"getWindow": {
					"summary": "Gets the value of the window property."
				},
				"open": {
					"summary": "Opens a window within the navigation group."
				},
				"setNavBarAtTop": {
					"summary": "Sets the value of the navBarAtTop property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.Label": {
			"parent": "Ti.UI.View",
			"summary": "A text label, with optional background image.",
			"properties": {
				"attributedString": {
					"summary": "Specify an attributed string for the label."
				},
				"autoLink": {
					"summary": "Automatically convert certain text items in the label to clickable links."
				},
				"backgroundPaddingBottom": {
					"summary": "Number of pixels to extend the background image past the label on the bottom."
				},
				"backgroundPaddingLeft": {
					"summary": "Number of pixels to extend the background image past the label on the left."
				},
				"backgroundPaddingRight": {
					"summary": "Number of pixels to extend the background image past the label on the right."
				},
				"backgroundPaddingTop": {
					"summary": "Number of pixels to extend the background image past the label on the top."
				},
				"color": {
					"summary": "Color of the label text, as a color name or hex triplet."
				},
				"ellipsize": {
					"summary": "Turn on/off the addition of ellipses at the end of the label if the text is too large to fit."
				},
				"enabled": {
					"summary": "Determines if the view is enabled or disabled."
				},
				"font": {
					"summary": "Font to use for the label text."
				},
				"highlightedColor": {
					"summary": "Color of the label when in the highlighted state, as a color name or hex triplet."
				},
				"html": {
					"summary": "Simple HTML formatting."
				},
				"includeFontPadding": {
					"summary": "Includes extra top and bottom padding to make room for accents that go above normal ascent and descent."
				},
				"minimumFontSize": {
					"summary": "Minimum font size when the font is sized based on the contents."
				},
				"shadowColor": {
					"summary": "Shadow color of the text, as a color name or hex triplet."
				},
				"shadowOffset": {
					"summary": "Shadow offset of the text, as a dictionary with the properties x and y."
				},
				"shadowRadius": {
					"summary": "Shadow radius of the text."
				},
				"text": {
					"summary": "Label text."
				},
				"textAlign": {
					"summary": "Text alignment."
				},
				"textid": {
					"summary": "Key identifying a string from the locale file to use for the label text."
				},
				"verticalAlign": {
					"summary": "Vertical text alignment, specified using one of the  vertical alignment constants\nfrom Ti.UI."
				},
				"wordWrap": {
					"summary": "Enable or disable word wrapping in the label."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getAttributedString": {
					"summary": "Gets the value of the attributedString property."
				},
				"getAutoLink": {
					"summary": "Gets the value of the autoLink property."
				},
				"getBackgroundPaddingBottom": {
					"summary": "Gets the value of the backgroundPaddingBottom property."
				},
				"getBackgroundPaddingLeft": {
					"summary": "Gets the value of the backgroundPaddingLeft property."
				},
				"getBackgroundPaddingRight": {
					"summary": "Gets the value of the backgroundPaddingRight property."
				},
				"getBackgroundPaddingTop": {
					"summary": "Gets the value of the backgroundPaddingTop property."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getEllipsize": {
					"summary": "Gets the value of the ellipsize property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getHighlightedColor": {
					"summary": "Gets the value of the highlightedColor property."
				},
				"getHtml": {
					"summary": "Gets the value of the html property."
				},
				"getIncludeFontPadding": {
					"summary": "Gets the value of the includeFontPadding property."
				},
				"getMinimumFontSize": {
					"summary": "Gets the value of the minimumFontSize property."
				},
				"getShadowColor": {
					"summary": "Gets the value of the shadowColor property."
				},
				"getShadowOffset": {
					"summary": "Gets the value of the shadowOffset property."
				},
				"getShadowRadius": {
					"summary": "Gets the value of the shadowRadius property."
				},
				"getText": {
					"summary": "Gets the value of the text property."
				},
				"getTextAlign": {
					"summary": "Gets the value of the textAlign property."
				},
				"getTextid": {
					"summary": "Gets the value of the textid property."
				},
				"getVerticalAlign": {
					"summary": "Gets the value of the verticalAlign property."
				},
				"getWordWrap": {
					"summary": "Gets the value of the wordWrap property."
				},
				"setAttributedString": {
					"summary": "Sets the value of the attributedString property."
				},
				"setAutoLink": {
					"summary": "Sets the value of the autoLink property."
				},
				"setBackgroundPaddingBottom": {
					"summary": "Sets the value of the backgroundPaddingBottom property."
				},
				"setBackgroundPaddingLeft": {
					"summary": "Sets the value of the backgroundPaddingLeft property."
				},
				"setBackgroundPaddingRight": {
					"summary": "Sets the value of the backgroundPaddingRight property."
				},
				"setBackgroundPaddingTop": {
					"summary": "Sets the value of the backgroundPaddingTop property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setEllipsize": {
					"summary": "Sets the value of the ellipsize property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setHighlightedColor": {
					"summary": "Sets the value of the highlightedColor property."
				},
				"setHtml": {
					"summary": "Sets the value of the html property."
				},
				"setIncludeFontPadding": {
					"summary": "Sets the value of the includeFontPadding property."
				},
				"setMinimumFontSize": {
					"summary": "Sets the value of the minimumFontSize property."
				},
				"setShadowColor": {
					"summary": "Sets the value of the shadowColor property."
				},
				"setShadowOffset": {
					"summary": "Sets the value of the shadowOffset property."
				},
				"setShadowRadius": {
					"summary": "Sets the value of the shadowRadius property."
				},
				"setText": {
					"summary": "Sets the value of the text property."
				},
				"setTextAlign": {
					"summary": "Sets the value of the textAlign property."
				},
				"setTextid": {
					"summary": "Sets the value of the textid property."
				},
				"setVerticalAlign": {
					"summary": "Sets the value of the verticalAlign property."
				},
				"setWordWrap": {
					"summary": "Sets the value of the wordWrap property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.SearchBar": {
			"parent": "Ti.UI.View",
			"summary": "A specialized text field for entering search text.",
			"properties": {
				"autocapitalization": {
					"summary": "Determines how text is capitalized during typing."
				},
				"autocorrect": {
					"summary": "Determines whether the text in the search bar is autocorrected during typing."
				},
				"barColor": {
					"summary": "Bar color of the search bar view, as a color name or hex triplet."
				},
				"enabled": {
					"summary": "Determines if the view is enabled or disabled."
				},
				"hintText": {
					"summary": "Text to show when the search bar field is not focused."
				},
				"hinttextid": {
					"summary": "Key identifying a string from the locale file to use for the\nhintText property."
				},
				"keyboardType": {
					"summary": "Keyboard type constant to use when the field is focused."
				},
				"prompt": {
					"summary": "Single line of text displayed at the top of the search bar."
				},
				"promptid": {
					"summary": "Key identifying a string from the locale file to use for the\nprompt property."
				},
				"showBookmark": {
					"summary": "Determines whether the bookmark button is displayed."
				},
				"showCancel": {
					"summary": "Determines whether the cancel button is displayed."
				},
				"value": {
					"summary": "Value of the search bar."
				}
			},
			"methods": {
				"blur": {
					"summary": "Causes the search bar to lose focus."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"focus": {
					"summary": "Causes the search bar to gain focus."
				},
				"getAutocapitalization": {
					"summary": "Gets the value of the autocapitalization property."
				},
				"getAutocorrect": {
					"summary": "Gets the value of the autocorrect property."
				},
				"getBarColor": {
					"summary": "Gets the value of the barColor property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getHintText": {
					"summary": "Gets the value of the hintText property."
				},
				"getHinttextid": {
					"summary": "Gets the value of the hinttextid property."
				},
				"getKeyboardType": {
					"summary": "Gets the value of the keyboardType property."
				},
				"getPrompt": {
					"summary": "Gets the value of the prompt property."
				},
				"getPromptid": {
					"summary": "Gets the value of the promptid property."
				},
				"getShowBookmark": {
					"summary": "Gets the value of the showBookmark property."
				},
				"getShowCancel": {
					"summary": "Gets the value of the showCancel property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"setAutocapitalization": {
					"summary": "Sets the value of the autocapitalization property."
				},
				"setAutocorrect": {
					"summary": "Sets the value of the autocorrect property."
				},
				"setBarColor": {
					"summary": "Sets the value of the barColor property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setHintText": {
					"summary": "Sets the value of the hintText property."
				},
				"setHinttextid": {
					"summary": "Sets the value of the hinttextid property."
				},
				"setKeyboardType": {
					"summary": "Sets the value of the keyboardType property."
				},
				"setPrompt": {
					"summary": "Sets the value of the prompt property."
				},
				"setPromptid": {
					"summary": "Sets the value of the promptid property."
				},
				"setShowBookmark": {
					"summary": "Sets the value of the showBookmark property."
				},
				"setShowCancel": {
					"summary": "Shows or hides the cancel button."
				},
				"setValue": {
					"summary": "Sets the value of the value property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.SMSDialog": {
			"parent": "Ti.Proxy",
			"summary": "An SMS dialog is a modal window that allows users to compose and send an SMS.",
			"properties": {
				"CANCELLED": {
					"summary": "Constant for the CANCELLED status result.",
					"readOnly": true
				},
				"FAILED": {
					"summary": "Constant for the FAILED status result.",
					"readOnly": true
				},
				"SENT": {
					"summary": "Constant for the SENT status result.",
					"readOnly": true
				},
				"messageBody": {
					"summary": "SMS message body."
				},
				"toRecipients": {
					"summary": "Recipients of the SMS included via the main TO field."
				}
			},
			"methods": {
				"getMessageBody": {
					"summary": "Gets the value of the messageBody property."
				},
				"getToRecipients": {
					"summary": "Gets the value of the toRecipients property."
				},
				"isSupported": {
					"summary": "Indicates whether sending SMS is supported by the system."
				},
				"open": {
					"summary": "Opens this SMS dialog."
				},
				"setMessageBody": {
					"summary": "Sets the value of the messageBody property."
				},
				"setToRecipients": {
					"summary": "Sets the value of the toRecipients property."
				}
			}
		},
		"Ti.UI.TableViewSection": {
			"parent": "Ti.Proxy",
			"summary": "A table view section is a container within a table used to organize table view rows.",
			"properties": {
				"footerTitle": {
					"summary": "Title of this section footer."
				},
				"footerView": {
					"summary": "View to use for this section footer."
				},
				"headerTitle": {
					"summary": "Title of this section header."
				},
				"headerView": {
					"summary": "View to use for this section header."
				},
				"rowCount": {
					"summary": "Number of rows in this section.",
					"readOnly": true
				},
				"rows": {
					"summary": "Rows in this section.",
					"readOnly": true
				}
			},
			"methods": {
				"add": {
					"summary": "Adds a table view row to this section."
				},
				"getFooterTitle": {
					"summary": "Gets the value of the footerTitle property."
				},
				"getFooterView": {
					"summary": "Gets the value of the footerView property."
				},
				"getHeaderTitle": {
					"summary": "Gets the value of the headerTitle property."
				},
				"getHeaderView": {
					"summary": "Gets the value of the headerView property."
				},
				"getRowCount": {
					"summary": "Gets the value of the rowCount property."
				},
				"getRows": {
					"summary": "Gets the value of the rows property."
				},
				"remove": {
					"summary": "Removes a table view row from this section."
				},
				"rowAtIndex": {
					"summary": "Returns a row in this section."
				},
				"setFooterTitle": {
					"summary": "Sets the value of the footerTitle property."
				},
				"setFooterView": {
					"summary": "Sets the value of the footerView property."
				},
				"setHeaderTitle": {
					"summary": "Sets the value of the headerTitle property."
				},
				"setHeaderView": {
					"summary": "Sets the value of the headerView property."
				}
			}
		},
		"Ti.UI.View": {
			"parent": "Ti.Proxy",
			"summary": "An empty drawing surface or container",
			"properties": {
				"accessibilityHidden": {
					"summary": "Whether the view should be \"hidden\" from (i.e., ignored by) the accessibility service."
				},
				"accessibilityHint": {
					"summary": "Briefly describes what performing an action (such as a click) on the view will do."
				},
				"accessibilityLabel": {
					"summary": "A succint label identifying the view for the device's accessibility service."
				},
				"accessibilityValue": {
					"summary": "A string describing the value (if any) of the view for the device's accessibility service."
				},
				"anchorPoint": {
					"summary": "Coordinate of the view about which to pivot an animation."
				},
				"animatedCenter": {
					"summary": "Current position of the view during an animation.",
					"readOnly": true
				},
				"backgroundColor": {
					"summary": "Background color of the view, as a color name or hex triplet."
				},
				"backgroundDisabledColor": {
					"summary": "Disabled background color of the view, as a color name or hex triplet."
				},
				"backgroundDisabledImage": {
					"summary": "Disabled background image for the view, specified as a local file path or URL."
				},
				"backgroundFocusedColor": {
					"summary": "Focused background color of the view, as a color name or hex triplet."
				},
				"backgroundFocusedImage": {
					"summary": "Focused background image for the view, specified as a local file path or URL."
				},
				"backgroundGradient": {
					"summary": "A background gradient for the view."
				},
				"backgroundImage": {
					"summary": "Background image for the view, specified as a local file path or URL."
				},
				"backgroundLeftCap": {
					"summary": "Size of the left end cap."
				},
				"backgroundRepeat": {
					"summary": "Determines whether to tile a background across a view."
				},
				"backgroundSelectedColor": {
					"summary": "Selected background color of the view, as a color name or hex triplet."
				},
				"backgroundSelectedImage": {
					"summary": "Selected background image url for the view, specified as a local file path or URL."
				},
				"backgroundTopCap": {
					"summary": "Size of the top end cap."
				},
				"borderColor": {
					"summary": "Border color of the view, as a color name or hex triplet."
				},
				"borderRadius": {
					"summary": "Radius for the rounded corners of the view's border."
				},
				"borderWidth": {
					"summary": "Border width of the view."
				},
				"bottom": {
					"summary": "View's bottom position, in platform-specific units."
				},
				"center": {
					"summary": "View's center position, in the parent view's coordinates."
				},
				"children": {
					"summary": "Array of this view's child views.",
					"readOnly": true
				},
				"clipMode": {
					"summary": "View's clipping behavior."
				},
				"enabled": {
					"summary": "Determines if the view is enabled or disabled."
				},
				"focusable": {
					"summary": "Whether view should be focusable while navigating with the trackball."
				},
				"height": {
					"summary": "View height, in platform-specific units."
				},
				"horizontalWrap": {
					"summary": "Determines whether the layout has wrapping behavior."
				},
				"keepScreenOn": {
					"summary": "Determines whether to keep the device screen on."
				},
				"layout": {
					"summary": "Specifies how the view positions its children. \nOne of: 'composite', 'vertical', or 'horizontal'."
				},
				"left": {
					"summary": "View's left position, in platform-specific units."
				},
				"opacity": {
					"summary": "Opacity of this view, from 0.0 (transparent) to 1.0 (opaque)."
				},
				"overrideCurrentAnimation": {
					"summary": "When on, animate call overrides current animation if applicable."
				},
				"pullBackgroundColor": {
					"summary": "Background color of the wrapper view when this view is used as either Ti.UI.ListView.pullView or Ti.UI.TableView.headerPullView."
				},
				"rect": {
					"summary": "The bounding box of the view relative to its parent, in system units.",
					"readOnly": true
				},
				"right": {
					"summary": "View's right position, in platform-specific units."
				},
				"size": {
					"summary": "The size of the view in system units. ",
					"readOnly": true
				},
				"softKeyboardOnFocus": {
					"summary": "Determines keyboard behavior when this view is focused."
				},
				"tintColor": {
					"summary": "The view's tintColor. This property is applicable on iOS 7 and greater."
				},
				"top": {
					"summary": "The view's top position."
				},
				"touchEnabled": {
					"summary": "Determines whether view should receive touch events."
				},
				"transform": {
					"summary": "Transformation matrix to apply to the view."
				},
				"viewShadowColor": {
					"summary": "Determines the color of the shadow."
				},
				"viewShadowOffset": {
					"summary": "Determines the offset for the shadow of the view."
				},
				"viewShadowRadius": {
					"summary": "Determines the blur radius used to create the shadow."
				},
				"visible": {
					"summary": "Determines whether the view is visible."
				},
				"width": {
					"summary": "View's width, in platform-specific units."
				},
				"zIndex": {
					"summary": "Z-index stack order position, relative to other sibling views."
				}
			},
			"methods": {
				"add": {
					"summary": "Adds a child to this view's hierarchy."
				},
				"animate": {
					"summary": "Animates this view."
				},
				"convertPointToView": {
					"summary": "Translates a point from this view's coordinate system to another view's coordinate system."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getAccessibilityHidden": {
					"summary": "Gets the value of the accessibilityHidden property."
				},
				"getAccessibilityHint": {
					"summary": "Gets the value of the accessibilityHint property."
				},
				"getAccessibilityLabel": {
					"summary": "Gets the value of the accessibilityLabel property."
				},
				"getAccessibilityValue": {
					"summary": "Gets the value of the accessibilityValue property."
				},
				"getAnchorPoint": {
					"summary": "Gets the value of the anchorPoint property."
				},
				"getAnimatedCenter": {
					"summary": "Gets the value of the animatedCenter property."
				},
				"getBackgroundColor": {
					"summary": "Gets the value of the backgroundColor property."
				},
				"getBackgroundDisabledColor": {
					"summary": "Gets the value of the backgroundDisabledColor property."
				},
				"getBackgroundDisabledImage": {
					"summary": "Gets the value of the backgroundDisabledImage property."
				},
				"getBackgroundFocusedColor": {
					"summary": "Gets the value of the backgroundFocusedColor property."
				},
				"getBackgroundFocusedImage": {
					"summary": "Gets the value of the backgroundFocusedImage property."
				},
				"getBackgroundGradient": {
					"summary": "Gets the value of the backgroundGradient property."
				},
				"getBackgroundImage": {
					"summary": "Gets the value of the backgroundImage property."
				},
				"getBackgroundLeftCap": {
					"summary": "Gets the value of the backgroundLeftCap property."
				},
				"getBackgroundRepeat": {
					"summary": "Gets the value of the backgroundRepeat property."
				},
				"getBackgroundSelectedColor": {
					"summary": "Gets the value of the backgroundSelectedColor property."
				},
				"getBackgroundSelectedImage": {
					"summary": "Gets the value of the backgroundSelectedImage property."
				},
				"getBackgroundTopCap": {
					"summary": "Gets the value of the backgroundTopCap property."
				},
				"getBorderColor": {
					"summary": "Gets the value of the borderColor property."
				},
				"getBorderRadius": {
					"summary": "Gets the value of the borderRadius property."
				},
				"getBorderWidth": {
					"summary": "Gets the value of the borderWidth property."
				},
				"getBottom": {
					"summary": "Gets the value of the bottom property."
				},
				"getCenter": {
					"summary": "Gets the value of the center property."
				},
				"getChildren": {
					"summary": "Gets the value of the children property."
				},
				"getClipMode": {
					"summary": "Gets the value of the clipMode property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getFocusable": {
					"summary": "Gets the value of the focusable property."
				},
				"getHeight": {
					"summary": "Gets the value of the height property."
				},
				"getHorizontalWrap": {
					"summary": "Gets the value of the horizontalWrap property."
				},
				"getKeepScreenOn": {
					"summary": "Gets the value of the keepScreenOn property."
				},
				"getLayout": {
					"summary": "Gets the value of the layout property."
				},
				"getLeft": {
					"summary": "Gets the value of the left property."
				},
				"getOpacity": {
					"summary": "Gets the value of the opacity property."
				},
				"getOverrideCurrentAnimation": {
					"summary": "Gets the value of the overrideCurrentAnimation property."
				},
				"getPullBackgroundColor": {
					"summary": "Gets the value of the pullBackgroundColor property."
				},
				"getRect": {
					"summary": "Gets the value of the rect property."
				},
				"getRight": {
					"summary": "Gets the value of the right property."
				},
				"getSize": {
					"summary": "Gets the value of the size property."
				},
				"getSoftKeyboardOnFocus": {
					"summary": "Gets the value of the softKeyboardOnFocus property."
				},
				"getTintColor": {
					"summary": "Gets the value of the tintColor property."
				},
				"getTop": {
					"summary": "Gets the value of the top property."
				},
				"getTouchEnabled": {
					"summary": "Gets the value of the touchEnabled property."
				},
				"getTransform": {
					"summary": "Gets the value of the transform property."
				},
				"getViewShadowColor": {
					"summary": "Gets the value of the viewShadowColor property."
				},
				"getViewShadowOffset": {
					"summary": "Gets the value of the viewShadowOffset property."
				},
				"getViewShadowRadius": {
					"summary": "Gets the value of the viewShadowRadius property."
				},
				"getVisible": {
					"summary": "Gets the value of the visible property."
				},
				"getWidth": {
					"summary": "Gets the value of the width property."
				},
				"getZIndex": {
					"summary": "Gets the value of the zIndex property."
				},
				"hide": {
					"summary": "Hides this view."
				},
				"remove": {
					"summary": "Removes a child view from this view's hierarchy."
				},
				"removeAllChildren": {
					"summary": "Removes all child views from this view's hierarchy."
				},
				"setAccessibilityHidden": {
					"summary": "Sets the value of the accessibilityHidden property."
				},
				"setAccessibilityHint": {
					"summary": "Sets the value of the accessibilityHint property."
				},
				"setAccessibilityLabel": {
					"summary": "Sets the value of the accessibilityLabel property."
				},
				"setAccessibilityValue": {
					"summary": "Sets the value of the accessibilityValue property."
				},
				"setAnchorPoint": {
					"summary": "Sets the value of the anchorPoint property."
				},
				"setBackgroundColor": {
					"summary": "Sets the value of the backgroundColor property."
				},
				"setBackgroundDisabledColor": {
					"summary": "Sets the value of the backgroundDisabledColor property."
				},
				"setBackgroundDisabledImage": {
					"summary": "Sets the value of the backgroundDisabledImage property."
				},
				"setBackgroundFocusedColor": {
					"summary": "Sets the value of the backgroundFocusedColor property."
				},
				"setBackgroundFocusedImage": {
					"summary": "Sets the value of the backgroundFocusedImage property."
				},
				"setBackgroundGradient": {
					"summary": "Sets the value of the backgroundGradient property."
				},
				"setBackgroundImage": {
					"summary": "Sets the value of the backgroundImage property."
				},
				"setBackgroundLeftCap": {
					"summary": "Sets the value of the backgroundLeftCap property."
				},
				"setBackgroundRepeat": {
					"summary": "Sets the value of the backgroundRepeat property."
				},
				"setBackgroundSelectedColor": {
					"summary": "Sets the value of the backgroundSelectedColor property."
				},
				"setBackgroundSelectedImage": {
					"summary": "Sets the value of the backgroundSelectedImage property."
				},
				"setBackgroundTopCap": {
					"summary": "Sets the value of the backgroundTopCap property."
				},
				"setBorderColor": {
					"summary": "Sets the value of the borderColor property."
				},
				"setBorderRadius": {
					"summary": "Sets the value of the borderRadius property."
				},
				"setBorderWidth": {
					"summary": "Sets the value of the borderWidth property."
				},
				"setBottom": {
					"summary": "Sets the value of the bottom property."
				},
				"setCenter": {
					"summary": "Sets the value of the center property."
				},
				"setClipMode": {
					"summary": "Sets the value of the clipMode property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setFocusable": {
					"summary": "Sets the value of the focusable property."
				},
				"setHeight": {
					"summary": "Sets the value of the height property."
				},
				"setHorizontalWrap": {
					"summary": "Sets the value of the horizontalWrap property."
				},
				"setKeepScreenOn": {
					"summary": "Sets the value of the keepScreenOn property."
				},
				"setLayout": {
					"summary": "Sets the value of the layout property."
				},
				"setLeft": {
					"summary": "Sets the value of the left property."
				},
				"setOpacity": {
					"summary": "Sets the value of the opacity property."
				},
				"setPullBackgroundColor": {
					"summary": "Sets the value of the pullBackgroundColor property."
				},
				"setRight": {
					"summary": "Sets the value of the right property."
				},
				"setSoftKeyboardOnFocus": {
					"summary": "Sets the value of the softKeyboardOnFocus property."
				},
				"setTintColor": {
					"summary": "Sets the value of the tintColor property."
				},
				"setTop": {
					"summary": "Sets the value of the top property."
				},
				"setTouchEnabled": {
					"summary": "Sets the value of the touchEnabled property."
				},
				"setTransform": {
					"summary": "Sets the value of the transform property."
				},
				"setViewShadowColor": {
					"summary": "Sets the value of the viewShadowColor property."
				},
				"setViewShadowOffset": {
					"summary": "Sets the value of the viewShadowOffset property."
				},
				"setViewShadowRadius": {
					"summary": "Sets the value of the viewShadowRadius property."
				},
				"setVisible": {
					"summary": "Sets the value of the visible property."
				},
				"setWidth": {
					"summary": "Sets the value of the width property."
				},
				"setZIndex": {
					"summary": "Sets the value of the zIndex property."
				},
				"show": {
					"summary": "Makes this view visible."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"toImage": {
					"summary": "Returns an image of the rendered view, as a Blob."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.Animation": {
			"parent": "Ti.Proxy",
			"summary": "The Animation object defines an animation that can be applied to a view.",
			"properties": {
				"anchorPoint": {
					"summary": "Coordinate of the view about which to pivot an animation."
				},
				"autoreverse": {
					"summary": "Specifies if the animation should be replayed in reverse upon completion."
				},
				"backgroundColor": {
					"summary": "Value of the backgroundColor property at the end of the animation, as a color name \nor hex triplet."
				},
				"bottom": {
					"summary": "Value of the bottom property at the end of the animation."
				},
				"center": {
					"summary": "Value of the center property at the end of the animation."
				},
				"color": {
					"summary": "Value of the color property at the end of the animation, as a color name or hex triplet."
				},
				"curve": {
					"summary": "Animation curve or easing function to apply to the animation."
				},
				"delay": {
					"summary": "Delay, in milliseconds before starting the animation."
				},
				"duration": {
					"summary": "Duration of the animation, in milliseconds."
				},
				"height": {
					"summary": "Value of the height property at the end of the animation."
				},
				"left": {
					"summary": "Value of the left property at the end of the animation."
				},
				"opacity": {
					"summary": "Value of the opacity property at the end of the animation."
				},
				"opaque": {
					"summary": "Value of the opaque property at the end of the animation."
				},
				"repeat": {
					"summary": "Number of times the animation should be performed."
				},
				"right": {
					"summary": "Value of the right property at the end of the animation."
				},
				"top": {
					"summary": "Value of the top property at the end of the animation."
				},
				"transform": {
					"summary": "Animate the view from its current tranform to the specified transform."
				},
				"transition": {
					"summary": "Transition type to use during a transition animation."
				},
				"view": {
					"summary": "New view to transition to."
				},
				"visible": {
					"summary": "Value of the visible property at the end of the animation."
				},
				"width": {
					"summary": "Value of the width property at the end of the animation."
				},
				"zIndex": {
					"summary": "Value of the zIndex property at the end of the animation."
				}
			},
			"methods": {
				"getAnchorPoint": {
					"summary": "Gets the value of the anchorPoint property."
				},
				"getAutoreverse": {
					"summary": "Gets the value of the autoreverse property."
				},
				"getBackgroundColor": {
					"summary": "Gets the value of the backgroundColor property."
				},
				"getBottom": {
					"summary": "Gets the value of the bottom property."
				},
				"getCenter": {
					"summary": "Gets the value of the center property."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getCurve": {
					"summary": "Gets the value of the curve property."
				},
				"getDelay": {
					"summary": "Gets the value of the delay property."
				},
				"getDuration": {
					"summary": "Gets the value of the duration property."
				},
				"getHeight": {
					"summary": "Gets the value of the height property."
				},
				"getLeft": {
					"summary": "Gets the value of the left property."
				},
				"getOpacity": {
					"summary": "Gets the value of the opacity property."
				},
				"getOpaque": {
					"summary": "Gets the value of the opaque property."
				},
				"getRepeat": {
					"summary": "Gets the value of the repeat property."
				},
				"getRight": {
					"summary": "Gets the value of the right property."
				},
				"getTop": {
					"summary": "Gets the value of the top property."
				},
				"getTransform": {
					"summary": "Gets the value of the transform property."
				},
				"getTransition": {
					"summary": "Gets the value of the transition property."
				},
				"getView": {
					"summary": "Gets the value of the view property."
				},
				"getVisible": {
					"summary": "Gets the value of the visible property."
				},
				"getWidth": {
					"summary": "Gets the value of the width property."
				},
				"getZIndex": {
					"summary": "Gets the value of the zIndex property."
				},
				"setAnchorPoint": {
					"summary": "Sets the value of the anchorPoint property."
				},
				"setAutoreverse": {
					"summary": "Sets the value of the autoreverse property."
				},
				"setBackgroundColor": {
					"summary": "Sets the value of the backgroundColor property."
				},
				"setBottom": {
					"summary": "Sets the value of the bottom property."
				},
				"setCenter": {
					"summary": "Sets the value of the center property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setCurve": {
					"summary": "Sets the value of the curve property."
				},
				"setDelay": {
					"summary": "Sets the value of the delay property."
				},
				"setDuration": {
					"summary": "Sets the value of the duration property."
				},
				"setHeight": {
					"summary": "Sets the value of the height property."
				},
				"setLeft": {
					"summary": "Sets the value of the left property."
				},
				"setOpacity": {
					"summary": "Sets the value of the opacity property."
				},
				"setOpaque": {
					"summary": "Sets the value of the opaque property."
				},
				"setRepeat": {
					"summary": "Sets the value of the repeat property."
				},
				"setRight": {
					"summary": "Sets the value of the right property."
				},
				"setTop": {
					"summary": "Sets the value of the top property."
				},
				"setTransform": {
					"summary": "Sets the value of the transform property."
				},
				"setTransition": {
					"summary": "Sets the value of the transition property."
				},
				"setView": {
					"summary": "Sets the value of the view property."
				},
				"setVisible": {
					"summary": "Sets the value of the visible property."
				},
				"setWidth": {
					"summary": "Sets the value of the width property."
				},
				"setZIndex": {
					"summary": "Sets the value of the zIndex property."
				}
			}
		},
		"Ti.UI.Notification": {
			"parent": "Ti.UI.View",
			"summary": "An Android Toast-style notification.",
			"properties": {
				"duration": {
					"summary": "Determines how long the notification stays on screen."
				},
				"enabled": {
					"summary": "Determines if the view is enabled or disabled."
				},
				"horizontalMargin": {
					"summary": "Horizontal placement of the notification, as a fraction of the screen width."
				},
				"message": {
					"summary": "Notification text to display."
				},
				"verticalMargin": {
					"summary": "Vertical placement of the notifcation, as a fraction of the screen height."
				},
				"xOffset": {
					"summary": "X offset from the default position, in pixels."
				},
				"yOffset": {
					"summary": "Y offset from the default position, in pixels."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getDuration": {
					"summary": "Gets the value of the duration property."
				},
				"getEnabled": {
					"summary": "Gets the value of the enabled property."
				},
				"getHorizontalMargin": {
					"summary": "Gets the value of the horizontalMargin property."
				},
				"getMessage": {
					"summary": "Gets the value of the message property."
				},
				"getVerticalMargin": {
					"summary": "Gets the value of the verticalMargin property."
				},
				"getXOffset": {
					"summary": "Gets the value of the xOffset property."
				},
				"getYOffset": {
					"summary": "Gets the value of the yOffset property."
				},
				"setDuration": {
					"summary": "Sets the value of the duration property."
				},
				"setEnabled": {
					"summary": "Sets the value of the enabled property."
				},
				"setHorizontalMargin": {
					"summary": "Sets the value of the horizontalMargin property."
				},
				"setMessage": {
					"summary": "Sets the value of the message property."
				},
				"setVerticalMargin": {
					"summary": "Sets the value of the verticalMargin property."
				},
				"setXOffset": {
					"summary": "Sets the value of the xOffset property."
				},
				"setYOffset": {
					"summary": "Sets the value of the yOffset property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.PickerColumn": {
			"parent": "Ti.UI.View",
			"summary": "A picker column, representing a selectable group of items in a Ti.UI.Picker.",
			"properties": {
				"font": {
					"summary": "Font to use for text."
				},
				"rowCount": {
					"summary": "Number of rows in this column.",
					"readOnly": true
				},
				"rows": {
					"summary": "Rows of this column.",
					"readOnly": true
				},
				"selectedRow": {
					"summary": "The selected row in this column."
				}
			},
			"methods": {
				"addRow": {
					"summary": "Adds a row to this column."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getRowCount": {
					"summary": "Gets the value of the rowCount property."
				},
				"getRows": {
					"summary": "Gets the value of the rows property."
				},
				"getSelectedRow": {
					"summary": "Gets the value of the selectedRow property."
				},
				"removeRow": {
					"summary": "Removes a row from this column."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setSelectedRow": {
					"summary": "Sets the value of the selectedRow property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.UI.ActivityIndicator": {
			"parent": "Ti.Proxy",
			"summary": "An activity indicator that lets the user know an action is taking place.",
			"properties": {
				"bottom": {
					"summary": "Bottom position of the view."
				},
				"color": {
					"summary": "Color of the message text, as a color name or hex triplet."
				},
				"font": {
					"summary": "Font used for the message text."
				},
				"height": {
					"summary": "Width of the view. Only accepts value of Ti.UI.SIZE, which must be explicitly set in order to\ndisplay the message and to position the view correctly."
				},
				"indicatorColor": {
					"summary": "Color of the animated indicator."
				},
				"indicatorDiameter": {
					"summary": "Diameter of the indicator."
				},
				"left": {
					"summary": "Left position of the view."
				},
				"message": {
					"summary": "Message text."
				},
				"messageid": {
					"summary": "Key identifying a string in the locale file to use for the message text."
				},
				"right": {
					"summary": "Right position of the view."
				},
				"style": {
					"summary": "The style for the activity indicator."
				},
				"top": {
					"summary": "Top position of the view."
				},
				"width": {
					"summary": "Width of the view. Only accepts value of Ti.UI.SIZE, which must be explicitly set in order to\ndisplay the message and to position the view correctly."
				}
			},
			"methods": {
				"add": {
					"summary": "Adds a child to this activity indicator's hierarchy."
				},
				"getBottom": {
					"summary": "Gets the value of the bottom property."
				},
				"getColor": {
					"summary": "Gets the value of the color property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getHeight": {
					"summary": "Gets the value of the height property."
				},
				"getIndicatorColor": {
					"summary": "Gets the value of the indicatorColor property."
				},
				"getIndicatorDiameter": {
					"summary": "Gets the value of the indicatorDiameter property."
				},
				"getLeft": {
					"summary": "Gets the value of the left property."
				},
				"getMessage": {
					"summary": "Gets the value of the message property."
				},
				"getMessageid": {
					"summary": "Gets the value of the messageid property."
				},
				"getRight": {
					"summary": "Gets the value of the right property."
				},
				"getStyle": {
					"summary": "Gets the value of the style property."
				},
				"getTop": {
					"summary": "Gets the value of the top property."
				},
				"getWidth": {
					"summary": "Gets the value of the width property."
				},
				"hide": {
					"summary": "Hides the activity indicator and stops the animation."
				},
				"remove": {
					"summary": "Removes a child from this activity indicator's hierarchy."
				},
				"setBottom": {
					"summary": "Sets the value of the bottom property."
				},
				"setColor": {
					"summary": "Sets the value of the color property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setHeight": {
					"summary": "Sets the value of the height property."
				},
				"setIndicatorColor": {
					"summary": "Sets the value of the indicatorColor property."
				},
				"setIndicatorDiameter": {
					"summary": "Sets the value of the indicatorDiameter property."
				},
				"setLeft": {
					"summary": "Sets the value of the left property."
				},
				"setMessage": {
					"summary": "Sets the value of the message property."
				},
				"setMessageid": {
					"summary": "Sets the value of the messageid property."
				},
				"setRight": {
					"summary": "Sets the value of the right property."
				},
				"setStyle": {
					"summary": "Sets the value of the style property."
				},
				"setTop": {
					"summary": "Sets the value of the top property."
				},
				"setWidth": {
					"summary": "Sets the value of the width property."
				},
				"show": {
					"summary": "Shows the activity indicator and starts the animation."
				}
			}
		},
		"Ti.UI.MobileWeb": {
			"parent": "Ti.Module",
			"summary": "The UI capabilities specific to Mobile Web. All events, methods and properties in this namespace \nwill only work on this platform.",
			"properties": {},
			"methods": {
				"createNavigationGroup": {
					"summary": "Creates and returns an instance of Ti.UI.MobileWeb.NavigationGroup."
				}
			}
		},
		"Ti.UI.Picker": {
			"parent": "Ti.UI.View",
			"summary": "A control used to select one or more fixed values.",
			"properties": {
				"calendarViewShown": {
					"summary": "Determines whether the calenderView is visible."
				},
				"columns": {
					"summary": "Columns used for this picker, as an array of Ti.UI.PickerColumn objects."
				},
				"countDownDuration": {
					"summary": "Duration in milliseconds used for a Countdown Timer picker."
				},
				"font": {
					"summary": "Font to use for text."
				},
				"format24": {
					"summary": "Determines whether the Time pickers display in 24-hour or 12-hour clock format."
				},
				"locale": {
					"summary": "Locale used when displaying Date and Time picker values."
				},
				"maxDate": {
					"summary": "Maximum date displayed when a Date picker is in use."
				},
				"minDate": {
					"summary": "Minimum date displayed when a Date picker is in use."
				},
				"minuteInterval": {
					"summary": "Interval in minutes displayed when one of the Time types of pickers is in use."
				},
				"selectionIndicator": {
					"summary": "Determines whether the visual selection indicator is shown."
				},
				"type": {
					"summary": "Determines the type of picker displayed"
				},
				"useSpinner": {
					"summary": "Determines whether the non-native Android control, with a spinning wheel that looks and \nbehaves like the iOS picker, is invoked rather than the default native \"dropdown\" style."
				},
				"value": {
					"summary": "Date and time value for Date pickers."
				},
				"visibleItems": {
					"summary": "Number of visible rows to display. This is only applicable to a plain picker and when the \nuseSpinner is true."
				}
			},
			"methods": {
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getCalendarViewShown": {
					"summary": "Gets the value of the calendarViewShown property."
				},
				"getColumns": {
					"summary": "Gets the value of the columns property."
				},
				"getCountDownDuration": {
					"summary": "Gets the value of the countDownDuration property."
				},
				"getFont": {
					"summary": "Gets the value of the font property."
				},
				"getFormat24": {
					"summary": "Gets the value of the format24 property."
				},
				"getLocale": {
					"summary": "Gets the value of the locale property."
				},
				"getMaxDate": {
					"summary": "Gets the value of the maxDate property."
				},
				"getMinDate": {
					"summary": "Gets the value of the minDate property."
				},
				"getMinuteInterval": {
					"summary": "Gets the value of the minuteInterval property."
				},
				"getSelectedRow": {
					"summary": "Gets the selected row for a column, or null if none exists."
				},
				"getSelectionIndicator": {
					"summary": "Gets the value of the selectionIndicator property."
				},
				"getType": {
					"summary": "Gets the value of the type property."
				},
				"getUseSpinner": {
					"summary": "Gets the value of the useSpinner property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"getVisibleItems": {
					"summary": "Gets the value of the visibleItems property."
				},
				"reloadColumn": {
					"summary": "Repopulates values for a column."
				},
				"setCalendarViewShown": {
					"summary": "Sets the value of the calendarViewShown property."
				},
				"setColumns": {
					"summary": "Sets the value of the columns property."
				},
				"setCountDownDuration": {
					"summary": "Sets the value of the countDownDuration property."
				},
				"setFont": {
					"summary": "Sets the value of the font property."
				},
				"setFormat24": {
					"summary": "Sets the value of the format24 property."
				},
				"setLocale": {
					"summary": "Sets the value of the locale property."
				},
				"setMaxDate": {
					"summary": "Sets the value of the maxDate property."
				},
				"setMinDate": {
					"summary": "Sets the value of the minDate property."
				},
				"setMinuteInterval": {
					"summary": "Sets the value of the minuteInterval property."
				},
				"setSelectedRow": {
					"summary": "Selects a column's row."
				},
				"setSelectionIndicator": {
					"summary": "Sets the value of the selectionIndicator property."
				},
				"setType": {
					"summary": "Sets the value of the type property."
				},
				"setUseSpinner": {
					"summary": "Sets the value of the useSpinner property."
				},
				"setValue": {
					"summary": "Sets the date and time value property for Date pickers."
				},
				"setVisibleItems": {
					"summary": "Sets the value of the visibleItems property."
				},
				"showDatePickerDialog": {
					"summary": "Shows Date picker as a modal dialog."
				},
				"showTimePickerDialog": {
					"summary": "Shows Time picker as a modal dialog."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		}
	},
	"Database": {
		"Ti.Database.ResultSet": {
			"parent": "Ti.Proxy",
			"summary": "The ResultSet instance returned by Ti.Database.DB.execute.",
			"properties": {
				"fieldCount": {
					"summary": "The number of columns in this result set.",
					"readOnly": true
				},
				"rowCount": {
					"summary": "The number of rows in this result set.",
					"readOnly": true
				},
				"validRow": {
					"summary": "Indicates whether the current row is valid.",
					"readOnly": true
				}
			},
			"methods": {
				"close": {
					"summary": "Closes this result set and release resources. Once closed, the result set must no longer \nbe used."
				},
				"field": {
					"summary": "Retrieves the value for the specified field in the current row, \nand casts it to the specified type (String, Integer, Float or Double.)"
				},
				"fieldByName": {
					"summary": "Retrieves the value for the specified field in the current row, \nand casts it to the specified type (String, Integer, Float or Double.)"
				},
				"fieldCount": {
					"summary": "Returns the number of columns in this result set. This method has been removed in Release 3.3.0 of the Ti SDK. Use the fieldCount property instead."
				},
				"fieldName": {
					"summary": "Returns the field name for the specified field index."
				},
				"getFieldCount": {
					"summary": "Gets the value of the fieldCount property."
				},
				"getFieldName": {
					"summary": "Returns the field name for the specified field index."
				},
				"getRowCount": {
					"summary": "Gets the value of the rowCount property."
				},
				"getValidRow": {
					"summary": "Gets the value of the validRow property."
				},
				"isValidRow": {
					"summary": "Returns whether the current row is valid."
				},
				"next": {
					"summary": "Advances to the next row in the result set and returns true if one exists, \nor false otherwise."
				}
			}
		},
		"Ti.Database.DB": {
			"parent": "Ti.Proxy",
			"summary": "The Database instance returned by Ti.Database.open or Ti.Database.install.",
			"properties": {
				"file": {
					"summary": "A File object representing the file where this database is stored. Must only be used for \nsetting file properties.",
					"readOnly": true
				},
				"lastInsertRowId": {
					"summary": "The identifier of the last populated row."
				},
				"name": {
					"summary": "The name of the database."
				},
				"rowsAffected": {
					"summary": "The number of rows affected by the last query."
				}
			},
			"methods": {
				"close": {
					"summary": "Closes the database and releases resources from memory. Once closed, this instance is no \nlonger valid and should not be used. On iOS, also closes all Ti.Database.ResultSet \ninstances that exist."
				},
				"execute": {
					"summary": "Executes an SQL statement against the database and returns a ResultSet."
				},
				"getFile": {
					"summary": "Gets the value of the file property."
				},
				"getLastInsertRowId": {
					"summary": "Gets the value of the lastInsertRowId property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getRowsAffected": {
					"summary": "Gets the value of the rowsAffected property."
				},
				"remove": {
					"summary": "Removes the database files for this instance from disk. WARNING: this is a destructive \noperation and cannot be reversed. All data in the database will be lost; use with caution."
				},
				"setLastInsertRowId": {
					"summary": "Sets the value of the lastInsertRowId property."
				},
				"setName": {
					"summary": "Sets the value of the name property."
				},
				"setRowsAffected": {
					"summary": "Sets the value of the rowsAffected property."
				}
			}
		},
		"Ti.Database": {
			"parent": "Ti.Module",
			"summary": "The top-level Database module, used for creating and accessing the\nin-application SQLite database.",
			"properties": {
				"FIELD_TYPE_DOUBLE": {
					"summary": "Constant for requesting a column's value returned in double form.",
					"readOnly": true
				},
				"FIELD_TYPE_FLOAT": {
					"summary": "Constant for requesting a column's value returned in float form.",
					"readOnly": true
				},
				"FIELD_TYPE_INT": {
					"summary": "Constant for requesting a column's value returned in integer form.",
					"readOnly": true
				},
				"FIELD_TYPE_STRING": {
					"summary": "Constant for requesting a column's value returned in string form.",
					"readOnly": true
				}
			},
			"methods": {
				"install": {
					"summary": "Installs an SQLite database to device's internal storage."
				},
				"open": {
					"summary": "Opens an SQLite database."
				}
			}
		}
	},
	"IOStream": {
		"Ti.IOStream": {
			"parent": "Ti.Proxy",
			"summary": "IOStream is the interface that all stream types implement.",
			"properties": {},
			"methods": {
				"close": {
					"summary": "Closes this stream."
				},
				"isReadable": {
					"summary": "Indicates whether this stream is readable."
				},
				"isWriteable": {
					"summary": "Indicates whether this stream is writeable."
				},
				"read": {
					"summary": "Reads data from this stream into a buffer."
				},
				"write": {
					"summary": "Writes data from a buffer to this stream."
				}
			}
		}
	},
	"Contacts": {
		"Ti.Contacts.Tizen": {
			"parent": "Ti.Module",
			"summary": "The module containing Tizen-specific methods and properties pertaining to contacts.",
			"properties": {},
			"methods": {
				"getAllPeople": {
					"summary": "Gets all people from the contact list."
				},
				"getPeopleWithName": {
					"summary": "Gets all people from the contact list with the specified name."
				}
			}
		},
		"Ti.Contacts.Group": {
			"parent": "Ti.Proxy",
			"summary": "An object which represents a group in the system contacts address book.",
			"properties": {
				"name": {
					"summary": "Name of this group."
				},
				"recordId": {
					"summary": "Record identifier of the group. Single value."
				}
			},
			"methods": {
				"add": {
					"summary": "Adds a person to this group."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getRecordId": {
					"summary": "Gets the value of the recordId property."
				},
				"members": {
					"summary": "Gets people that are members of this group."
				},
				"remove": {
					"summary": "Removes a person from this group."
				},
				"setName": {
					"summary": "Sets the value of the name property."
				},
				"setRecordId": {
					"summary": "Sets the value of the recordId property."
				},
				"sortedMembers": {
					"summary": "Gets people that are members of this group, sorted in the specified order."
				}
			}
		},
		"Ti.Contacts.Person": {
			"parent": "Ti.Proxy",
			"summary": "An object that represents a contact record for a person or organization in the system contacts \naddress book.",
			"properties": {
				"address": {
					"summary": "Addresses for the person. Multi-value. Read-only on Android."
				},
				"birthday": {
					"summary": "Date of birth of the person. Single value."
				},
				"created": {
					"summary": "Date and time that the person record was created. Single value.",
					"readOnly": true
				},
				"date": {
					"summary": "Dates associated with the person. Multi-value."
				},
				"department": {
					"summary": "Department of the person. Single value."
				},
				"email": {
					"summary": "Email addresses for the person. Multi-value. Read-only on Android."
				},
				"firstName": {
					"summary": "First name of the person. Single value."
				},
				"firstPhonetic": {
					"summary": "Phonetic first name of the person.  Single value."
				},
				"fullName": {
					"summary": "Localized full name of the person. Single value. Read-only on Android.",
					"readOnly": true
				},
				"id": {
					"summary": "Record identifier of the person. Single value.",
					"readOnly": true
				},
				"image": {
					"summary": "Image for the person. Single value."
				},
				"instantMessage": {
					"summary": "Instant messenger names of the person. Multi-value."
				},
				"jobTitle": {
					"summary": "Job title of the person. Single value."
				},
				"kind": {
					"summary": "Determines the type of information the person record contains; either person or organization. \nRead-only on Android."
				},
				"lastName": {
					"summary": "Last name of the person. Single value."
				},
				"lastPhonetic": {
					"summary": "Phonetic last name of the person. Single value."
				},
				"middleName": {
					"summary": "Middle name of the person. Single value."
				},
				"middlePhonetic": {
					"summary": "Phonetic middle name of the person. Single value."
				},
				"modified": {
					"summary": "Date and time that the person record was last modified. Single value.",
					"readOnly": true
				},
				"nickname": {
					"summary": "Nickname of the person. Single value."
				},
				"note": {
					"summary": "Notes for the person. Single value."
				},
				"organization": {
					"summary": "Organization to which the person belongs. Single value."
				},
				"phone": {
					"summary": "Phone numbers for the person. Multi-value. Read-only on Android."
				},
				"prefix": {
					"summary": "Prefix for the person. Single value.",
					"readOnly": true
				},
				"recordId": {
					"summary": "Record identifier of the person. Single value."
				},
				"relatedNames": {
					"summary": "Names of people to which the person is related. Multi-value."
				},
				"suffix": {
					"summary": "Suffix for the person. Single value.",
					"readOnly": true
				},
				"url": {
					"summary": "URLs of webpages associated with the person. Multi-value."
				}
			},
			"methods": {
				"getAddress": {
					"summary": "Gets the value of the address property."
				},
				"getBirthday": {
					"summary": "Gets the value of the birthday property."
				},
				"getCreated": {
					"summary": "Gets the value of the created property."
				},
				"getDate": {
					"summary": "Gets the value of the date property."
				},
				"getDepartment": {
					"summary": "Gets the value of the department property."
				},
				"getEmail": {
					"summary": "Gets the value of the email property."
				},
				"getFirstName": {
					"summary": "Gets the value of the firstName property."
				},
				"getFirstPhonetic": {
					"summary": "Gets the value of the firstPhonetic property."
				},
				"getFullName": {
					"summary": "Gets the value of the fullName property."
				},
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getImage": {
					"summary": "Gets the value of the image property."
				},
				"getInstantMessage": {
					"summary": "Gets the value of the instantMessage property."
				},
				"getJobTitle": {
					"summary": "Gets the value of the jobTitle property."
				},
				"getKind": {
					"summary": "Gets the value of the kind property."
				},
				"getLastName": {
					"summary": "Gets the value of the lastName property."
				},
				"getLastPhonetic": {
					"summary": "Gets the value of the lastPhonetic property."
				},
				"getMiddleName": {
					"summary": "Gets the value of the middleName property."
				},
				"getMiddlePhonetic": {
					"summary": "Gets the value of the middlePhonetic property."
				},
				"getModified": {
					"summary": "Gets the value of the modified property."
				},
				"getNickname": {
					"summary": "Gets the value of the nickname property."
				},
				"getNote": {
					"summary": "Gets the value of the note property."
				},
				"getOrganization": {
					"summary": "Gets the value of the organization property."
				},
				"getPhone": {
					"summary": "Gets the value of the phone property."
				},
				"getPrefix": {
					"summary": "Gets the value of the prefix property."
				},
				"getRecordId": {
					"summary": "Gets the value of the recordId property."
				},
				"getRelatedNames": {
					"summary": "Gets the value of the relatedNames property."
				},
				"getSuffix": {
					"summary": "Gets the value of the suffix property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"setAddress": {
					"summary": "Sets the value of the address property."
				},
				"setBirthday": {
					"summary": "Sets the value of the birthday property."
				},
				"setDate": {
					"summary": "Sets the value of the date property."
				},
				"setDepartment": {
					"summary": "Sets the value of the department property."
				},
				"setEmail": {
					"summary": "Sets the value of the email property."
				},
				"setFirstName": {
					"summary": "Sets the value of the firstName property."
				},
				"setFirstPhonetic": {
					"summary": "Sets the value of the firstPhonetic property."
				},
				"setImage": {
					"summary": "Sets the value of the image property."
				},
				"setInstantMessage": {
					"summary": "Sets the value of the instantMessage property."
				},
				"setJobTitle": {
					"summary": "Sets the value of the jobTitle property."
				},
				"setKind": {
					"summary": "Sets the value of the kind property."
				},
				"setLastName": {
					"summary": "Sets the value of the lastName property."
				},
				"setLastPhonetic": {
					"summary": "Sets the value of the lastPhonetic property."
				},
				"setMiddleName": {
					"summary": "Sets the value of the middleName property."
				},
				"setMiddlePhonetic": {
					"summary": "Sets the value of the middlePhonetic property."
				},
				"setNickname": {
					"summary": "Sets the value of the nickname property."
				},
				"setNote": {
					"summary": "Sets the value of the note property."
				},
				"setOrganization": {
					"summary": "Sets the value of the organization property."
				},
				"setPhone": {
					"summary": "Sets the value of the phone property."
				},
				"setRecordId": {
					"summary": "Sets the value of the recordId property."
				},
				"setRelatedNames": {
					"summary": "Sets the value of the relatedNames property."
				},
				"setUrl": {
					"summary": "Sets the value of the url property."
				}
			}
		},
		"Ti.Contacts.Tizen.Group": {
			"parent": "Ti.Module",
			"summary": "Provides APIs for working with groups in the system contacts address book on Tizen platform.",
			"properties": {},
			"methods": {
				"members": {
					"summary": "Gets people that are members of this group."
				},
				"sortedMembers": {
					"summary": "Gets people that are members of this group, sorted in the specified order."
				}
			}
		},
		"Ti.Contacts": {
			"parent": "Ti.Module",
			"summary": "The top-level Contacts module, used for accessing and modifying the system contacts address book.",
			"properties": {
				"AUTHORIZATION_AUTHORIZED": {
					"summary": "A contactsAuthorization value \nindicating that the application is authorized to use the address book.",
					"readOnly": true
				},
				"AUTHORIZATION_DENIED": {
					"summary": "A contactsAuthorization value \nindicating that the application is not authorized to use the address book.",
					"readOnly": true
				},
				"AUTHORIZATION_RESTRICTED": {
					"summary": "A contactsAuthorization value \nindicating that the application is not authorized to use the address book and\nthe user cannot change this application's status.",
					"readOnly": true
				},
				"AUTHORIZATION_UNKNOWN": {
					"summary": "A contactsAuthorization value \nindicating that the authorization state is unknown.",
					"readOnly": true
				},
				"CONTACTS_KIND_ORGANIZATION": {
					"summary": "Specifies that a contact is an organization.",
					"readOnly": true
				},
				"CONTACTS_KIND_PERSON": {
					"summary": "Specifies that a contact is a person.",
					"readOnly": true
				},
				"CONTACTS_SORT_FIRST_NAME": {
					"summary": "Specifies that group members will be sorted by first name.",
					"readOnly": true
				},
				"CONTACTS_SORT_LAST_NAME": {
					"summary": "Specifies that group members will be sorted by last name.",
					"readOnly": true
				},
				"contactsAuthorization": {
					"summary": "Returns an authorization constant indicating if the application has access to the address book.",
					"readOnly": true
				}
			},
			"methods": {
				"createGroup": {
					"summary": "Creates and returns an instance of Ti.Contacts.Group."
				},
				"createPerson": {
					"summary": "Creates and returns an instance of Ti.Contacts.Person, and commits all pending \nchanges to the underlying contacts database."
				},
				"getAllGroups": {
					"summary": "Gets all groups."
				},
				"getAllPeople": {
					"summary": "Gets all people, unless a limit is specified. On Tizen, use Ti.Contacts.Tizen.getAllPeople."
				},
				"getContactsAuthorization": {
					"summary": "Gets the value of the contactsAuthorization property."
				},
				"getGroupByID": {
					"summary": "Gets the group with the specified identifier."
				},
				"getPeopleWithName": {
					"summary": "Gets people with a firstName, middleName or lastName field, or a combination \nof these fields, that match the specified name."
				},
				"getPersonByID": {
					"summary": "Gets the person with the specified identifier."
				},
				"removeGroup": {
					"summary": "Removes a group from the address book."
				},
				"removePerson": {
					"summary": "Removes a contact from the address book."
				},
				"requestAuthorization": {
					"summary": "If authorization is unknown, will bring up a dialog requesting permission."
				},
				"revert": {
					"summary": "Reverts all changes made by the previous save to the address book."
				},
				"save": {
					"summary": "Commits all pending changes to the underlying contacts database."
				},
				"showContacts": {
					"summary": "Displays a picker that allows a person to be selected."
				}
			}
		}
	},
	"Media": {
		"Ti.Media.Sound": {
			"parent": "Ti.Proxy",
			"summary": "An object for playing basic audio resources.",
			"properties": {
				"STATE_BUFFERING": {
					"summary": "Audio data is being buffered from the network.",
					"readOnly": true
				},
				"STATE_INITIALIZED": {
					"summary": "Audio playback is being initialized.",
					"readOnly": true
				},
				"STATE_PAUSED": {
					"summary": "Playback is paused.",
					"readOnly": true
				},
				"STATE_PLAYING": {
					"summary": "Audio playback is active.",
					"readOnly": true
				},
				"STATE_STARTING": {
					"summary": "Audio playback is starting.",
					"readOnly": true
				},
				"STATE_STOPPED": {
					"summary": "Audio playback is stopped.",
					"readOnly": true
				},
				"STATE_STOPPING": {
					"summary": "Audio playback is stopping.",
					"readOnly": true
				},
				"STATE_WAITING_FOR_DATA": {
					"summary": "Player is waiting for audio data from the network.",
					"readOnly": true
				},
				"STATE_WAITING_FOR_QUEUE": {
					"summary": "Player is waiting for audio data to fill the queue.",
					"readOnly": true
				},
				"allowBackground": {
					"summary": "Determines whether the audio should continue playing even when its activity is paused."
				},
				"duration": {
					"summary": "Duration of the audio resource.",
					"readOnly": true
				},
				"looping": {
					"summary": "Determines whether the audio should loop upon completion."
				},
				"paused": {
					"summary": "Indicates if the audio is paused."
				},
				"playing": {
					"summary": "Indicates if the audio is playing.",
					"readOnly": true
				},
				"time": {
					"summary": "Current playback position of the audio."
				},
				"url": {
					"summary": "URL identifying the audio resource."
				},
				"volume": {
					"summary": "Volume of the audio from 0.0 (muted) to 1.0 (loudest)."
				}
			},
			"methods": {
				"getDuration": {
					"summary": "Gets the value of the duration property."
				},
				"getTime": {
					"summary": "Gets the value of the time property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"getVolume": {
					"summary": "Gets the value of the volume property."
				},
				"isLooping": {
					"summary": "Returns the value of the looping property."
				},
				"isPaused": {
					"summary": "Returns the value of the paused property."
				},
				"isPlaying": {
					"summary": "Returns the value of the playing property."
				},
				"pause": {
					"summary": "Pauses the audio."
				},
				"play": {
					"summary": "Starting playing the sound, or resume playing a paused sound."
				},
				"release": {
					"summary": "Releases all internal resources."
				},
				"reset": {
					"summary": "Resets the audio playback position to the beginning."
				},
				"setLooping": {
					"summary": "Sets the value of the looping property."
				},
				"setPaused": {
					"summary": "Sets the value of the paused property."
				},
				"setTime": {
					"summary": "Sets the value of the time property."
				},
				"setUrl": {
					"summary": "Sets the value of the url property."
				},
				"setVolume": {
					"summary": "Sets the value of the volume property."
				},
				"stop": {
					"summary": "Stops playing the audio and resets the playback position to the beginning of the clip."
				}
			}
		},
		"Ti.Media": {
			"parent": "Ti.Module",
			"summary": "The top-level Media module.",
			"properties": {
				"AUDIO_FILEFORMAT_3GP2": {
					"summary": "Audio file format 3GPP2.",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_3GPP": {
					"summary": "Audio file format 3GPP.",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_AIFF": {
					"summary": "Audio file format Audio Interchange File Format (AIFF).",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_AMR": {
					"summary": "Audio file format Adaptive Multi-Rate (AMR).",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_CAF": {
					"summary": "Audio file format Apple Compressed Audio Format (CAF).",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_MP3": {
					"summary": "Audio file format MP3.",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_MP4": {
					"summary": "Audio file format MP4.",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_MP4A": {
					"summary": "Audio file format MP4A.",
					"readOnly": true
				},
				"AUDIO_FILEFORMAT_WAVE": {
					"summary": "Audio file format WAVE.",
					"readOnly": true
				},
				"AUDIO_FORMAT_AAC": {
					"summary": "Audio format MPEG4 AAC encoding.",
					"readOnly": true
				},
				"AUDIO_FORMAT_ALAW": {
					"summary": "Audio format 8-bit aLaw encoding.",
					"readOnly": true
				},
				"AUDIO_FORMAT_APPLE_LOSSLESS": {
					"summary": "Audio format Apple lossless encoding.",
					"readOnly": true
				},
				"AUDIO_FORMAT_ILBC": {
					"summary": "Audio format iLBC encoding.",
					"readOnly": true
				},
				"AUDIO_FORMAT_IMA4": {
					"summary": "Audio format Apple IMA4 encoding.",
					"readOnly": true
				},
				"AUDIO_FORMAT_LINEAR_PCM": {
					"summary": "Audio format 16-bit, linear PCM encoding.",
					"readOnly": true
				},
				"AUDIO_FORMAT_ULAW": {
					"summary": "Audio format 8-bit muLaw encoding.",
					"readOnly": true
				},
				"AUDIO_HEADPHONES": {
					"summary": "Line-type constant for headphones.",
					"readOnly": true
				},
				"AUDIO_HEADPHONES_AND_MIC": {
					"summary": "Line-type constant for headphones and microphone.",
					"readOnly": true
				},
				"AUDIO_HEADSET_INOUT": {
					"summary": "Line-type constant for headset in/out.",
					"readOnly": true
				},
				"AUDIO_LINEOUT": {
					"summary": "Line-type constant for line-out.",
					"readOnly": true
				},
				"AUDIO_MICROPHONE": {
					"summary": "Line-type constant for microphone.",
					"readOnly": true
				},
				"AUDIO_MUTED": {
					"summary": "Line-type constant indicated mute switch is on.",
					"readOnly": true
				},
				"AUDIO_RECEIVER_AND_MIC": {
					"summary": "Line-type constant indicating receiver and microphone.",
					"readOnly": true
				},
				"AUDIO_SESSION_MODE_AMBIENT": {
					"summary": "For long-duration sounds such as rain, car engine noise, and so on.",
					"readOnly": true
				},
				"AUDIO_SESSION_MODE_PLAYBACK": {
					"summary": "Session mode for playing recorded music or other sounds that are central to the successful use of your application.",
					"readOnly": true
				},
				"AUDIO_SESSION_MODE_PLAY_AND_RECORD": {
					"summary": "Session mode for recording (input) and playback (output) of audio, such as for a VOIP (voice over IP) application.",
					"readOnly": true
				},
				"AUDIO_SESSION_MODE_RECORD": {
					"summary": "Session mode for recording audio; it silences playback audio.",
					"readOnly": true
				},
				"AUDIO_SESSION_MODE_SOLO_AMBIENT": {
					"summary": "Session mode for long-duration sounds such as rain, car engine noise, and so on.",
					"readOnly": true
				},
				"AUDIO_SESSION_OVERRIDE_ROUTE_NONE": {
					"summary": "Constant that specifies audio should output to the default audio route. See Ti.Media.setOverrideAudioRoute for more information.",
					"readOnly": true
				},
				"AUDIO_SESSION_OVERRIDE_ROUTE_SPEAKER": {
					"summary": "Constant that specifies audio should output to the speaker. See Ti.Media.setOverrideAudioRoute for more information.",
					"readOnly": true
				},
				"AUDIO_SPEAKER": {
					"summary": "Line-type constant for speaker output.",
					"readOnly": true
				},
				"AUDIO_UNAVAILABLE": {
					"summary": "Line-type constant indicating that audio is unavailable.",
					"readOnly": true
				},
				"AUDIO_UNKNOWN": {
					"summary": "Line-type constant indicating that line-type is unknown or not determined.",
					"readOnly": true
				},
				"CAMERA_FLASH_AUTO": {
					"summary": "Constant specifying to have the device determine to use the flash or not.",
					"readOnly": true
				},
				"CAMERA_FLASH_OFF": {
					"summary": "Constant specifying to never fire the flash.",
					"readOnly": true
				},
				"CAMERA_FLASH_ON": {
					"summary": "Constant specifying to always fire the flash.",
					"readOnly": true
				},
				"CAMERA_FRONT": {
					"summary": "Constant specifying the front camera.",
					"readOnly": true
				},
				"CAMERA_REAR": {
					"summary": "Constant indicating the rear camera.",
					"readOnly": true
				},
				"DEVICE_BUSY": {
					"summary": "Constant for media device busy error.",
					"readOnly": true
				},
				"MEDIA_TYPE_PHOTO": {
					"summary": "Media type constant for photo media.",
					"readOnly": true
				},
				"MEDIA_TYPE_VIDEO": {
					"summary": "Media type constant for video media.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_ALBUM": {
					"summary": "Constant for grouping query results by album.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_ALBUM_ARTIST": {
					"summary": "Constant for grouping query results by album and artist.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_ARTIST": {
					"summary": "Constant for grouping query results by artist.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_COMPOSER": {
					"summary": "Constant for grouping query results by composer.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_GENRE": {
					"summary": "Constant for grouping query results by genre.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_PLAYLIST": {
					"summary": "Constant for grouping query results by playlist.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_PODCAST_TITLE": {
					"summary": "Constant for grouping query results by podcast title.",
					"readOnly": true
				},
				"MUSIC_MEDIA_GROUP_TITLE": {
					"summary": "Constant for grouping query results by title.",
					"readOnly": true
				},
				"MUSIC_MEDIA_TYPE_ALL": {
					"summary": "Music library media containing any type of content.",
					"readOnly": true
				},
				"MUSIC_MEDIA_TYPE_ANY_AUDIO": {
					"summary": "Music library media containing any type of audio content.",
					"readOnly": true
				},
				"MUSIC_MEDIA_TYPE_AUDIOBOOK": {
					"summary": "Music library media containing audiobook content.",
					"readOnly": true
				},
				"MUSIC_MEDIA_TYPE_MUSIC": {
					"summary": "Music library media containing music content.",
					"readOnly": true
				},
				"MUSIC_MEDIA_TYPE_PODCAST": {
					"summary": "Music library media containing podcast content.",
					"readOnly": true
				},
				"MUSIC_PLAYER_REPEAT_ALL": {
					"summary": "Constant for \"Repeat All\" setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_REPEAT_DEFAULT": {
					"summary": "Constant for user's default repeat setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_REPEAT_NONE": {
					"summary": "Constant for \"No Repeat\" setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_REPEAT_ONE": {
					"summary": "Constant for \"Repeat one item\" setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_SHUFFLE_ALBUMS": {
					"summary": "Constant for shuffling complete albums setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_SHUFFLE_DEFAULT": {
					"summary": "Constant for user's default shuffle setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_SHUFFLE_NONE": {
					"summary": "Constant for \"no shuffle\" setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_SHUFFLE_SONGS": {
					"summary": "Constant for shuffling songs setting.",
					"readOnly": true
				},
				"MUSIC_PLAYER_STATE_INTERRUPTED": {
					"summary": "Constant for interrupted state.",
					"readOnly": true
				},
				"MUSIC_PLAYER_STATE_PAUSED": {
					"summary": "Constant for paused state.",
					"readOnly": true
				},
				"MUSIC_PLAYER_STATE_PLAYING": {
					"summary": "Constant for playing state.",
					"readOnly": true
				},
				"MUSIC_PLAYER_STATE_SEEK_BACKWARD": {
					"summary": "Constant for backward seek state.",
					"readOnly": true
				},
				"MUSIC_PLAYER_STATE_SEEK_FORWARD": {
					"summary": "Constant for forward seek state.",
					"readOnly": true
				},
				"MUSIC_PLAYER_STATE_STOPPED": {
					"summary": "Constant for stopped state.",
					"readOnly": true
				},
				"NO_CAMERA": {
					"summary": "Constant for media no camera error.",
					"readOnly": true
				},
				"NO_VIDEO": {
					"summary": "Constant for media no video error.",
					"readOnly": true
				},
				"QUALITY_HIGH": {
					"summary": "Media type constant for high-quality video recording.",
					"readOnly": true
				},
				"QUALITY_LOW": {
					"summary": "Media type constant for low-quality video recording.",
					"readOnly": true
				},
				"QUALITY_MEDIUM": {
					"summary": "Media type constant for medium-quality video recording.",
					"readOnly": true
				},
				"UNKNOWN_ERROR": {
					"summary": "Constant for unknown media error.",
					"readOnly": true
				},
				"VIDEO_CONTROL_DEFAULT": {
					"summary": "Constant for default video controls.",
					"readOnly": true
				},
				"VIDEO_CONTROL_EMBEDDED": {
					"summary": "Constant for video controls for an embedded view.",
					"readOnly": true
				},
				"VIDEO_CONTROL_FULLSCREEN": {
					"summary": "Constant for fullscreen video controls.",
					"readOnly": true
				},
				"VIDEO_CONTROL_HIDDEN": {
					"summary": "Constant for video controls hidden.",
					"readOnly": true
				},
				"VIDEO_CONTROL_NONE": {
					"summary": "Constant for no video controls.",
					"readOnly": true
				},
				"VIDEO_CONTROL_VOLUME_ONLY": {
					"summary": "Constant for video controls volume only.",
					"readOnly": true
				},
				"VIDEO_FINISH_REASON_PLAYBACK_ENDED": {
					"summary": "Video playback ended normally.",
					"readOnly": true
				},
				"VIDEO_FINISH_REASON_PLAYBACK_ERROR": {
					"summary": "Video playback ended abnormally.",
					"readOnly": true
				},
				"VIDEO_FINISH_REASON_USER_EXITED": {
					"summary": "Video playback ended by user action (such as clicking the Done button).",
					"readOnly": true
				},
				"VIDEO_LOAD_STATE_PLAYABLE": {
					"summary": "Current media is playable.",
					"readOnly": true
				},
				"VIDEO_LOAD_STATE_PLAYTHROUGH_OK": {
					"summary": "Playback will be automatically started in this state when autoplay is true.",
					"readOnly": true
				},
				"VIDEO_LOAD_STATE_STALLED": {
					"summary": "Playback will be automatically paused in this state, if started.",
					"readOnly": true
				},
				"VIDEO_LOAD_STATE_UNKNOWN": {
					"summary": "Current load state is not known.",
					"readOnly": true
				},
				"VIDEO_MEDIA_TYPE_AUDIO": {
					"summary": "A audio type of media in the movie returned by Ti.Media.VideoPlayer mediaTypes property.",
					"readOnly": true
				},
				"VIDEO_MEDIA_TYPE_NONE": {
					"summary": "An unknown type of media in the movie returned by Ti.Media.VideoPlayer mediaTypes property.",
					"readOnly": true
				},
				"VIDEO_MEDIA_TYPE_VIDEO": {
					"summary": "A video type of media in the movie returned by Ti.Media.VideoPlayer mediaTypes property.",
					"readOnly": true
				},
				"VIDEO_PLAYBACK_STATE_INTERRUPTED": {
					"summary": "Video playback has been interrupted.",
					"readOnly": true
				},
				"VIDEO_PLAYBACK_STATE_PAUSED": {
					"summary": "Video playback is paused.",
					"readOnly": true
				},
				"VIDEO_PLAYBACK_STATE_PLAYING": {
					"summary": "Video is being played.",
					"readOnly": true
				},
				"VIDEO_PLAYBACK_STATE_SEEKING_BACKWARD": {
					"summary": "Video playback is rewinding.",
					"readOnly": true
				},
				"VIDEO_PLAYBACK_STATE_SEEKING_FORWARD": {
					"summary": "Video playback is seeking forward.",
					"readOnly": true
				},
				"VIDEO_PLAYBACK_STATE_STOPPED": {
					"summary": "Video playback is stopped.",
					"readOnly": true
				},
				"VIDEO_REPEAT_MODE_NONE": {
					"summary": "Constant for disabling repeat on video playback.",
					"readOnly": true
				},
				"VIDEO_REPEAT_MODE_ONE": {
					"summary": "Constant for repeating one video (i.e., the one video will repeat constantly) during playback.",
					"readOnly": true
				},
				"VIDEO_SCALING_ASPECT_FILL": {
					"summary": "Scale video to fill the screen, clipping edges if necessary.",
					"readOnly": true
				},
				"VIDEO_SCALING_ASPECT_FIT": {
					"summary": "Scale video to fit the screen, letterboxing if necessary.",
					"readOnly": true
				},
				"VIDEO_SCALING_MODE_FILL": {
					"summary": "Video is scaled until both dimensions fit the screen exactly, stretching if necessary.",
					"readOnly": true
				},
				"VIDEO_SCALING_NONE": {
					"summary": "Video scaling is disabled.",
					"readOnly": true
				},
				"VIDEO_SOURCE_TYPE_FILE": {
					"summary": "Video source type is a file.",
					"readOnly": true
				},
				"VIDEO_SOURCE_TYPE_STREAMING": {
					"summary": "Video source type is a remote stream.",
					"readOnly": true
				},
				"VIDEO_SOURCE_TYPE_UNKNOWN": {
					"summary": "Video source type is unknown.",
					"readOnly": true
				},
				"VIDEO_TIME_OPTION_EXACT": {
					"summary": "Use the exact time.",
					"readOnly": true
				},
				"VIDEO_TIME_OPTION_NEAREST_KEYFRAME": {
					"summary": "Use the closest keyframe in the time.",
					"readOnly": true
				},
				"appMusicPlayer": {
					"summary": "An instance of Ti.Media.MusicPlayer representing the app-specific music player.",
					"readOnly": true
				},
				"audioLineType": {
					"summary": "Returns the line type constant for the current line type.",
					"readOnly": true
				},
				"audioPlaying": {
					"summary": "Returns true if the device is playing audio.",
					"readOnly": true
				},
				"audioSessionMode": {
					"summary": "A constant for the audio session mode to be used."
				},
				"availableCameraMediaTypes": {
					"summary": "Array of media type constants supported for the camera."
				},
				"availableCameras": {
					"summary": "Array indicating which cameras are available, CAMERA_FRONT, CAMERA_REAR or both.",
					"readOnly": true
				},
				"availablePhotoGalleryMediaTypes": {
					"summary": "Array of media type constants supported for saving to the device's camera roll or saved images album."
				},
				"availablePhotoMediaTypes": {
					"summary": "Array of media type constants supported for the photo library."
				},
				"averageMicrophonePower": {
					"summary": "Current average microphone level in dB or -1 if microphone monitoring is disabled."
				},
				"cameraFlashMode": {
					"summary": "Determines how the flash is fired when using the device's camera."
				},
				"canRecord": {
					"summary": "true if the device has a recording input device available.",
					"readOnly": true
				},
				"isCameraSupported": {
					"summary": "true if the device has camera support.",
					"readOnly": true
				},
				"peakMicrophonePower": {
					"summary": "Current microphone level peak power in dB or -1 if microphone monitoring is disabled.",
					"readOnly": true
				},
				"systemMusicPlayer": {
					"summary": "An instance of Ti.Media.MusicPlayer representing the system-wide music player.",
					"readOnly": true
				},
				"volume": {
					"summary": "Current volume of the playback device.",
					"readOnly": true
				}
			},
			"methods": {
				"beep": {
					"summary": "Plays a device beep notification."
				},
				"createAudioPlayer": {
					"summary": "Creates and returns an instance of Ti.Media.AudioPlayer."
				},
				"createAudioRecorder": {
					"summary": "Creates and returns an instance of Ti.Media.AudioRecorder."
				},
				"createItem": {
					"summary": "Creates and returns an instance of Ti.Media.Item."
				},
				"createMusicPlayer": {
					"summary": "Creates and returns an instance of Ti.Media.MusicPlayer."
				},
				"createSound": {
					"summary": "Creates and returns an instance of Ti.Media.Sound."
				},
				"createVideoPlayer": {
					"summary": "Creates and returns an instance of Ti.Media.VideoPlayer."
				},
				"getAppMusicPlayer": {
					"summary": "Gets the value of the appMusicPlayer property."
				},
				"getAudioLineType": {
					"summary": "Gets the value of the audioLineType property."
				},
				"getAudioPlaying": {
					"summary": "Gets the value of the audioPlaying property."
				},
				"getAudioSessionMode": {
					"summary": "Gets the value of the audioSessionMode property."
				},
				"getAvailableCameraMediaTypes": {
					"summary": "Gets the value of the availableCameraMediaTypes property."
				},
				"getAvailableCameras": {
					"summary": "Gets the value of the availableCameras property."
				},
				"getAvailablePhotoGalleryMediaTypes": {
					"summary": "Gets the value of the availablePhotoGalleryMediaTypes property."
				},
				"getAvailablePhotoMediaTypes": {
					"summary": "Gets the value of the availablePhotoMediaTypes property."
				},
				"getAverageMicrophonePower": {
					"summary": "Gets the value of the averageMicrophonePower property."
				},
				"getCameraFlashMode": {
					"summary": "Gets the value of the cameraFlashMode property."
				},
				"getCanRecord": {
					"summary": "Gets the value of the canRecord property."
				},
				"getIsCameraSupported": {
					"summary": "Gets the value of the isCameraSupported property."
				},
				"getPeakMicrophonePower": {
					"summary": "Gets the value of the peakMicrophonePower property."
				},
				"getSystemMusicPlayer": {
					"summary": "Gets the value of the systemMusicPlayer property."
				},
				"getVolume": {
					"summary": "Gets the value of the volume property."
				},
				"hideCamera": {
					"summary": "Hides the device camera UI."
				},
				"hideMusicLibrary": {
					"summary": "Hides the music library."
				},
				"isMediaTypeSupported": {
					"summary": "Returns true if the source supports the specified media type."
				},
				"openMusicLibrary": {
					"summary": "Shows the music library and allows the user to select one or more tracks."
				},
				"openPhotoGallery": {
					"summary": "Opens the photo gallery image picker."
				},
				"previewImage": {
					"summary": "Displays the given image."
				},
				"queryMusicLibrary": {
					"summary": "Searches the music library for items matching the specified search predicates."
				},
				"requestAuthorization": {
					"summary": "Request the user's permission for audio recording."
				},
				"saveToPhotoGallery": {
					"summary": "Saves media to the device's photo gallery / camera roll."
				},
				"setAudioSessionMode": {
					"summary": "Sets the value of the audioSessionMode property."
				},
				"setAvailableCameraMediaTypes": {
					"summary": "Sets the value of the availableCameraMediaTypes property."
				},
				"setAvailablePhotoGalleryMediaTypes": {
					"summary": "Sets the value of the availablePhotoGalleryMediaTypes property."
				},
				"setAvailablePhotoMediaTypes": {
					"summary": "Sets the value of the availablePhotoMediaTypes property."
				},
				"setAverageMicrophonePower": {
					"summary": "Sets the value of the averageMicrophonePower property."
				},
				"setCameraFlashMode": {
					"summary": "Sets the value of the cameraFlashMode property."
				},
				"setOverrideAudioRoute": {
					"summary": "Overrides the default audio route when using the Ti.Media.AUDIO_SESSION_MODE_PLAY_AND_RECORD session mode."
				},
				"showCamera": {
					"summary": "Shows the camera."
				},
				"startMicrophoneMonitor": {
					"summary": "Starts monitoring the microphone sound level."
				},
				"stopMicrophoneMonitor": {
					"summary": "Stops monitoring the microphone sound level."
				},
				"switchCamera": {
					"summary": "Switches between front and rear-facing cameras."
				},
				"takePicture": {
					"summary": "Uses the device camera to capture a photo."
				},
				"takeScreenshot": {
					"summary": "Takes a screen shot of the visible UI on the device."
				},
				"vibrate": {
					"summary": "Makes the device vibrate."
				}
			}
		},
		"Ti.Media.VideoPlayer": {
			"parent": "Ti.UI.View",
			"summary": "A native control for playing videos.",
			"properties": {
				"allowsAirPlay": {
					"summary": "Whether or not the current movie can be played on a remote device."
				},
				"autoplay": {
					"summary": "Indicates if a movie should automatically start playback."
				},
				"contentURL": {
					"summary": "URL of the media to play."
				},
				"currentPlaybackTime": {
					"summary": "Current playback time of the current movie in milliseconds."
				},
				"duration": {
					"summary": "The duration of the current movie in milliseconds, or 0.0 if not known."
				},
				"endPlaybackTime": {
					"summary": "The end time of movie playback, in milliseconds."
				},
				"fullscreen": {
					"summary": "Determines if the movie is presented in the entire screen (obscuring all other application content). "
				},
				"initialPlaybackTime": {
					"summary": "The start time of movie playback, in milliseconds."
				},
				"loadState": {
					"summary": "Returns the network load state of the movie player.",
					"readOnly": true
				},
				"media": {
					"summary": "Media object to play, as either a File,  a Blob, or a URL."
				},
				"mediaControlStyle": {
					"summary": "The style of the playback controls."
				},
				"mediaTypes": {
					"summary": "The types of media in the movie, or Ti.Media.VIDEO_MEDIA_TYPE_NONE if not known."
				},
				"movieControlMode": {
					"summary": "Style of the media playback controls."
				},
				"naturalSize": {
					"summary": "Returns the natural size of the movie."
				},
				"playableDuration": {
					"summary": "Currently playable duration of the movie, in milliseconds, for progressively \ndownloaded network content, or 0.0 if not known.",
					"readOnly": true
				},
				"playbackState": {
					"summary": "Current playback state of the video player.",
					"readOnly": true
				},
				"playing": {
					"summary": "Boolean to indicate if the player has started playing.",
					"readOnly": true
				},
				"repeatMode": {
					"summary": "Determines how the movie player repeats when reaching the end of playback."
				},
				"scalingMode": {
					"summary": "Determines how the content scales to fit the view."
				},
				"sourceType": {
					"summary": "The playback type of the movie."
				},
				"url": {
					"summary": "URL of the media to play."
				},
				"useApplicationAudioSession": {
					"summary": "Indicates if the movie player should inherit the application's audio session\ninstead of creating a new session. "
				},
				"volume": {
					"summary": "Volume of the audio portion of the video. "
				}
			},
			"methods": {
				"cancelAllThumbnailImageRequests": {
					"summary": "Cancels all pending asynchronous thumbnail requests."
				},
				"finishLayout": {
					"summary": "Finishes a batch update of the View's layout properties and schedules a layout pass of the \nview tree."
				},
				"getAllowsAirPlay": {
					"summary": "Gets the value of the allowsAirPlay property."
				},
				"getAutoplay": {
					"summary": "Gets the value of the autoplay property."
				},
				"getContentURL": {
					"summary": "Gets the value of the contentURL property."
				},
				"getCurrentPlaybackTime": {
					"summary": "Gets the value of the currentPlaybackTime property."
				},
				"getDuration": {
					"summary": "Gets the value of the duration property."
				},
				"getEndPlaybackTime": {
					"summary": "Gets the value of the endPlaybackTime property."
				},
				"getFullscreen": {
					"summary": "Gets the value of the fullscreen property."
				},
				"getInitialPlaybackTime": {
					"summary": "Gets the value of the initialPlaybackTime property."
				},
				"getLoadState": {
					"summary": "Gets the value of the loadState property."
				},
				"getMediaControlStyle": {
					"summary": "Gets the value of the mediaControlStyle property."
				},
				"getMediaTypes": {
					"summary": "Gets the value of the mediaTypes property."
				},
				"getMovieControlMode": {
					"summary": "Gets the value of the movieControlMode property."
				},
				"getNaturalSize": {
					"summary": "Gets the value of the naturalSize property."
				},
				"getPlayableDuration": {
					"summary": "Gets the value of the playableDuration property."
				},
				"getPlaybackState": {
					"summary": "Gets the value of the playbackState property."
				},
				"getPlaying": {
					"summary": "Gets the value of the playing property."
				},
				"getRepeatMode": {
					"summary": "Gets the value of the repeatMode property."
				},
				"getScalingMode": {
					"summary": "Gets the value of the scalingMode property."
				},
				"getSourceType": {
					"summary": "Gets the value of the sourceType property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"getUseApplicationAudioSession": {
					"summary": "Gets the value of the useApplicationAudioSession property."
				},
				"getVolume": {
					"summary": "Gets the value of the volume property."
				},
				"pause": {
					"summary": "Pauses playing the video."
				},
				"play": {
					"summary": "Starts playing the video."
				},
				"release": {
					"summary": "Releases the internal video resources immediately."
				},
				"requestThumbnailImagesAtTimes": {
					"summary": "Asynchronously request thumbnail images for one or more points in time in the video."
				},
				"setAllowsAirPlay": {
					"summary": "Sets the value of the allowsAirPlay property."
				},
				"setAutoplay": {
					"summary": "Sets the value of the autoplay property."
				},
				"setBackgroundView": {
					"summary": "Sets the background view for customization which is always displayed behind movie content."
				},
				"setContentURL": {
					"summary": "Sets the value of the contentURL property."
				},
				"setCurrentPlaybackTime": {
					"summary": "Sets the value of the currentPlaybackTime property."
				},
				"setDuration": {
					"summary": "Sets the value of the duration property."
				},
				"setEndPlaybackTime": {
					"summary": "Sets the value of the endPlaybackTime property."
				},
				"setFullscreen": {
					"summary": "Sets the value of the fullscreen property."
				},
				"setInitialPlaybackTime": {
					"summary": "Sets the value of the initialPlaybackTime property."
				},
				"setMedia": {
					"summary": "Sets the value of the media property."
				},
				"setMediaControlStyle": {
					"summary": "Sets the value of the mediaControlStyle property."
				},
				"setMediaTypes": {
					"summary": "Sets the value of the mediaTypes property."
				},
				"setMovieControlMode": {
					"summary": "Sets the value of the movieControlMode property."
				},
				"setNaturalSize": {
					"summary": "Sets the value of the naturalSize property."
				},
				"setRepeatMode": {
					"summary": "Sets the value of the repeatMode property."
				},
				"setScalingMode": {
					"summary": "Sets the value of the scalingMode property."
				},
				"setSourceType": {
					"summary": "Sets the value of the sourceType property."
				},
				"setUrl": {
					"summary": "Sets the value of the url property."
				},
				"setUseApplicationAudioSession": {
					"summary": "Sets the value of the useApplicationAudioSession property."
				},
				"setVolume": {
					"summary": "Sets the value of the volume property."
				},
				"startLayout": {
					"summary": "Starts a batch update of this view's layout properties."
				},
				"stop": {
					"summary": "Stops playing the video."
				},
				"thumbnailImageAtTime": {
					"summary": "Returns a thumbnail image for the video at the specified time."
				},
				"updateLayout": {
					"summary": "Performs a batch update of all supplied layout properties and schedules a layout pass after \nthey have been updated."
				}
			}
		},
		"Ti.Media.AudioRecorder": {
			"parent": "Ti.Proxy",
			"summary": "An audio recorder object used for recording audio from the device microphone.",
			"properties": {
				"compression": {
					"summary": "Audio compression to be used for the recording."
				},
				"format": {
					"summary": "Audio format to be used for the recording."
				},
				"paused": {
					"summary": "Indicates if the audio recorder is paused.",
					"readOnly": true
				},
				"recording": {
					"summary": "Indicates if the audio recorder is recording.",
					"readOnly": true
				},
				"stopped": {
					"summary": "Indicates if the audio recorder is stopped.",
					"readOnly": true
				}
			},
			"methods": {
				"getCompression": {
					"summary": "Gets the value of the compression property."
				},
				"getFormat": {
					"summary": "Gets the value of the format property."
				},
				"getPaused": {
					"summary": "Gets the value of the paused property."
				},
				"getRecording": {
					"summary": "Gets the value of the recording property."
				},
				"getStopped": {
					"summary": "Gets the value of the stopped property."
				},
				"pause": {
					"summary": "Pauses the current audio recording."
				},
				"resume": {
					"summary": "Resumes a paused recording."
				},
				"setCompression": {
					"summary": "Sets the value of the compression property."
				},
				"setFormat": {
					"summary": "Sets the value of the format property."
				},
				"start": {
					"summary": "Starts an audio recording."
				},
				"stop": {
					"summary": "Stops the current audio recording and returns the recorded audio file."
				}
			}
		},
		"Ti.Media.Item": {
			"parent": "Ti.Proxy",
			"summary": "A representation of a media item returned by openMusicLibrary or queryMusicLibrary.",
			"properties": {
				"albumArtist": {
					"summary": "Artist credited for the album containing this item.",
					"readOnly": true
				},
				"albumTitle": {
					"summary": "Title of the album containing this item.",
					"readOnly": true
				},
				"albumTrackCount": {
					"summary": "Number of tracks for the album containing this item.",
					"readOnly": true
				},
				"albumTrackNumber": {
					"summary": "Track number for this item.",
					"readOnly": true
				},
				"artist": {
					"summary": "Artist credited for this item.",
					"readOnly": true
				},
				"artwork": {
					"summary": "Image for the item's artwork as a Blob object,  or null if no artwork is\navailable.",
					"readOnly": true
				},
				"composer": {
					"summary": "Composer of this item.",
					"readOnly": true
				},
				"discCount": {
					"summary": "Total number of discs for the album containing this item.",
					"readOnly": true
				},
				"discNumber": {
					"summary": "Disc number for this item in the album.",
					"readOnly": true
				},
				"genre": {
					"summary": "Genre of this item.",
					"readOnly": true
				},
				"isCompilation": {
					"summary": "True if this item is part of a compilation album.",
					"readOnly": true
				},
				"lyrics": {
					"summary": "Lyrics for this item.",
					"readOnly": true
				},
				"mediaType": {
					"summary": "The type of the media. ",
					"readOnly": true
				},
				"playCount": {
					"summary": "Number of times the item has been played.",
					"readOnly": true
				},
				"playbackDuration": {
					"summary": "Length (in seconds) of this item.",
					"readOnly": true
				},
				"podcastTitle": {
					"summary": "Title of a podcast item.",
					"readOnly": true
				},
				"rating": {
					"summary": "Rating for this item.",
					"readOnly": true
				},
				"skipCount": {
					"summary": "Number of times this item has been skipped.",
					"readOnly": true
				},
				"title": {
					"summary": "Title of this item.",
					"readOnly": true
				}
			},
			"methods": {
				"getAlbumArtist": {
					"summary": "Gets the value of the albumArtist property."
				},
				"getAlbumTitle": {
					"summary": "Gets the value of the albumTitle property."
				},
				"getAlbumTrackCount": {
					"summary": "Gets the value of the albumTrackCount property."
				},
				"getAlbumTrackNumber": {
					"summary": "Gets the value of the albumTrackNumber property."
				},
				"getArtist": {
					"summary": "Gets the value of the artist property."
				},
				"getArtwork": {
					"summary": "Gets the value of the artwork property."
				},
				"getComposer": {
					"summary": "Gets the value of the composer property."
				},
				"getDiscCount": {
					"summary": "Gets the value of the discCount property."
				},
				"getDiscNumber": {
					"summary": "Gets the value of the discNumber property."
				},
				"getGenre": {
					"summary": "Gets the value of the genre property."
				},
				"getIsCompilation": {
					"summary": "Gets the value of the isCompilation property."
				},
				"getLyrics": {
					"summary": "Gets the value of the lyrics property."
				},
				"getMediaType": {
					"summary": "Gets the value of the mediaType property."
				},
				"getPlayCount": {
					"summary": "Gets the value of the playCount property."
				},
				"getPlaybackDuration": {
					"summary": "Gets the value of the playbackDuration property."
				},
				"getPodcastTitle": {
					"summary": "Gets the value of the podcastTitle property."
				},
				"getRating": {
					"summary": "Gets the value of the rating property."
				},
				"getSkipCount": {
					"summary": "Gets the value of the skipCount property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				}
			}
		},
		"Ti.Media.MusicPlayer": {
			"parent": "Ti.Proxy",
			"summary": "This object represents a music controller.",
			"properties": {
				"currentPlaybackTime": {
					"summary": "Current point in song playback, in seconds."
				},
				"nowPlaying": {
					"summary": "An Item object representing the currently playing media item.",
					"readOnly": true
				},
				"playbackState": {
					"summary": "Playback state.",
					"readOnly": true
				},
				"repeatMode": {
					"summary": "Repeat setting."
				},
				"shuffleMode": {
					"summary": "Shuffle setting."
				},
				"volume": {
					"summary": "Volume level for the music player from 0.0 (muted) to 1.0 (loudest)."
				}
			},
			"methods": {
				"getCurrentPlaybackTime": {
					"summary": "Gets the value of the currentPlaybackTime property."
				},
				"getNowPlaying": {
					"summary": "Gets the value of the nowPlaying property."
				},
				"getPlaybackState": {
					"summary": "Gets the value of the playbackState property."
				},
				"getRepeatMode": {
					"summary": "Gets the value of the repeatMode property."
				},
				"getShuffleMode": {
					"summary": "Gets the value of the shuffleMode property."
				},
				"getVolume": {
					"summary": "Gets the value of the volume property."
				},
				"pause": {
					"summary": "Pauses playback of the current media item."
				},
				"play": {
					"summary": "Begins playback of the current media item."
				},
				"seekBackward": {
					"summary": "Begins seeking backward in the currently playing media."
				},
				"seekForward": {
					"summary": "Begins seeking forward in the currently playing media item."
				},
				"setCurrentPlaybackTime": {
					"summary": "Sets the value of the currentPlaybackTime property."
				},
				"setQueue": {
					"summary": "Sets the media queue."
				},
				"setRepeatMode": {
					"summary": "Sets the value of the repeatMode property."
				},
				"setShuffleMode": {
					"summary": "Sets the value of the shuffleMode property."
				},
				"setVolume": {
					"summary": "Sets the value of the volume property."
				},
				"skipToBeginning": {
					"summary": "Skips to the beginning of the currently playing media item."
				},
				"skipToNext": {
					"summary": "Skips to the next media item in the queue."
				},
				"skipToPrevious": {
					"summary": "Skips to the previous media item in the queue."
				},
				"stop": {
					"summary": "Stops playback of the current media queue."
				},
				"stopSeeking": {
					"summary": "Ends a seek operation and returns to the previous playback state.\nSee also: seekForward and\nseekBackward."
				}
			}
		},
		"Ti.Media.AudioPlayer": {
			"parent": "Ti.Proxy",
			"summary": "An audio player object used for streaming audio to the device, and low-level control of the audio playback.",
			"properties": {
				"STATE_BUFFERING": {
					"summary": "Audio data is being buffered from the network.",
					"readOnly": true
				},
				"STATE_INITIALIZED": {
					"summary": "Audio playback is being initialized.",
					"readOnly": true
				},
				"STATE_PAUSED": {
					"summary": "Playback is paused.",
					"readOnly": true
				},
				"STATE_PLAYING": {
					"summary": "Audio playback is active.",
					"readOnly": true
				},
				"STATE_STARTING": {
					"summary": "Audio playback is starting.",
					"readOnly": true
				},
				"STATE_STOPPED": {
					"summary": "Audio playback is stopped.",
					"readOnly": true
				},
				"STATE_STOPPING": {
					"summary": "Audio playback is stopping.",
					"readOnly": true
				},
				"STATE_WAITING_FOR_DATA": {
					"summary": "Player is waiting for audio data from the network.",
					"readOnly": true
				},
				"STATE_WAITING_FOR_QUEUE": {
					"summary": "Player is waiting for audio data to fill the queue.",
					"readOnly": true
				},
				"allowBackground": {
					"summary": "Boolean to indicate if audio should continue playing even if the associated\nAndroid Activity is paused."
				},
				"autoplay": {
					"summary": "Indicates if an audio should automatically start playback."
				},
				"bitRate": {
					"summary": "Bit rate of the current playback stream."
				},
				"bufferSize": {
					"summary": "Size of the buffer used for streaming, in bytes."
				},
				"duration": {
					"summary": "Estimated duration in milliseconds of the file being played.",
					"readOnly": true
				},
				"idle": {
					"summary": "Boolean indicating if the player is idle.",
					"readOnly": true
				},
				"paused": {
					"summary": "Boolean indicating if audio playback is paused."
				},
				"playing": {
					"summary": "Boolean indicating if audio is currently playing.",
					"readOnly": true
				},
				"progress": {
					"summary": "Current playback progress, in milliseconds.",
					"readOnly": true
				},
				"state": {
					"summary": "Current state of playback, specified using one of the STATE constants defined on this object.",
					"readOnly": true
				},
				"time": {
					"summary": "Current playback position of the audio."
				},
				"url": {
					"summary": "URL for the audio stream."
				},
				"volume": {
					"summary": "Volume of the audio, from 0.0 (muted) to 1.0 (loudest)."
				},
				"waiting": {
					"summary": "Boolean indicating if the playback is waiting for audio data from the network.",
					"readOnly": true
				}
			},
			"methods": {
				"getAllowBackground": {
					"summary": "Gets the value of the allowBackground property."
				},
				"getAutoplay": {
					"summary": "Gets the value of the autoplay property."
				},
				"getBitRate": {
					"summary": "Gets the value of the bitRate property."
				},
				"getBufferSize": {
					"summary": "Gets the value of the bufferSize property."
				},
				"getDuration": {
					"summary": "Gets the value of the duration property."
				},
				"getIdle": {
					"summary": "Gets the value of the idle property."
				},
				"getPaused": {
					"summary": "Returns the value of the paused property."
				},
				"getPlaying": {
					"summary": "Returns the value of the playing property."
				},
				"getProgress": {
					"summary": "Gets the value of the progress property."
				},
				"getState": {
					"summary": "Gets the value of the state property."
				},
				"getTime": {
					"summary": "Gets the value of the time property."
				},
				"getUrl": {
					"summary": "Gets the value of the url property."
				},
				"getVolume": {
					"summary": "Gets the value of the volume property."
				},
				"getWaiting": {
					"summary": "Gets the value of the waiting property."
				},
				"isPaused": {
					"summary": "Returns the value of the paused property."
				},
				"isPlaying": {
					"summary": "Returns the value of the playing property."
				},
				"pause": {
					"summary": "Pauses audio playback."
				},
				"play": {
					"summary": "Starts or resumes audio playback."
				},
				"release": {
					"summary": "Stops buffering audio data and releases audio resources."
				},
				"setBitRate": {
					"summary": "Sets the value of the bitRate property."
				},
				"setBufferSize": {
					"summary": "Sets the value of the bufferSize property."
				},
				"setPaused": {
					"summary": "Sets the value of the paused property."
				},
				"setTime": {
					"summary": "Sets the value of the time property."
				},
				"setUrl": {
					"summary": "Sets the value of the url property."
				},
				"setVolume": {
					"summary": "Sets the value of the volume property."
				},
				"start": {
					"summary": "Starts or resumes audio playback."
				},
				"stateDescription": {
					"summary": "Converts a state value into a text description\nsuitable for display."
				},
				"stop": {
					"summary": "Stops audio playback."
				}
			}
		}
	},
	"Platform": {
		"Ti.Platform": {
			"parent": "Ti.Module",
			"summary": "The top-level Platform module.  The Platform module is used to access the device's platform-related \nfunctionality.\nTo use this API on Tizen, you must include the following privilege in the tiapp.xml \nfile of your Ti application: \n\nhttp://tizen.org/privilege/systeminfo\n",
			"properties": {
				"BATTERY_STATE_CHARGING": {
					"summary": "Constant to indicate that the system is plugged in and currently being charged.",
					"readOnly": true
				},
				"BATTERY_STATE_FULL": {
					"summary": "Constant to indicate that the battery is fully charged.",
					"readOnly": true
				},
				"BATTERY_STATE_UNKNOWN": {
					"summary": "Constant to indicate that the battery state is not known or monitoring is disabled.",
					"readOnly": true
				},
				"BATTERY_STATE_UNPLUGGED": {
					"summary": "Constant to indicate that the system is unplugged.",
					"readOnly": true
				},
				"address": {
					"summary": "System's WIFI IP address. No other network types are supported.",
					"readOnly": true
				},
				"architecture": {
					"summary": "System's processor architecture.",
					"readOnly": true
				},
				"availableMemory": {
					"summary": "System's unused memory, measured in megabytes on iOS and bytes on Android.",
					"readOnly": true
				},
				"batteryLevel": {
					"summary": "Battery level in percent, accessible only when batteryMonitoring is enabled. Measured \nin 5% increments on iPhone/iPad.",
					"readOnly": true
				},
				"batteryMonitoring": {
					"summary": "Determines whether battery monitoring is enabled."
				},
				"batteryState": {
					"summary": "Indicates the state of the battery. Accessible only when batteryMonitoring is enabled.",
					"readOnly": true
				},
				"displayCaps": {
					"summary": "Returns the DisplayCaps object.",
					"readOnly": true
				},
				"id": {
					"summary": "Applications's globally-unique ID (UUID).",
					"readOnly": true
				},
				"locale": {
					"summary": "System's default language.",
					"readOnly": true
				},
				"macaddress": {
					"summary": "System's network interface mac address, or app UUID.",
					"readOnly": true
				},
				"manufacturer": {
					"summary": "Manufacturer of the device.",
					"readOnly": true
				},
				"model": {
					"summary": "Model of the device.",
					"readOnly": true
				},
				"name": {
					"summary": "Name of the platform. Returns android for the Android platform, iPhone OS for the iOS\nplatform (iPhone, iPad, or iPod Touch), TIZEN for Tizen platform and mobileweb for the Mobile Web platform.",
					"readOnly": true
				},
				"netmask": {
					"summary": "System's WIFI network mask. No other network types are supported.",
					"readOnly": true
				},
				"osname": {
					"summary": "Short name of the system's Operating System. Returns android for the Android platfrom,\niphone for the iPhone or iPod Touch, ipad for the iPad, tizen for Tizen platform and mobileweb for the Mobile Web\nplatform.",
					"readOnly": true
				},
				"ostype": {
					"summary": "Operating System architecture. On Android, this is 32bit.",
					"readOnly": true
				},
				"processorCount": {
					"summary": "Number of processing cores.",
					"readOnly": true
				},
				"runtime": {
					"summary": "Short name of the JavaScript runtime in use.",
					"readOnly": true
				},
				"username": {
					"summary": "System name, if set. On iOS, this can be found in Settings &gt; General &gt; About &gt; Name.",
					"readOnly": true
				},
				"version": {
					"summary": "System's OS version.",
					"readOnly": true
				}
			},
			"methods": {
				"canOpenURL": {
					"summary": "Returns whether the system is configured with a default application to handle the URL's protocol."
				},
				"createUUID": {
					"summary": "Creates a globally-unique identifier."
				},
				"getAddress": {
					"summary": "Gets the value of the address property."
				},
				"getArchitecture": {
					"summary": "Gets the value of the architecture property."
				},
				"getAvailableMemory": {
					"summary": "Gets the value of the availableMemory property."
				},
				"getBatteryLevel": {
					"summary": "Gets the value of the batteryLevel property."
				},
				"getBatteryMonitoring": {
					"summary": "Gets the value of the batteryMonitoring property."
				},
				"getBatteryState": {
					"summary": "Gets the value of the batteryState property."
				},
				"getDisplayCaps": {
					"summary": "Gets the value of the displayCaps property."
				},
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getLocale": {
					"summary": "Gets the value of the locale property."
				},
				"getMacaddress": {
					"summary": "Gets the value of the macaddress property."
				},
				"getManufacturer": {
					"summary": "Gets the value of the manufacturer property."
				},
				"getModel": {
					"summary": "Gets the value of the model property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getNetmask": {
					"summary": "Gets the value of the netmask property."
				},
				"getOsname": {
					"summary": "Gets the value of the osname property."
				},
				"getOstype": {
					"summary": "Gets the value of the ostype property."
				},
				"getProcessorCount": {
					"summary": "Gets the value of the processorCount property."
				},
				"getRuntime": {
					"summary": "Gets the value of the runtime property."
				},
				"getUsername": {
					"summary": "Gets the value of the username property."
				},
				"getVersion": {
					"summary": "Gets the value of the version property."
				},
				"is24HourTimeFormat": {
					"summary": "Returns whether the system settings are configured to show times in 24-hour format."
				},
				"openURL": {
					"summary": "Opens this URL using the system's default application for its protocol."
				},
				"setBatteryMonitoring": {
					"summary": "Sets the value of the batteryMonitoring property."
				}
			}
		},
		"Ti.Platform.DisplayCaps": {
			"parent": "Ti.Proxy",
			"summary": "The Display Caps object returned by the Ti.Platform.displayCaps property.",
			"properties": {
				"density": {
					"summary": "Logical density of the display."
				},
				"dpi": {
					"summary": "Display density expressed as dots-per-inch."
				},
				"logicalDensityFactor": {
					"summary": "Logical density of the display, as a scaling factor for the Density Independent Pixel (dip) \nunit."
				},
				"platformHeight": {
					"summary": "Absolute height of the display in relation to UI orientation. Measured in platform-specific \nunits; pixels on Android and density-independent pixels (dip) on iOS."
				},
				"platformWidth": {
					"summary": "Absolute width of the display in relation to UI orientation. Measured in platform-specific \nunits; pixels on Android and density-independent pixels (dip) on iOS."
				},
				"xdpi": {
					"summary": "Physical pixels per inch of the display in the X dimension."
				},
				"ydpi": {
					"summary": "Physical pixels per inch of the display in the Y dimension."
				}
			},
			"methods": {
				"getDensity": {
					"summary": "Gets the value of the density property."
				},
				"getDpi": {
					"summary": "Gets the value of the dpi property."
				},
				"getLogicalDensityFactor": {
					"summary": "Gets the value of the logicalDensityFactor property."
				},
				"getPlatformHeight": {
					"summary": "Gets the value of the platformHeight property."
				},
				"getPlatformWidth": {
					"summary": "Gets the value of the platformWidth property."
				},
				"getXdpi": {
					"summary": "Gets the value of the xdpi property."
				},
				"getYdpi": {
					"summary": "Gets the value of the ydpi property."
				},
				"setDensity": {
					"summary": "Sets the value of the density property."
				},
				"setDpi": {
					"summary": "Sets the value of the dpi property."
				},
				"setLogicalDensityFactor": {
					"summary": "Sets the value of the logicalDensityFactor property."
				},
				"setPlatformHeight": {
					"summary": "Sets the value of the platformHeight property."
				},
				"setPlatformWidth": {
					"summary": "Sets the value of the platformWidth property."
				},
				"setXdpi": {
					"summary": "Sets the value of the xdpi property."
				},
				"setYdpi": {
					"summary": "Sets the value of the ydpi property."
				}
			}
		}
	},
	"Buffer": {
		"Ti.Buffer": {
			"parent": "Ti.Proxy",
			"summary": "Buffer is a mutable, resizable container for raw data.",
			"properties": {
				"byteOrder": {
					"summary": "Byte order of this buffer."
				},
				"length": {
					"summary": "Length of the buffer in bytes."
				},
				"type": {
					"summary": "The type of data encoding to use with value."
				},
				"value": {
					"summary": "Data to be encoded."
				}
			},
			"methods": {
				"append": {
					"summary": "Appends sourceBuffer to the this buffer."
				},
				"clear": {
					"summary": "Clears this buffer's contents but does not change the size of the buffer."
				},
				"clone": {
					"summary": "Creates a complete or partial copy of this buffer."
				},
				"copy": {
					"summary": "Copies data from sourceBuffer into the current buffer at offset."
				},
				"fill": {
					"summary": "Fills this buffer with the specified byte value."
				},
				"getByteOrder": {
					"summary": "Gets the value of the byteOrder property."
				},
				"getLength": {
					"summary": "Gets the value of the length property."
				},
				"getType": {
					"summary": "Gets the value of the type property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"insert": {
					"summary": "Inserts data from sourceBuffer into this buffer at offset."
				},
				"release": {
					"summary": "Releases the space allocated to the buffer, and sets its length to 0."
				},
				"setLength": {
					"summary": "Sets the value of the length property."
				},
				"toBlob": {
					"summary": "Converts this buffer to a Ti.Blob."
				}
			}
		}
	},
	"BufferStream": {
		"Ti.BufferStream": {
			"parent": "Ti.IOStream",
			"summary": "Wrapper around Ti.Buffer that implements the Ti.IOStream interface.",
			"properties": {},
			"methods": {}
		}
	},
	"Calendar": {
		"Ti.Calendar.Calendar": {
			"parent": "Ti.Proxy",
			"summary": "An object that represents a single calendar.",
			"properties": {
				"hidden": {
					"summary": "Indicates whether this calendar can be edited or deleted.",
					"readOnly": true
				},
				"id": {
					"summary": "Identifier of this calendar. Available only in iOS 5.0 and above.",
					"readOnly": true
				},
				"name": {
					"summary": "Display name of this calendar.",
					"readOnly": true
				},
				"selected": {
					"summary": "Indicates whether the calendar is selected.",
					"readOnly": true
				}
			},
			"methods": {
				"createEvent": {
					"summary": "Creates an event in this calendar."
				},
				"getEventById": {
					"summary": "Gets the event with the specified identifier."
				},
				"getEventsBetweenDates": {
					"summary": "Gets events that occur between two dates."
				},
				"getEventsInDate": {
					"summary": "Gets events that occur on a specified date."
				},
				"getEventsInMonth": {
					"summary": "Gets events that occur during a specified month."
				},
				"getEventsInYear": {
					"summary": "Gets all events that occur during a specified year."
				},
				"getHidden": {
					"summary": "Gets the value of the hidden property."
				},
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getSelected": {
					"summary": "Gets the value of the selected property."
				}
			}
		},
		"Ti.Calendar.Reminder": {
			"parent": "Ti.Proxy",
			"summary": "An object that represents a single reminder for an event in a calendar.",
			"properties": {
				"id": {
					"summary": "Identifier of this reminder.",
					"readOnly": true
				},
				"method": {
					"summary": "Method by which this reminder will be delivered.",
					"readOnly": true
				},
				"minutes": {
					"summary": "Reminder notice period in minutes, that determines how long prior to the event this reminder \nshould trigger.",
					"readOnly": true
				}
			},
			"methods": {
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getMethod": {
					"summary": "Gets the value of the method property."
				},
				"getMinutes": {
					"summary": "Gets the value of the minutes property."
				}
			}
		},
		"Ti.Calendar.Event": {
			"parent": "Ti.Proxy",
			"summary": "An object that represents a single event in a calendar.",
			"properties": {
				"alerts": {
					"summary": "Alarms associated with the calendar item, as an array of Ti.Calendar.Alert objects."
				},
				"allDay": {
					"summary": "Indicates whether this event is all day."
				},
				"availability": {
					"summary": "Availability of this event.",
					"readOnly": true
				},
				"begin": {
					"summary": "Start date/time of this event."
				},
				"description": {
					"summary": "Description of this event.",
					"readOnly": true
				},
				"end": {
					"summary": "End date/time of this event."
				},
				"extendedProperties": {
					"summary": "Extended properties of this event.",
					"readOnly": true
				},
				"hasAlarm": {
					"summary": "Indicates whether an alarm is scheduled for this event.",
					"readOnly": true
				},
				"id": {
					"summary": "Identifier of this event.",
					"readOnly": true
				},
				"isDetached": {
					"summary": "Boolean value that indicates whether an event is a detached instance of a \nrepeating event.",
					"readOnly": true
				},
				"location": {
					"summary": "Location of this event."
				},
				"notes": {
					"summary": "Notes for this event."
				},
				"recurenceRule": {
					"summary": "Recurrence rule associated with the event. (Available in iOS 4.0 through iOS 5.1.)"
				},
				"recurenceRules": {
					"summary": "The recurrence rules for the calendar item. (Available in iOS 5.1 and above.)"
				},
				"reminders": {
					"summary": "Existing reminders for this event.",
					"readOnly": true
				},
				"status": {
					"summary": "Status of this event.",
					"readOnly": true
				},
				"title": {
					"summary": "Title of this event."
				},
				"visibility": {
					"summary": "Visibility of this event.",
					"readOnly": true
				}
			},
			"methods": {
				"addRecurrenceRule": {
					"summary": "Adds a recurrence rule to the recurrence rule array."
				},
				"createAlert": {
					"summary": "Creates an alert for this event."
				},
				"createRecurenceRule": {
					"summary": "Creates an recurrence pattern for a recurring event.\nAll of the properties for the recurrence rule must be set during creation. \nThe recurrence rule properties cannot be modified."
				},
				"createReminder": {
					"summary": "Creates a reminder for this event."
				},
				"getAlerts": {
					"summary": "Gets the value of the alerts property."
				},
				"getAllDay": {
					"summary": "Gets the value of the allDay property."
				},
				"getAvailability": {
					"summary": "Gets the value of the availability property."
				},
				"getBegin": {
					"summary": "Gets the value of the begin property."
				},
				"getDescription": {
					"summary": "Gets the value of the description property."
				},
				"getEnd": {
					"summary": "Gets the value of the end property."
				},
				"getExtendedProperties": {
					"summary": "Gets the value of the extendedProperties property."
				},
				"getExtendedProperty": {
					"summary": "Gets the value of the specified extended property."
				},
				"getHasAlarm": {
					"summary": "Gets the value of the hasAlarm property."
				},
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getIsDetached": {
					"summary": "Gets the value of the isDetached property."
				},
				"getLocation": {
					"summary": "Gets the value of the location property."
				},
				"getNotes": {
					"summary": "Gets the value of the notes property."
				},
				"getRecurenceRule": {
					"summary": "Gets the value of the recurenceRule property."
				},
				"getRecurenceRules": {
					"summary": "Gets the value of the recurenceRules property."
				},
				"getReminders": {
					"summary": "Gets the value of the reminders property."
				},
				"getStatus": {
					"summary": "Gets the value of the status property."
				},
				"getTitle": {
					"summary": "Gets the value of the title property."
				},
				"getVisibility": {
					"summary": "Gets the value of the visibility property."
				},
				"refresh": {
					"summary": "Updates the event's data with the current information in the Calendar database."
				},
				"remove": {
					"summary": "Removes an event from the event store."
				},
				"removeRecurenceRule": {
					"summary": "Removes a recurrence rule to the recurrence rule array."
				},
				"save": {
					"summary": "Saves changes to an event permanently."
				},
				"setAlerts": {
					"summary": "Sets the value of the alerts property."
				},
				"setAllDay": {
					"summary": "Sets the value of the allDay property."
				},
				"setBegin": {
					"summary": "Sets the value of the begin property."
				},
				"setEnd": {
					"summary": "Sets the value of the end property."
				},
				"setExtendedProperty": {
					"summary": "Sets the value of the specified extended property."
				},
				"setLocation": {
					"summary": "Sets the value of the location property."
				},
				"setNotes": {
					"summary": "Sets the value of the notes property."
				},
				"setRecurenceRule": {
					"summary": "Sets the value of the recurenceRule property."
				},
				"setRecurenceRules": {
					"summary": "Sets the value of the recurenceRules property."
				},
				"setTitle": {
					"summary": "Sets the value of the title property."
				}
			}
		},
		"Ti.Calendar": {
			"parent": "Ti.Module",
			"summary": "The Calendar module provides an API for accessing the native calendar functionality.",
			"properties": {
				"AUTHORIZATION_AUTHORIZED": {
					"summary": "A eventsAuthorization value \nindicating that the application is authorized to use events in the Calendar.",
					"readOnly": true
				},
				"AUTHORIZATION_DENIED": {
					"summary": "A eventsAuthorization value \nindicating that the application is not authorized to use events in the Calendar.",
					"readOnly": true
				},
				"AUTHORIZATION_RESTRICTED": {
					"summary": "A eventsAuthorization value \nindicating that the application is not authorized to use events in the Calendar.\nthe user cannot change this application's status.",
					"readOnly": true
				},
				"AUTHORIZATION_UNKNOWN": {
					"summary": "A eventsAuthorization value \nindicating that the authorization state is unknown.",
					"readOnly": true
				},
				"AVAILABILITY_BUSY": {
					"summary": "Event has a busy availability setting.",
					"readOnly": true
				},
				"AVAILABILITY_FREE": {
					"summary": "Event has a free availability setting.",
					"readOnly": true
				},
				"AVAILABILITY_NOTSUPPORTED": {
					"summary": "Availability settings are not supported by the event's calendar.",
					"readOnly": true
				},
				"AVAILABILITY_TENTATIVE": {
					"summary": "Event has a tentative availability setting.",
					"readOnly": true
				},
				"AVAILABILITY_UNAVAILABLE": {
					"summary": "Event has a tentative availability setting.",
					"readOnly": true
				},
				"METHOD_ALERT": {
					"summary": "Reminder alert delivery method.",
					"readOnly": true
				},
				"METHOD_DEFAULT": {
					"summary": "Reminder default delivery method.",
					"readOnly": true
				},
				"METHOD_EMAIL": {
					"summary": "Reminder email delivery method.",
					"readOnly": true
				},
				"METHOD_SMS": {
					"summary": "Reminder SMS delivery method.",
					"readOnly": true
				},
				"RECURRENCEFREQUENCY_DAILY": {
					"summary": "Indicates a daily recurrence rule for a events reccurance frequency.",
					"readOnly": true
				},
				"RECURRENCEFREQUENCY_MONTHLY": {
					"summary": "Indicates a monthly recurrence rule for a events reccurance frequency.",
					"readOnly": true
				},
				"RECURRENCEFREQUENCY_WEEKLY": {
					"summary": "Indicates a weekly recurrence rule for a events reccurance frequency.",
					"readOnly": true
				},
				"RECURRENCEFREQUENCY_YEARLY": {
					"summary": "Indicates a yearly recurrence rule for a events reccurance frequency.",
					"readOnly": true
				},
				"SPAN_FUTUREEVENTS": {
					"summary": "A save/remove event value, \nindicating modifications to this event instance should also affect future instances of this event.",
					"readOnly": true
				},
				"SPAN_THISEVENT": {
					"summary": "A save/remove event value, \nindicating modifications to this event instance should affect only this instance.",
					"readOnly": true
				},
				"STATE_DISMISSED": {
					"summary": "Alert dismissed state.",
					"readOnly": true
				},
				"STATE_FIRED": {
					"summary": "Alert fired state.",
					"readOnly": true
				},
				"STATE_SCHEDULED": {
					"summary": "Alert scheduled status.",
					"readOnly": true
				},
				"STATUS_CANCELED": {
					"summary": "Event canceled status.",
					"readOnly": true
				},
				"STATUS_CONFIRMED": {
					"summary": "Event confirmed status.",
					"readOnly": true
				},
				"STATUS_NONE": {
					"summary": "Event has no status.",
					"readOnly": true
				},
				"STATUS_TENTATIVE": {
					"summary": "Event tentative status.",
					"readOnly": true
				},
				"VISIBILITY_CONFIDENTIAL": {
					"summary": "Event confidential visibility.",
					"readOnly": true
				},
				"VISIBILITY_DEFAULT": {
					"summary": "Event default visibility.",
					"readOnly": true
				},
				"VISIBILITY_PRIVATE": {
					"summary": "Event private visibility.",
					"readOnly": true
				},
				"VISIBILITY_PUBLIC": {
					"summary": "Event public visibility.",
					"readOnly": true
				},
				"allAlerts": {
					"summary": "All alerts in selected calendars.",
					"readOnly": true
				},
				"allCalendars": {
					"summary": "All calendars known to the native calendar app.",
					"readOnly": true
				},
				"allEditableCalendars": {
					"summary": "All calendars known to the native calendar app that can add, edit, and \ndelete items in the calendar.",
					"readOnly": true
				},
				"defaultCalendar": {
					"summary": "Calendar that events are added to by default, as specified by user settings.",
					"readOnly": true
				},
				"eventsAuthorization": {
					"summary": "Returns an authorization constant indicating if the application has access to the events in the EventKit.",
					"readOnly": true
				},
				"selectableCalendars": {
					"summary": "All calendars selected within the native calendar app, which may be a subset of allCalendars. ",
					"readOnly": true
				}
			},
			"methods": {
				"getAllAlerts": {
					"summary": "Gets the value of the allAlerts property."
				},
				"getAllCalendars": {
					"summary": "Gets the value of the allCalendars property."
				},
				"getAllEditableCalendars": {
					"summary": "Gets the value of the allEditableCalendars property."
				},
				"getCalendarById": {
					"summary": "Gets the calendar with the specified identifier."
				},
				"getDefaultCalendar": {
					"summary": "Gets the value of the defaultCalendar property."
				},
				"getEventsAuthorization": {
					"summary": "Gets the value of the eventsAuthorization property."
				},
				"getSelectableCalendars": {
					"summary": "Gets the value of the selectableCalendars property."
				},
				"requestEventsAuthorization": {
					"summary": "If authorization is unknown, will bring up a dialog requesting permission."
				}
			}
		},
		"Ti.Calendar.RecurrenceRule": {
			"parent": "Ti.Proxy",
			"summary": "An object that is used to describe the recurrence pattern for a recurring event.",
			"properties": {
				"calendarID": {
					"summary": "Identifier for the recurrence rule's calendar.",
					"readOnly": true
				},
				"daysOfTheMonth": {
					"summary": "The days of the month that the event occurs, as an array of number objects. \nValues can be from 1 to 31 and from -1 to -31. This parameter is only valid for \nrecurrence rules of type \nRECURRENCEFREQUENCY_MONTHLY.",
					"readOnly": true
				},
				"daysOfTheWeek": {
					"summary": "The days of the week that the event occurs, as an Dictionay of daysOfWeek and Week. ",
					"readOnly": true
				},
				"daysOfTheYear": {
					"summary": "The days of the year that the event occurs, as an array of number objects. \nValues can be from 1 to 366 and from -1 to -366. This parameter is only valid for \nrecurrence rules of type RECURRENCEFREQUENCY_YEARLY.",
					"readOnly": true
				},
				"end": {
					"summary": "End of a recurrence rule.",
					"readOnly": true
				},
				"frequency": {
					"summary": "Frequency of the recurrence rule.",
					"readOnly": true
				},
				"interval": {
					"summary": "The interval between instances of this recurrence. For example, a weekly \nrecurrence rule with an interval of 2 occurs every other week. Must be greater than 0.",
					"readOnly": true
				},
				"monthsOfTheYear": {
					"summary": "The months of the year that the event occurs, as an array of Number objects. \nValues can be from 1 to 12. This parameter is only valid for recurrence rules of \ntype RECURRENCEFREQUENCY_YEARLY.",
					"readOnly": true
				},
				"setPositions": {
					"summary": "An array of ordinal numbers that filters which recurrences to include in the \nrecurrence rule's frequency. For example, a yearly recurrence rule that has a \ndaysOfTheWeek value that specifies \nMonday through Friday, and a setPositions array containing 2 and -1, occurs only \non the second weekday and last weekday of every year. ",
					"readOnly": true
				},
				"weeksOfTheYear": {
					"summary": "The weeks of the year that the event occurs, as an array of number objects. \nValues can be from 1 to 53 and from -1 to -53. This parameter is only valid for \nrecurrence rules of type RECURRENCEFREQUENCY_YEARLY.",
					"readOnly": true
				}
			},
			"methods": {
				"getCalendarID": {
					"summary": "Gets the value of the calendarID property."
				},
				"getDaysOfTheMonth": {
					"summary": "Gets the value of the daysOfTheMonth property."
				},
				"getDaysOfTheWeek": {
					"summary": "Gets the value of the daysOfTheWeek property."
				},
				"getDaysOfTheYear": {
					"summary": "Gets the value of the daysOfTheYear property."
				},
				"getEnd": {
					"summary": "Gets the value of the end property."
				},
				"getFrequency": {
					"summary": "Gets the value of the frequency property."
				},
				"getInterval": {
					"summary": "Gets the value of the interval property."
				},
				"getMonthsOfTheYear": {
					"summary": "Gets the value of the monthsOfTheYear property."
				},
				"getSetPositions": {
					"summary": "Gets the value of the setPositions property."
				},
				"getWeeksOfTheYear": {
					"summary": "Gets the value of the weeksOfTheYear property."
				}
			}
		},
		"Ti.Calendar.Alert": {
			"parent": "Ti.Proxy",
			"summary": "An object that represents a single alert for an event in an calendar.",
			"properties": {
				"absoluteDate": {
					"summary": "The absolute date for the alarm."
				},
				"alarmTime": {
					"summary": "Date/time at which this alert alarm is set to trigger.",
					"readOnly": true
				},
				"begin": {
					"summary": "Start date/time for the corresponding event.",
					"readOnly": true
				},
				"end": {
					"summary": "End date/time for the corresponding event.",
					"readOnly": true
				},
				"eventId": {
					"summary": "Identifier of the event for which this alert is set.",
					"readOnly": true
				},
				"id": {
					"summary": "Identifier of this alert.",
					"readOnly": true
				},
				"minutes": {
					"summary": "Reminder notice period in minutes, that determines how long prior to the event this alert \nshould trigger.",
					"readOnly": true
				},
				"relativeOffset": {
					"summary": "The offset from the start of an event, at which the alarm fires."
				},
				"state": {
					"summary": "The current state of the alert.",
					"readOnly": true
				}
			},
			"methods": {
				"getAbsoluteDate": {
					"summary": "Gets the value of the absoluteDate property."
				},
				"getAlarmTime": {
					"summary": "Gets the value of the alarmTime property."
				},
				"getBegin": {
					"summary": "Gets the value of the begin property."
				},
				"getEnd": {
					"summary": "Gets the value of the end property."
				},
				"getEventId": {
					"summary": "Gets the value of the eventId property."
				},
				"getId": {
					"summary": "Gets the value of the id property."
				},
				"getMinutes": {
					"summary": "Gets the value of the minutes property."
				},
				"getRelativeOffset": {
					"summary": "Gets the value of the relativeOffset property."
				},
				"getState": {
					"summary": "Gets the value of the state property."
				},
				"setAbsoluteDate": {
					"summary": "Sets the value of the absoluteDate property."
				},
				"setRelativeOffset": {
					"summary": "Sets the value of the relativeOffset property."
				}
			}
		}
	},
	"Module": {
		"Ti.Module": {
			"parent": "Ti.Proxy",
			"summary": "Base type for all Ti modules.",
			"properties": {},
			"methods": {}
		}
	},
	"Filesystem": {
		"Ti.Filesystem": {
			"parent": "Ti.Module",
			"summary": "The top level filesystem module, used to access files and directories on the device.",
			"properties": {
				"MODE_APPEND": {
					"summary": "Constant for append mode for file operations.",
					"readOnly": true
				},
				"MODE_READ": {
					"summary": "Constant for read mode for file operations.",
					"readOnly": true
				},
				"MODE_WRITE": {
					"summary": "Constant for write mode for file operations.",
					"readOnly": true
				},
				"applicationCacheDirectory": {
					"summary": "Path to the application's internal cache directory.",
					"readOnly": true
				},
				"applicationDataDirectory": {
					"summary": "Path to the application's data directory.",
					"readOnly": true
				},
				"applicationDirectory": {
					"summary": "Path to the iOS application directory.",
					"readOnly": true
				},
				"applicationSupportDirectory": {
					"summary": "Path to the application support directory.",
					"readOnly": true
				},
				"externalStorageDirectory": {
					"summary": "Path to a directory on removable storage, such as SD card.",
					"readOnly": true
				},
				"lineEnding": {
					"summary": "Platform-specific line ending constant.",
					"readOnly": true
				},
				"resRawDirectory": {
					"summary": "Path to the application's raw resource directory.",
					"readOnly": true
				},
				"resourcesDirectory": {
					"summary": "Path to the application's resource directory.",
					"readOnly": true
				},
				"separator": {
					"summary": "Platform-specific path separator constant.",
					"readOnly": true
				},
				"tempDirectory": {
					"summary": "Path for the application's temporary directory.",
					"readOnly": true
				}
			},
			"methods": {
				"createTempDirectory": {
					"summary": "Creates a temporary directory and returns a File object representing the new directory."
				},
				"createTempFile": {
					"summary": "Creates a temporary file and returns a File object representing the new file."
				},
				"getApplicationCacheDirectory": {
					"summary": "Gets the value of the applicationCacheDirectory property."
				},
				"getApplicationDataDirectory": {
					"summary": "Gets the value of the applicationDataDirectory property."
				},
				"getApplicationDirectory": {
					"summary": "Gets the value of the applicationDirectory property."
				},
				"getApplicationSupportDirectory": {
					"summary": "Gets the value of the applicationSupportDirectory property."
				},
				"getExternalStorageDirectory": {
					"summary": "Gets the value of the externalStorageDirectory property."
				},
				"getFile": {
					"summary": "Returns a File object representing the file identified by the path arguments."
				},
				"getLineEnding": {
					"summary": "Gets the value of the lineEnding property."
				},
				"getResRawDirectory": {
					"summary": "Gets the value of the resRawDirectory property."
				},
				"getResourcesDirectory": {
					"summary": "Gets the value of the resourcesDirectory property."
				},
				"getSeparator": {
					"summary": "Gets the value of the separator property."
				},
				"getTempDirectory": {
					"summary": "Gets the value of the tempDirectory property."
				},
				"isExternalStoragePresent": {
					"summary": "Returns true if the device supports external storage and the external storage device is mounted."
				},
				"openStream": {
					"summary": "Opens file using the Ti.IOStream interface."
				}
			}
		},
		"Ti.Filesystem.File": {
			"parent": "Ti.Proxy",
			"summary": "Object representing a path to a file or directory in the device's persistent storage.",
			"properties": {
				"executable": {
					"summary": "true if the file is executable.",
					"readOnly": true
				},
				"hidden": {
					"summary": "Set to true if the file is hidden."
				},
				"name": {
					"summary": "Name of the file.",
					"readOnly": true
				},
				"nativePath": {
					"summary": "Native path associated with this file object, as a file URL.",
					"readOnly": true
				},
				"parent": {
					"summary": "A File object representing the parent directory of the file identified by this object.",
					"readOnly": true
				},
				"readonly": {
					"summary": "true if the file identified by this object is read-only.",
					"readOnly": true
				},
				"remoteBackup": {
					"summary": "Value indicating whether or not to back up to a cloud service."
				},
				"size": {
					"summary": "Size, in bytes, of the file identified by this object.",
					"readOnly": true
				},
				"symbolicLink": {
					"summary": "true if the file identified by this object is a symbolic link.",
					"readOnly": true
				},
				"writable": {
					"summary": "true if the file identified by this object is writable.",
					"readOnly": true
				},
				"writeable": {
					"summary": "true if the file identified by this object is writable.",
					"readOnly": true
				}
			},
			"methods": {
				"append": {
					"summary": "Appends data to the file identified by this file object."
				},
				"copy": {
					"summary": "Copies the file identified by this file object to a new path."
				},
				"createDirectory": {
					"summary": "Creates a directory at the path identified by this file object."
				},
				"createFile": {
					"summary": "Creates a file at the path identified by this file object."
				},
				"createTimestamp": {
					"summary": "Returns the creation timestamp for the file identified by this file object."
				},
				"deleteDirectory": {
					"summary": "Deletes the directory identified by this file object."
				},
				"deleteFile": {
					"summary": "Deletes the file identified by this file object."
				},
				"exists": {
					"summary": "Returns true if the file or directory identified by this file object exists on the device."
				},
				"extension": {
					"summary": "Returns the extension for the file identified by this file object."
				},
				"getDirectoryListing": {
					"summary": "Returns a listing of the directory identified by this file object, or null\nif this object doesn't identify a directory."
				},
				"getExecutable": {
					"summary": "Gets the value of the executable property."
				},
				"getHidden": {
					"summary": "Gets the value of the hidden property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getNativePath": {
					"summary": "Gets the value of the nativePath property."
				},
				"getParent": {
					"summary": "Returns the path of the parent directory holding the file identified by this file object, as a String or as a File object."
				},
				"getReadonly": {
					"summary": "Gets the value of the readonly property."
				},
				"getRemoteBackup": {
					"summary": "Gets the value of the remoteBackup property."
				},
				"getSize": {
					"summary": "Gets the value of the size property."
				},
				"getSymbolicLink": {
					"summary": "Gets the value of the symbolicLink property."
				},
				"getWritable": {
					"summary": "Gets the value of the writable property."
				},
				"getWriteable": {
					"summary": "Gets the value of the writeable property."
				},
				"isDirectory": {
					"summary": "Returns true if this file object represents a directory."
				},
				"isFile": {
					"summary": "Returns true if this file object represents an ordinary file."
				},
				"modificationTimestamp": {
					"summary": "Returns the last modification time for this file."
				},
				"move": {
					"summary": "Moves the file identified by this file object to another path."
				},
				"open": {
					"summary": "Opens the file identified by this file object for random access."
				},
				"read": {
					"summary": "Returns the contents of the file identified by this file object as a Blob."
				},
				"rename": {
					"summary": "Renames the file identified by this file object."
				},
				"resolve": {
					"summary": "Returns the fully-resolved native path associated with this file object."
				},
				"setHidden": {
					"summary": "Sets the value of the hidden property."
				},
				"setRemoteBackup": {
					"summary": "Sets the value of the remoteBackup property."
				},
				"spaceAvailable": {
					"summary": "Returns the amount of free space available on the device where the file identified by this file object is stored."
				},
				"write": {
					"summary": "Writes the specified data to the file identified by this file object."
				}
			}
		},
		"Ti.Filesystem.FileStream": {
			"parent": "Ti.IOStream",
			"summary": "Wrapper around Ti.Filesystem.File that implements the Ti.IOStream interface",
			"properties": {},
			"methods": {}
		}
	},
	"Network": {
		"Ti.Network.Socket.UDP": {
			"parent": "Ti.IOStream",
			"summary": "UDP socket.",
			"properties": {
				"data": {
					"summary": "Callback to be fired when data arrives on the UDP socket."
				},
				"error": {
					"summary": "Callback to be fired if an error occurs during the UDP sockect session."
				},
				"port": {
					"summary": "The port to connect to or listen on."
				},
				"started": {
					"summary": "Callback to be fired when the local UDP socket enters the \"bound\" state."
				}
			},
			"methods": {
				"getData": {
					"summary": "Gets the value of the data property."
				},
				"getError": {
					"summary": "Gets the value of the error property."
				},
				"getPort": {
					"summary": "Gets the value of the port property."
				},
				"getStarted": {
					"summary": "Gets the value of the started property."
				},
				"sendBytes": {
					"summary": "Will send the bytes as a UDP packet to designated host and port."
				},
				"sendString": {
					"summary": "Will send the string as a UDP packet to designated host and port."
				},
				"setData": {
					"summary": "Sets the value of the data property."
				},
				"setError": {
					"summary": "Sets the value of the error property."
				},
				"setPort": {
					"summary": "Sets the value of the port property."
				},
				"setStarted": {
					"summary": "Sets the value of the started property."
				},
				"start": {
					"summary": "Will start up the local UDP socket."
				},
				"stop": {
					"summary": "Will tear down the local UDP socket."
				}
			}
		},
		"Ti.Network": {
			"parent": "Ti.Module",
			"summary": "The top level network module.",
			"properties": {
				"INADDR_ANY": {
					"summary": "Special hostname value for listening sockets, representing all\nlocally available network interfaces.",
					"readOnly": true
				},
				"NETWORK_LAN": {
					"summary": "A networkType value indicating that the device is\ncommunicating over a local-area network.",
					"readOnly": true
				},
				"NETWORK_MOBILE": {
					"summary": "A networkType value indicating that the device is\ncommunicating over a mobile network.",
					"readOnly": true
				},
				"NETWORK_NONE": {
					"summary": "A networkType value indicating that no \nnetwork is available.",
					"readOnly": true
				},
				"NETWORK_UNKNOWN": {
					"summary": "A networkType value indicating that the\ncurrent network type is unknown.",
					"readOnly": true
				},
				"NETWORK_WIFI": {
					"summary": "A networkType value indicating that the\ndevice is communicating over a WiFi network.",
					"readOnly": true
				},
				"NOTIFICATION_TYPE_ALERT": {
					"summary": "Constant value for an Alert style push notification.",
					"readOnly": true
				},
				"NOTIFICATION_TYPE_BADGE": {
					"summary": "Constant value for a Badge style push notification.",
					"readOnly": true
				},
				"NOTIFICATION_TYPE_NEWSSTAND": {
					"summary": "Constant value for a Newsstand style push notification. Only available on iOS5 and later",
					"readOnly": true
				},
				"NOTIFICATION_TYPE_SOUND": {
					"summary": "Constant value for a Sound style push notification.",
					"readOnly": true
				},
				"READ_MODE": {
					"summary": "Constant value specifying read-only mode for sockets.",
					"readOnly": true
				},
				"READ_WRITE_MODE": {
					"summary": "Constant value specifying read-write mode for sockets.",
					"readOnly": true
				},
				"SOCKET_CLOSED": {
					"summary": "Constant value representing a socket in the CLOSED state.",
					"readOnly": true
				},
				"SOCKET_CONNECTED": {
					"summary": "Constant value representing a socket in the CONNECTED state.",
					"readOnly": true
				},
				"SOCKET_ERROR": {
					"summary": "Constant value representing a socket in the ERROR state.",
					"readOnly": true
				},
				"SOCKET_INITIALIZED": {
					"summary": "Constant value representing a socket in the INITIALIZED state.",
					"readOnly": true
				},
				"SOCKET_LISTENING": {
					"summary": "Constant value representing a socket in the LISTENING state.",
					"readOnly": true
				},
				"TLS_VERSION_1_0": {
					"summary": "Constant value specifying TLS version 1.0 for SSL.",
					"readOnly": true
				},
				"TLS_VERSION_1_1": {
					"summary": "Constant value specifying TLS version 1.1 for SSL.",
					"readOnly": true
				},
				"TLS_VERSION_1_2": {
					"summary": "Constant value specifying TLS version 1.2 for SSL.",
					"readOnly": true
				},
				"WRITE_MODE": {
					"summary": "Constant value specifying write-only mode for sockets.",
					"readOnly": true
				},
				"allHTTPCookies": {
					"summary": "A list of all cookies in the cookie storage.",
					"readOnly": true
				},
				"httpURLFormatter": {
					"summary": "User-defined function that is called everytime HTTPClient connects to a remote resource."
				},
				"networkType": {
					"summary": "Network type value as a constant.",
					"readOnly": true
				},
				"networkTypeName": {
					"summary": "Network type as a String. Returns one of NONE, WIFI, LAN, MOBILE, or UNKNOWN.",
					"readOnly": true
				},
				"online": {
					"summary": "Boolean value indicating if the device can reach the Internet.",
					"readOnly": true
				},
				"remoteDeviceUUID": {
					"summary": "Remote device UUID if the device is registered with the Apple Push Notification\nService, or null if it is not registered.",
					"readOnly": true
				},
				"remoteNotificationTypes": {
					"summary": "Array of push notification type constants enabled for the application.",
					"readOnly": true
				},
				"remoteNotificationsEnabled": {
					"summary": "Indicates whether push  notifications have been enabled using \nregisterForPushNotifications.",
					"readOnly": true
				}
			},
			"methods": {
				"addConnectivityListener": {
					"summary": "Legacy method to add a connectivity listener to listen for network changes."
				},
				"addHTTPCookie": {
					"summary": "Adds a cookie to the HTTP client cookie store."
				},
				"addSystemCookie": {
					"summary": "Adds a cookie to the system cookie store."
				},
				"createBonjourBrowser": {
					"summary": "Creates and returns a BonjourBrowser object."
				},
				"createBonjourService": {
					"summary": "Creates and returns a BonjourService object."
				},
				"createCookie": {
					"summary": "Creates and returns an instance of Ti.Network.Cookie."
				},
				"createHTTPClient": {
					"summary": "Creates and returns an instance of Ti.Network.HTTPClient."
				},
				"createTCPSocket": {
					"summary": "Legacy method to create and return an instance of Ti.Network.TCPSocket."
				},
				"decodeURIComponent": {
					"summary": "Returns a decoded version of a URI encoded value."
				},
				"encodeURIComponent": {
					"summary": "Returns a URI encoded version of the specified URI component."
				},
				"getAllHTTPCookies": {
					"summary": "Gets the value of the allHTTPCookies property."
				},
				"getHTTPCookies": {
					"summary": "Gets all the cookies with the domain, path and name matched with the given values from the HTTP client cookie store."
				},
				"getHTTPCookiesForDomain": {
					"summary": "Gets all the cookies with the domain matched with the given values from the HTTP client cookie store."
				},
				"getHttpURLFormatter": {
					"summary": "Gets the value of the httpURLFormatter property."
				},
				"getNetworkType": {
					"summary": "Gets the value of the networkType property."
				},
				"getNetworkTypeName": {
					"summary": "Gets the value of the networkTypeName property."
				},
				"getOnline": {
					"summary": "Gets the value of the online property."
				},
				"getRemoteDeviceUUID": {
					"summary": "Gets the value of the remoteDeviceUUID property."
				},
				"getRemoteNotificationTypes": {
					"summary": "Gets the value of the remoteNotificationTypes property."
				},
				"getRemoteNotificationsEnabled": {
					"summary": "Gets the value of the remoteNotificationsEnabled property."
				},
				"getSystemCookies": {
					"summary": "Gets all the cookies with the domain, path and name matched with the given values from the system cookie store."
				},
				"registerForPushNotifications": {
					"summary": "Registers for push notifications with the Apple Push Notification Service."
				},
				"removeAllHTTPCookies": {
					"summary": "Removes all the cookies from the HTTP client cookie store."
				},
				"removeAllSystemCookies": {
					"summary": "Removes all the cookie from the system client cookie store."
				},
				"removeConnectivityListener": {
					"summary": "Legacy method to remove a connectivity listener."
				},
				"removeHTTPCookie": {
					"summary": "Removes the cookie with the domain, path and name exactly the same as the given values from the HTTP client cookie store."
				},
				"removeHTTPCookiesForDomain": {
					"summary": "Removes the cookies with the domain matched with the given values from the HTTP client cookie store."
				},
				"removeSystemCookie": {
					"summary": "Removes the cookie with the domain, path and name exactly the same as the given values from the system cookie store."
				},
				"setHttpURLFormatter": {
					"summary": "Sets the value of the httpURLFormatter property."
				},
				"unregisterForPushNotifications": {
					"summary": "Unregisters the application for push notifications."
				}
			}
		},
		"Ti.Network.BonjourService": {
			"parent": "Ti.Proxy",
			"summary": "Describes a service on the network which is published by Bonjour.",
			"properties": {
				"domain": {
					"summary": "the domain of the service"
				},
				"isLocal": {
					"summary": "whether or not the service is local to the device"
				},
				"name": {
					"summary": "the name of the service"
				},
				"socket": {
					"summary": "the TCPSocket object that is used to connect to the service"
				},
				"type": {
					"summary": "the type of the service"
				}
			},
			"methods": {
				"getDomain": {
					"summary": "Gets the value of the domain property."
				},
				"getIsLocal": {
					"summary": "Gets the value of the isLocal property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getSocket": {
					"summary": "Gets the value of the socket property."
				},
				"getType": {
					"summary": "Gets the value of the type property."
				},
				"publish": {
					"summary": "Publish a Bonjour service to the network.  Only works if isLocal is TRUE"
				},
				"resolve": {
					"summary": "Resolve a Bonjour service from the network.  Must be done before attempting to access the service's socket information, if a remote service.  You cannot resolve a locally published service."
				},
				"setDomain": {
					"summary": "Sets the value of the domain property."
				},
				"setIsLocal": {
					"summary": "Sets the value of the isLocal property."
				},
				"setName": {
					"summary": "Sets the value of the name property."
				},
				"setSocket": {
					"summary": "Sets the value of the socket property."
				},
				"setType": {
					"summary": "Sets the value of the type property."
				},
				"stop": {
					"summary": "Halts publication of a service."
				}
			}
		},
		"Ti.Network.Socket.TCP": {
			"parent": "Ti.IOStream",
			"summary": "TCP socket that implements the Ti.IOStream interface.",
			"properties": {
				"accepted": {
					"summary": "Callback to be fired when a listener accepts a connection."
				},
				"connected": {
					"summary": "Callback to be fired when the socket enters the \"connected\" state."
				},
				"error": {
					"summary": "Callback to be fired when the socket enters the ERROR state."
				},
				"host": {
					"summary": "The host to connect to or listen on."
				},
				"listenQueueSize": {
					"summary": "Max number of pending incoming connections to be allowed when the socket is in the LISTENING state."
				},
				"port": {
					"summary": "The port to connect to or listen on."
				},
				"state": {
					"summary": "Current state of the socket.",
					"readOnly": true
				},
				"timeout": {
					"summary": "Timeout, in milliseconds, for connect and all write operations."
				}
			},
			"methods": {
				"accept": {
					"summary": "Tells a LISTENING socket to accept a connection request at the top of a listener's request queue when one becomes available."
				},
				"connect": {
					"summary": "Attempts to connect the socket to its host/port."
				},
				"getAccepted": {
					"summary": "Gets the value of the accepted property."
				},
				"getConnected": {
					"summary": "Gets the value of the connected property."
				},
				"getError": {
					"summary": "Gets the value of the error property."
				},
				"getHost": {
					"summary": "Gets the value of the host property."
				},
				"getListenQueueSize": {
					"summary": "Gets the value of the listenQueueSize property."
				},
				"getPort": {
					"summary": "Gets the value of the port property."
				},
				"getState": {
					"summary": "Gets the value of the state property."
				},
				"getTimeout": {
					"summary": "Gets the value of the timeout property."
				},
				"listen": {
					"summary": "Attempts to start listening on the socket's host/port."
				},
				"setAccepted": {
					"summary": "Sets the value of the accepted property."
				},
				"setConnected": {
					"summary": "Sets the value of the connected property."
				},
				"setError": {
					"summary": "Sets the value of the error property."
				},
				"setHost": {
					"summary": "Sets the value of the host property."
				},
				"setListenQueueSize": {
					"summary": "Sets the value of the listenQueueSize property."
				},
				"setPort": {
					"summary": "Sets the value of the port property."
				},
				"setTimeout": {
					"summary": "Sets the value of the timeout property."
				}
			}
		},
		"Ti.Network.Socket": {
			"parent": "Ti.Module",
			"summary": "Socket module, used for creating sockets.",
			"properties": {
				"CLOSED": {
					"summary": "State value representing a closed socket.",
					"readOnly": true
				},
				"CONNECTED": {
					"summary": "State value representing a connected socket.",
					"readOnly": true
				},
				"ERROR": {
					"summary": "State value indicating an error has occurred on the socket.",
					"readOnly": true
				},
				"INITIALIZED": {
					"summary": "State value representing an initialized socket.",
					"readOnly": true
				},
				"LISTENING": {
					"summary": "State value representing a socket that is listening for connections.",
					"readOnly": true
				}
			},
			"methods": {
				"createTCP": {
					"summary": "Returns a new TCP socket object."
				},
				"createUDP": {
					"summary": "Returns a new UDP socket object."
				}
			}
		},
		"Ti.Network.HTTPClient": {
			"parent": "Ti.Proxy",
			"summary": "HTTP client object that (mostly) implements the XMLHttpRequest specification.",
			"properties": {
				"DONE": {
					"summary": "Ready state constant indicating that the request is complete.",
					"readOnly": true
				},
				"HEADERS_RECEIVED": {
					"summary": "Ready state constant indicating that response headers have been received.",
					"readOnly": true
				},
				"LOADING": {
					"summary": "Ready state constant indicating that response data is being received from the remote server.",
					"readOnly": true
				},
				"OPENED": {
					"summary": "Ready state constant indicating that the connection has been opened, but the request has\nnot yet been sent.",
					"readOnly": true
				},
				"UNSENT": {
					"summary": "Ready state constant indicating that HTTPClient request has not been opened or sent.",
					"readOnly": true
				},
				"allResponseHeaders": {
					"summary": "All of the response headers.",
					"readOnly": true
				},
				"autoEncodeUrl": {
					"summary": "Determines whether automatic encoding is enabled for the specified URL."
				},
				"autoRedirect": {
					"summary": "Determines whether automatic automatic handling of HTTP redirects is enabled."
				},
				"cache": {
					"summary": "Determines whether HTTP responses are cached."
				},
				"connected": {
					"summary": "Indicates whether the response was successful.",
					"readOnly": true
				},
				"connectionType": {
					"summary": "Connection type, normally either GET or POST.",
					"readOnly": true
				},
				"domain": {
					"summary": "Sets the domain parameter for authentication credentials."
				},
				"enableKeepAlive": {
					"summary": "Determines whether the client should attempt to keep a persistent connection."
				},
				"file": {
					"summary": "Target local file to receive data."
				},
				"location": {
					"summary": "Absolute URL of the request.",
					"readOnly": true
				},
				"ondatastream": {
					"summary": "Function to be called at regular intervals as the request data is being received."
				},
				"onerror": {
					"summary": "Function to be called upon a error response."
				},
				"onload": {
					"summary": "Function to be called upon a successful response."
				},
				"onreadystatechange": {
					"summary": "Function to be called for each readyState change."
				},
				"onsendstream": {
					"summary": "Function to be called at regular intervals as the request data is being transmitted."
				},
				"password": {
					"summary": "Sets the password parameter for authentication credentials."
				},
				"readyState": {
					"summary": "The current ready state of this HTTP request.",
					"readOnly": true
				},
				"responseData": {
					"summary": "Response data as a Blob object.",
					"readOnly": true
				},
				"responseText": {
					"summary": "Response as text.",
					"readOnly": true
				},
				"responseXML": {
					"summary": "Response object as an XML DOM Document object.",
					"readOnly": true
				},
				"securityManager": {
					"summary": "The Security Manager for this client."
				},
				"status": {
					"summary": "Response HTTP status code.",
					"readOnly": true
				},
				"statusText": {
					"summary": "Human-readable status message associated with the status code.",
					"readOnly": true
				},
				"timeout": {
					"summary": "Timeout in milliseconds when the connection should be aborted."
				},
				"tlsVersion": {
					"summary": "Sets the TLS version to use for handshakes."
				},
				"username": {
					"summary": "Sets the username parameter for authentication credentials."
				},
				"validatesSecureCertificate": {
					"summary": "Determines how SSL certification validation is performed on connection."
				},
				"withCredentials": {
					"summary": "Determines whether the request should include any cookies and HTTP authentication information."
				}
			},
			"methods": {
				"abort": {
					"summary": "Cancels a pending request."
				},
				"addAuthFactory": {
					"summary": "Registers a new AuthSchemeFactory for a given scheme."
				},
				"addKeyManager": {
					"summary": "Adds a custom key manager."
				},
				"addTrustManager": {
					"summary": "Adds a custom trust manager."
				},
				"clearCookies": {
					"summary": "Clears any cookies stored for the host."
				},
				"getAllResponseHeaders": {
					"summary": "Gets the value of the allResponseHeaders property."
				},
				"getAutoEncodeUrl": {
					"summary": "Gets the value of the autoEncodeUrl property."
				},
				"getAutoRedirect": {
					"summary": "Gets the value of the autoRedirect property."
				},
				"getCache": {
					"summary": "Gets the value of the cache property."
				},
				"getConnected": {
					"summary": "Gets the value of the connected property."
				},
				"getConnectionType": {
					"summary": "Gets the value of the connectionType property."
				},
				"getDomain": {
					"summary": "Gets the value of the domain property."
				},
				"getEnableKeepAlive": {
					"summary": "Gets the value of the enableKeepAlive property."
				},
				"getFile": {
					"summary": "Gets the value of the file property."
				},
				"getLocation": {
					"summary": "Gets the value of the location property."
				},
				"getOndatastream": {
					"summary": "Gets the value of the ondatastream property."
				},
				"getOnerror": {
					"summary": "Gets the value of the onerror property."
				},
				"getOnload": {
					"summary": "Gets the value of the onload property."
				},
				"getOnreadystatechange": {
					"summary": "Gets the value of the onreadystatechange property."
				},
				"getOnsendstream": {
					"summary": "Gets the value of the onsendstream property."
				},
				"getPassword": {
					"summary": "Gets the value of the password property."
				},
				"getReadyState": {
					"summary": "Gets the value of the readyState property."
				},
				"getResponseData": {
					"summary": "Gets the value of the responseData property."
				},
				"getResponseHeader": {
					"summary": "Returns the value of the specified response header."
				},
				"getResponseText": {
					"summary": "Gets the value of the responseText property."
				},
				"getResponseXML": {
					"summary": "Gets the value of the responseXML property."
				},
				"getSecurityManager": {
					"summary": "Gets the value of the securityManager property."
				},
				"getStatus": {
					"summary": "Gets the value of the status property."
				},
				"getStatusText": {
					"summary": "Gets the value of the statusText property."
				},
				"getTimeout": {
					"summary": "Gets the value of the timeout property."
				},
				"getTlsVersion": {
					"summary": "Gets the value of the tlsVersion property."
				},
				"getUsername": {
					"summary": "Gets the value of the username property."
				},
				"getValidatesSecureCertificate": {
					"summary": "Gets the value of the validatesSecureCertificate property."
				},
				"getWithCredentials": {
					"summary": "Gets the value of the withCredentials property."
				},
				"open": {
					"summary": "Opens the request and prepares the connection."
				},
				"send": {
					"summary": "Sends the request."
				},
				"setAutoEncodeUrl": {
					"summary": "Sets the value of the autoEncodeUrl property."
				},
				"setAutoRedirect": {
					"summary": "Sets the value of the autoRedirect property."
				},
				"setCache": {
					"summary": "Sets the value of the cache property."
				},
				"setDomain": {
					"summary": "Sets the value of the domain property."
				},
				"setEnableKeepAlive": {
					"summary": "Sets the value of the enableKeepAlive property."
				},
				"setFile": {
					"summary": "Sets the value of the file property."
				},
				"setOndatastream": {
					"summary": "Sets the value of the ondatastream property."
				},
				"setOnerror": {
					"summary": "Sets the value of the onerror property."
				},
				"setOnload": {
					"summary": "Sets the value of the onload property."
				},
				"setOnreadystatechange": {
					"summary": "Sets the value of the onreadystatechange property."
				},
				"setOnsendstream": {
					"summary": "Sets the value of the onsendstream property."
				},
				"setPassword": {
					"summary": "Sets the value of the password property."
				},
				"setRequestHeader": {
					"summary": "Sets the value for the specified request header. Must be called after open but before send."
				},
				"setTimeout": {
					"summary": "Sets the request timeout."
				},
				"setTlsVersion": {
					"summary": "Sets the value of the tlsVersion property."
				},
				"setUsername": {
					"summary": "Sets the value of the username property."
				},
				"setValidatesSecureCertificate": {
					"summary": "Sets the value of the validatesSecureCertificate property."
				},
				"setWithCredentials": {
					"summary": "Sets the value of the withCredentials property."
				}
			}
		},
		"Ti.Network.BonjourBrowser": {
			"parent": "Ti.Proxy",
			"summary": "A browser for the discovery and retrieval of Bonjour services available on the network.",
			"properties": {
				"domain": {
					"summary": "The domain the browser is searching in"
				},
				"isSearching": {
					"summary": "Whether or not the browser is currently searching"
				},
				"serviceType": {
					"summary": "The type of the service the browser searches for"
				}
			},
			"methods": {
				"getDomain": {
					"summary": "Gets the value of the domain property."
				},
				"getIsSearching": {
					"summary": "Gets the value of the isSearching property."
				},
				"getServiceType": {
					"summary": "Gets the value of the serviceType property."
				},
				"search": {
					"summary": "Conduct a search for Bonjour services matching the type and domain specified during creation"
				},
				"setDomain": {
					"summary": "Sets the value of the domain property."
				},
				"setIsSearching": {
					"summary": "Sets the value of the isSearching property."
				},
				"setServiceType": {
					"summary": "Sets the value of the serviceType property."
				},
				"stopSearch": {
					"summary": "Halt an ongoing search"
				}
			}
		},
		"Ti.Network.Cookie": {
			"parent": "Ti.Proxy",
			"summary": "Cookie object used to manage the system cookie store and HTTP client cookie store.",
			"properties": {
				"comment": {
					"summary": "The comment describing the purpose of this cookie"
				},
				"domain": {
					"summary": "The domain attribute of the cookie."
				},
				"expiryDate": {
					"summary": "The expiration Date of the cookie."
				},
				"httponly": {
					"summary": "The httponly attribute of the cookie."
				},
				"name": {
					"summary": "The name of the cookie.",
					"readOnly": true
				},
				"originalUrl": {
					"summary": "The origual url attribute of the cookie."
				},
				"path": {
					"summary": "The path attribute of the cookie."
				},
				"secure": {
					"summary": "The secure attribute of the cookie."
				},
				"value": {
					"summary": "The value of the cookie."
				},
				"version": {
					"summary": "The version of the cookie specification to which this cookie conforms."
				}
			},
			"methods": {
				"getComment": {
					"summary": "Gets the value of the comment property."
				},
				"getDomain": {
					"summary": "Gets the value of the domain property."
				},
				"getExpiryDate": {
					"summary": "Gets the value of the expiryDate property."
				},
				"getHttponly": {
					"summary": "Gets the value of the httponly property."
				},
				"getName": {
					"summary": "Gets the value of the name property."
				},
				"getOriginalUrl": {
					"summary": "Gets the value of the originalUrl property."
				},
				"getPath": {
					"summary": "Gets the value of the path property."
				},
				"getSecure": {
					"summary": "Gets the value of the secure property."
				},
				"getValue": {
					"summary": "Gets the value of the value property."
				},
				"getVersion": {
					"summary": "Gets the value of the version property."
				},
				"isValid": {
					"summary": "Returns true if the cookie is valid."
				},
				"setComment": {
					"summary": "Sets the value of the comment property."
				},
				"setDomain": {
					"summary": "Sets the value of the domain property."
				},
				"setExpiryDate": {
					"summary": "Sets the value of the expiryDate property."
				},
				"setHttponly": {
					"summary": "Sets the value of the httponly property."
				},
				"setOriginalUrl": {
					"summary": "Sets the value of the originalUrl property."
				},
				"setPath": {
					"summary": "Sets the value of the path property."
				},
				"setSecure": {
					"summary": "Sets the value of the secure property."
				},
				"setValue": {
					"summary": "Sets the value of the value property."
				},
				"setVersion": {
					"summary": "Sets the value of the version property."
				}
			}
		}
	},
	"Yahoo": {
		"Ti.Yahoo": {
			"parent": "Ti.Module",
			"summary": "The top level Yahoo module.  The Yahoo module is used for accessing Yahoo related API services.",
			"properties": {},
			"methods": {
				"yql": {
					"summary": "invoke a Yahoo YQL query"
				}
			}
		}
	},
	"undefined": {
		"Ti": {
			"parent": "Ti.Module",
			"summary": "The top-level Ti module.",
			"properties": {
				"buildDate": {
					"summary": "Date of the Ti build.",
					"readOnly": true
				},
				"buildHash": {
					"summary": "Git hash of the Ti build.",
					"readOnly": true
				},
				"userAgent": {
					"summary": "User-agent string used by Ti."
				},
				"version": {
					"summary": "Version of Ti that is executing.",
					"readOnly": true
				}
			},
			"methods": {
				"createBuffer": {
					"summary": "Creates a new buffer based on the params."
				},
				"getBuildDate": {
					"summary": "Gets the value of the buildDate property."
				},
				"getBuildHash": {
					"summary": "Gets the value of the buildHash property."
				},
				"getUserAgent": {
					"summary": "Gets the value of the userAgent property."
				},
				"getVersion": {
					"summary": "Gets the value of the version property."
				},
				"include": {
					"summary": "Includes JavaScript code from one or more files."
				},
				"setUserAgent": {
					"summary": "Sets the value of the userAgent property."
				}
			}
		}
	},
	"Gesture": {
		"Ti.Gesture": {
			"parent": "Ti.Module",
			"summary": "The Gesture module is responsible for high-level device gestures such as orientation changes \nand shake gestures.",
			"properties": {
				"landscape": {
					"summary": "Indicates whether current window is considered landscape by the device.",
					"readOnly": true
				},
				"orientation": {
					"summary": "Orientation of the current window.",
					"readOnly": true
				},
				"portrait": {
					"summary": "Indicates whether current window is considered portrait by the device.",
					"readOnly": true
				}
			},
			"methods": {
				"getLandscape": {
					"summary": "Gets the value of the landscape property."
				},
				"getOrientation": {
					"summary": "Gets the value of the orientation property."
				},
				"getPortrait": {
					"summary": "Gets the value of the portrait property."
				},
				"isFaceDown": {
					"summary": "Returns whether current window is considered face down by the device."
				},
				"isFaceUp": {
					"summary": "Returns whether current window is considered face up by the device."
				},
				"isLandscape": {
					"summary": "Returns whether current window is considered landscape by the device."
				},
				"isPortrait": {
					"summary": "Returns whether current window is considered portrait by the device."
				}
			}
		}
	},
	"Analytics": {
		"Ti.Analytics": {
			"parent": "Ti.Module",
			"summary": "Used for transmitting developer-defined Analytics events to the Appcelerator Analytics product. ",
			"properties": {
				"lastEvent": {
					"summary": "JSON representation of the last analytics event generated.",
					"readOnly": true
				}
			},
			"methods": {
				"addEvent": {
					"summary": "Sends a generic event for this application session.\nNot displayed in Analytics UI."
				},
				"featureEvent": {
					"summary": "Sends a feature event for this application session."
				},
				"getLastEvent": {
					"summary": "Gets the value of the lastEvent property."
				},
				"navEvent": {
					"summary": "Sends a navigation event for this application session. \nNot displayed in Analytics UI."
				},
				"settingsEvent": {
					"summary": "Sends a settings event for this application session.\nNot displayed in Analytics UI."
				},
				"timedEvent": {
					"summary": "Send a timed event for this application session.\nNot displayed in Analytics UI."
				},
				"userEvent": {
					"summary": "Sends a user event for this application session. Not displayed in Analytics UI."
				}
			}
		}
	},
	"Accelerometer": {
		"Ti.Accelerometer": {
			"parent": "Ti.Module",
			"summary": "The top-level Accelerometer module, used to determine the device's physical position.",
			"properties": {},
			"methods": {}
		}
	},
	"Geolocation": {
		"Ti.Geolocation.MobileWeb": {
			"parent": "Ti.Module",
			"summary": "The Mobile Web specific geolocation capabilities.",
			"properties": {
				"forwardGeocoderTimeout": {
					"summary": "The time within which forward geocoder requests must succeed, in milliseconds."
				},
				"locationTimeout": {
					"summary": "The time within which location requests must succeed, in milliseconds."
				},
				"maximumHeadingAge": {
					"summary": "The maximum age of cached locations acceptible for heading requests, in milliseconds."
				},
				"maximumLocationAge": {
					"summary": "The maximum age of cached locations acceptible for location requests, in milliseconds."
				},
				"reverseGeocoderTimeout": {
					"summary": "The time within which reverse geocoder requests must succeed, in milliseconds."
				}
			},
			"methods": {
				"getForwardGeocoderTimeout": {
					"summary": "Gets the value of the forwardGeocoderTimeout property."
				},
				"getLocationTimeout": {
					"summary": "Gets the value of the locationTimeout property."
				},
				"getMaximumHeadingAge": {
					"summary": "Gets the value of the maximumHeadingAge property."
				},
				"getMaximumLocationAge": {
					"summary": "Gets the value of the maximumLocationAge property."
				},
				"getReverseGeocoderTimeout": {
					"summary": "Gets the value of the reverseGeocoderTimeout property."
				},
				"setForwardGeocoderTimeout": {
					"summary": "Sets the value of the forwardGeocoderTimeout property."
				},
				"setLocationTimeout": {
					"summary": "Sets the value of the locationTimeout property."
				},
				"setMaximumHeadingAge": {
					"summary": "Sets the value of the maximumHeadingAge property."
				},
				"setMaximumLocationAge": {
					"summary": "Sets the value of the maximumLocationAge property."
				},
				"setReverseGeocoderTimeout": {
					"summary": "Sets the value of the reverseGeocoderTimeout property."
				}
			}
		},
		"Ti.Geolocation": {
			"parent": "Ti.Module",
			"summary": "The top level Geolocation module. The Geolocation module is used for accessing device location based information.",
			"properties": {
				"ACCURACY_BEST": {
					"summary": "Use with accuracy to request the best\naccuracy available.",
					"readOnly": true
				},
				"ACCURACY_BEST_FOR_NAVIGATION": {
					"summary": "Use with accuracy to request highest possible \naccuracy and combine it with additional sensor data.",
					"readOnly": true
				},
				"ACCURACY_HIGH": {
					"summary": "Use with accuracy to request more\naccurate location updates with higher battery usage.",
					"readOnly": true
				},
				"ACCURACY_HUNDRED_METERS": {
					"summary": "Use with accuracy to request location\nupdates accurate to the nearest 100 meters.",
					"readOnly": true
				},
				"ACCURACY_KILOMETER": {
					"summary": "Use with accuracy to request location\nupdates accurate to the nearest kilometer.",
					"readOnly": true
				},
				"ACCURACY_LOW": {
					"summary": "Use with accuracy to request less\naccurate location updates with lower battery usage.",
					"readOnly": true
				},
				"ACCURACY_NEAREST_TEN_METERS": {
					"summary": "Use with accuracy to request location\nupdates accurate to the nearest 10 meters.",
					"readOnly": true
				},
				"ACCURACY_THREE_KILOMETERS": {
					"summary": "Use with accuracy to request location\nupdates accurate to the nearest three kilometers.",
					"readOnly": true
				},
				"ACTIVITYTYPE_AUTOMOTIVE_NAVIGATION": {
					"summary": "The location data is used for tracking location changes to the automobile specifically during vehicular navigation.",
					"readOnly": true
				},
				"ACTIVITYTYPE_FITNESS": {
					"summary": "The location data is used for tracking any pedestrian-related activity.",
					"readOnly": true
				},
				"ACTIVITYTYPE_OTHER": {
					"summary": "The location data is being used for an unknown activity.",
					"readOnly": true
				},
				"ACTIVITYTYPE_OTHER_NAVIGATION": {
					"summary": "The location data is used for tracking movements of other types of vehicular \nnavigation that are not automobile related.",
					"readOnly": true
				},
				"AUTHORIZATION_ALWAYS": {
					"summary": "A locationServicesAuthorization value \nindicating that the application is authorized to start location services at any time. This authorization\nincludes the use of all location services, including monitoring regions and significant location changes.",
					"readOnly": true
				},
				"AUTHORIZATION_AUTHORIZED": {
					"summary": "A locationServicesAuthorization value \nindicating that the application is authorized to use location services.",
					"readOnly": true
				},
				"AUTHORIZATION_DENIED": {
					"summary": "A locationServicesAuthorization value \nindicating that the application is not authorized to use location services, or\nlocation services are disabled.",
					"readOnly": true
				},
				"AUTHORIZATION_RESTRICTED": {
					"summary": "A locationServicesAuthorization value \nindicating that the application is not authorized to use location servies and\nthe user cannot change this application's status.",
					"readOnly": true
				},
				"AUTHORIZATION_UNKNOWN": {
					"summary": "A locationServicesAuthorization value \nindicating that the authorization state is unknown.",
					"readOnly": true
				},
				"AUTHORIZATION_WHEN_IN_USE": {
					"summary": "A locationServicesAuthorization value \nindicating that the application is authorized to start most location services only while running in the foreground.",
					"readOnly": true
				},
				"ERROR_DENIED": {
					"summary": "Error code indicating that the user denied access to the location service.",
					"readOnly": true
				},
				"ERROR_HEADING_FAILURE": {
					"summary": "Error code indicating that the heading could not be determined.",
					"readOnly": true
				},
				"ERROR_LOCATION_UNKNOWN": {
					"summary": "Error code indicating that the user's location could not be determined.",
					"readOnly": true
				},
				"ERROR_NETWORK": {
					"summary": "Error code indicating that the network was unavailable.",
					"readOnly": true
				},
				"ERROR_REGION_MONITORING_DELAYED": {
					"summary": "Error code indicating that region monitoring is delayed.",
					"readOnly": true
				},
				"ERROR_REGION_MONITORING_DENIED": {
					"summary": "Error code indicating that region monitoring is denied.",
					"readOnly": true
				},
				"ERROR_REGION_MONITORING_FAILURE": {
					"summary": "Error code indicating a region monitoring failure.",
					"readOnly": true
				},
				"ERROR_TIMEOUT": {
					"summary": "Error indicating a timeout.",
					"readOnly": true
				},
				"PROVIDER_GPS": {
					"summary": "Specifies the GPS location provider.",
					"readOnly": true
				},
				"PROVIDER_NETWORK": {
					"summary": "Specifies the network location provider.",
					"readOnly": true
				},
				"PROVIDER_PASSIVE": {
					"summary": "Specifies the passive location provider.",
					"readOnly": true
				},
				"accuracy": {
					"summary": "Specifies the requested accuracy for location updates."
				},
				"activityType": {
					"summary": "The type of user activity to be associated with the location updates. Available in iOS 6.0 and later."
				},
				"distanceFilter": {
					"summary": "The minimum change of position (in meters) before a 'location' event is fired."
				},
				"frequency": {
					"summary": "Requested frequency for location updates, in milliseconds."
				},
				"hasCompass": {
					"summary": "Indicates whether the current device supports a compass.",
					"readOnly": true
				},
				"headingFilter": {
					"summary": "Minimum heading change (in degrees) before a heading event is fired."
				},
				"lastGeolocation": {
					"summary": "JSON representation of the last geolocation received.",
					"readOnly": true
				},
				"locationServicesAuthorization": {
					"summary": "Returns an authorization constant indicating if the application has access to location services."
				},
				"locationServicesEnabled": {
					"summary": "Indicates if the user has enabled or disabled location services for the device (not the application).",
					"readOnly": true
				},
				"pauseLocationUpdateAutomatically": {
					"summary": "Indicates whether the location updates may be paused. Available in iOS 6.0 and later."
				},
				"preferredProvider": {
					"summary": "Determines the preferred location provider."
				},
				"purpose": {
					"summary": "Text to display in the permission dialog when requesting location\nservices."
				},
				"showCalibration": {
					"summary": "Determines whether the compass calibration UI is shown if needed."
				},
				"trackSignificantLocationChange": {
					"summary": "Indicates if the location changes should be updated only when a significant change \nin location occurs."
				}
			},
			"methods": {
				"forwardGeocoder": {
					"summary": "Resolves an address to a location."
				},
				"getAccuracy": {
					"summary": "Gets the value of the accuracy property."
				},
				"getActivityType": {
					"summary": "Gets the value of the activityType property."
				},
				"getCurrentHeading": {
					"summary": "Retrieves the current compass heading."
				},
				"getCurrentPosition": {
					"summary": "Retrieves the last known location from the device."
				},
				"getDistanceFilter": {
					"summary": "Gets the value of the distanceFilter property."
				},
				"getFrequency": {
					"summary": "Gets the value of the frequency property."
				},
				"getHasCompass": {
					"summary": "Gets the value of the hasCompass property."
				},
				"getHeadingFilter": {
					"summary": "Gets the value of the headingFilter property."
				},
				"getLastGeolocation": {
					"summary": "Gets the value of the lastGeolocation property."
				},
				"getLocationServicesAuthorization": {
					"summary": "Gets the value of the locationServicesAuthorization property."
				},
				"getLocationServicesEnabled": {
					"summary": "Gets the value of the locationServicesEnabled property."
				},
				"getPauseLocationUpdateAutomatically": {
					"summary": "Gets the value of the pauseLocationUpdateAutomatically property."
				},
				"getPreferredProvider": {
					"summary": "Gets the value of the preferredProvider property."
				},
				"getPurpose": {
					"summary": "Gets the value of the purpose property."
				},
				"getShowCalibration": {
					"summary": "Gets the value of the showCalibration property."
				},
				"getTrackSignificantLocationChange": {
					"summary": "Gets the value of the trackSignificantLocationChange property."
				},
				"reverseGeocoder": {
					"summary": "Tries to resolve a location to an address."
				},
				"setAccuracy": {
					"summary": "Sets the value of the accuracy property."
				},
				"setActivityType": {
					"summary": "Sets the value of the activityType property."
				},
				"setDistanceFilter": {
					"summary": "Sets the value of the distanceFilter property."
				},
				"setFrequency": {
					"summary": "Sets the value of the frequency property."
				},
				"setHeadingFilter": {
					"summary": "Sets the value of the headingFilter property."
				},
				"setLocationServicesAuthorization": {
					"summary": "Sets the value of the locationServicesAuthorization property."
				},
				"setPauseLocationUpdateAutomatically": {
					"summary": "Sets the value of the pauseLocationUpdateAutomatically property."
				},
				"setPreferredProvider": {
					"summary": "Sets the value of the preferredProvider property."
				},
				"setPurpose": {
					"summary": "Sets the value of the purpose property."
				},
				"setShowCalibration": {
					"summary": "Sets the value of the showCalibration property."
				},
				"setTrackSignificantLocationChange": {
					"summary": "Sets the value of the trackSignificantLocationChange property."
				}
			}
		}
	},
	"Utils": {
		"Ti.Utils": {
			"parent": "Ti.Module",
			"summary": "The top-level Utils module, containing a set of JavaScript methods that are often useful when \nbuilding applications.",
			"properties": {},
			"methods": {
				"base64decode": {
					"summary": "Returns the specified data decoded from Base64."
				},
				"base64encode": {
					"summary": "Returns the specified data encoded to Base64."
				},
				"md5HexDigest": {
					"summary": "Returns a MD5 digest of the specified data as a hex-based String."
				},
				"sha1": {
					"summary": "Returns a SHA-1 hash of the specified data as a hex-based String."
				},
				"sha256": {
					"summary": "Returns a SHA-256 hash of the specified data as a hex-based String."
				}
			}
		}
	},
	"Event": {
		"Ti.Event": {
			"parent": "Object",
			"summary": "The base type for all Ti events.",
			"properties": {
				"bubbles": {
					"summary": "True if the event will try to bubble up if possible.",
					"readOnly": true
				},
				"cancelBubble": {
					"summary": "Set to true to stop the event from bubbling."
				},
				"source": {
					"summary": "Source object that fired the event.",
					"readOnly": true
				},
				"type": {
					"summary": "Name of the event fired.",
					"readOnly": true
				}
			},
			"methods": {}
		}
	},
	"Stream": {
		"Ti.Stream": {
			"parent": "Ti.Module",
			"summary": "Stream module containing stream utility methods.",
			"properties": {
				"MODE_APPEND": {
					"summary": "Use with createStream to open a stream in append\nmode.",
					"readOnly": true
				},
				"MODE_READ": {
					"summary": "Use with createStream to open a stream in read\nmode.",
					"readOnly": true
				},
				"MODE_WRITE": {
					"summary": "Use with createStream to open a stream in write\nmode.",
					"readOnly": true
				}
			},
			"methods": {
				"createStream": {
					"summary": "Creates stream from a Buffer or Blob object."
				},
				"pump": {
					"summary": "Reads data from input stream and passes it to a handler method."
				},
				"read": {
					"summary": "Asynchronously reads data from an IOStream into a buffer."
				},
				"readAll": {
					"summary": "Reads all data from the specified IOStream."
				},
				"write": {
					"summary": "Asynchronously writes data from a buffer to an IOStream."
				},
				"writeStream": {
					"summary": "Writes all data from an input stream to an output stream."
				}
			}
		}
	}
}