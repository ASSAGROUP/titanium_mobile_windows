/**
 * Titanium Windows Native Module - <%- moduleName %>
 *
 * Copyright (c) 2015 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License.
 * Please see the LICENSE included with this distribution for details.
 */

#ifndef _<%- moduleName.toUpperCase() %>_HPP_
#define _<%- moduleName.toUpperCase() %>_HPP_

#include "<%- moduleName %>_EXPORT.h"

#include "Titanium/detail/TiBase.hpp"

<%  var namespaces = moduleId.split('.'),
	indent = Array(namespaces.length).join('\t');
    for(var i = 0; i < namespaces.length; i++) { -%>
<%- 	Array(i+1).join('\t') %>namespace <%- namespaces[i] %>
<%- 	Array(i+1).join('\t') %>{
<%  } -%>
<%- indent %>	using namespace HAL;

<%- indent %>	class <%- moduleName.toUpperCase() %>_EXPORT <%- moduleName %> : public JSExport<<%- moduleName %>>
<%- indent %>	{
<%- indent %>		public:
<%- indent %>			<%- moduleName %>(const JSContext&, const std::vector<JSValue>& arguments = {}) TITANIUM_NOEXCEPT;
<%- indent %>			virtual void postInitialize(JSObject& js_object);
<%- indent %>			virtual void postCallAsConstructor(const JSContext& js_context, const std::vector<JSValue>& arguments);

<%- indent %>			virtual ~<%- moduleName %>()<%= Array(moduleName.length).join(' ') %>           = default;
<%- indent %>			<%- moduleName %>(const <%- moduleName %>&)            = default;
<%- indent %>			<%- moduleName %>& operator=(const <%- moduleName %>&) = default;
#ifdef TITANIUM_MOVE_CTOR_AND_ASSIGN_DEFAULT_ENABLE
<%- indent %>			<%- moduleName %>(<%- moduleName %>&&)                 = default;
<%- indent %>			<%- moduleName %>& operator=(<%- moduleName %>&&)      = default;
#endif

<%- indent %>			static void JSExportInitialize();
<%- indent %>	};
<%  for(var i = namespaces.length; i > 0; i--) { -%>
<%- 	Array(i).join('\t') %>}
<%  } -%>
#endif // _<%- moduleName.toUpperCase() %>_HPP_